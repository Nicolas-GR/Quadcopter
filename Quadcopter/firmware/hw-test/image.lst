
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         00000928  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       0000005c  00000928  00000928  0000097c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  00000984  00000984  000009d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000088  00000998  00000998  000009ec  2**2
                  ALLOC
  4 .debug_abbrev 00000327  00000000  00000000  000009ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b0e  00000000  00000000  00000d13  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000807  00000000  00000000  00001821  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000220  00000000  00000000  00002028  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000023e  00000000  00000000  00002248  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 0000006a  00000000  00000000  00002486  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000040  00000000  00000000  000024f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c7  00000000  00000000  00002530  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  000027f7  2**0
                  CONTENTS, READONLY
 13 .debug_loc    00000336  00000000  00000000  00002808  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000e8  00000000  00000000  00002b3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 75 	calli 2a0 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 09 a0 	ori gp,gp,0x9a0
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 09 98 	ori r1,r1,0x998
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0a 20 	ori r3,r3,0xa20

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
#include "stdio.h"
#include "stdlib.h"


int main()
{
 208:	37 9c ff fc 	addi sp,sp,-4
 20c:	5b 9d 00 04 	sw (sp+4),ra
for(;;){
	float b;
	int c;	
	b = sinf(45.5);
	c=b*100;
	uart_putstr1(c);
 210:	34 01 00 63 	mvi r1,99
 214:	f8 00 01 0c 	calli 644 <uart_putstr1>
 218:	e3 ff ff fe 	bi 210 <main+0x8>

0000021c <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 21c:	c3 a0 00 00 	ret

00000220 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 220:	78 01 00 00 	mvhi r1,0x0
 224:	38 21 0a 1c 	ori r1,r1,0xa1c
 228:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 22c:	78 02 00 00 	mvhi r2,0x0
 230:	38 42 09 88 	ori r2,r2,0x988
 234:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 238:	34 63 00 01 	addi r3,r3,1
 23c:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 240:	34 01 00 0e 	mvi r1,14
 244:	58 41 00 00 	sw (r2+0),r1
}
 248:	c3 a0 00 00 	ret

0000024c <prueba>:

isr_ptr_t isr_table[32];

void prueba()
{
	uart0->rxtx=30;
 24c:	78 02 00 00 	mvhi r2,0x0
 250:	38 42 09 84 	ori r2,r2,0x984
	uart1->rxtx=30;
 254:	78 01 00 00 	mvhi r1,0x0

isr_ptr_t isr_table[32];

void prueba()
{
	uart0->rxtx=30;
 258:	28 45 00 00 	lw r5,(r2+0)
	uart1->rxtx=30;
 25c:	38 21 09 90 	ori r1,r1,0x990
	timer0->tcr0 = 0xAA;
 260:	78 02 00 00 	mvhi r2,0x0
isr_ptr_t isr_table[32];

void prueba()
{
	uart0->rxtx=30;
	uart1->rxtx=30;
 264:	28 24 00 00 	lw r4,(r1+0)
	timer0->tcr0 = 0xAA;
 268:	38 42 09 88 	ori r2,r2,0x988
	//spi0->rxtx=1;
	//spi0->nop1=2;
	//spi0->cs=3;
	//spi0->nop2=5;
	//spi0->divisor=4;
	i2c0->rxtx=5;
 26c:	78 01 00 00 	mvhi r1,0x0

isr_ptr_t isr_table[32];

void prueba()
{
	uart0->rxtx=30;
 270:	34 03 00 1e 	mvi r3,30
	uart1->rxtx=30;
	timer0->tcr0 = 0xAA;
 274:	28 42 00 00 	lw r2,(r2+0)
	//spi0->rxtx=1;
	//spi0->nop1=2;
	//spi0->cs=3;
	//spi0->nop2=5;
	//spi0->divisor=4;
	i2c0->rxtx=5;
 278:	38 21 09 94 	ori r1,r1,0x994

isr_ptr_t isr_table[32];

void prueba()
{
	uart0->rxtx=30;
 27c:	58 a3 00 04 	sw (r5+4),r3
	//spi0->rxtx=1;
	//spi0->nop1=2;
	//spi0->cs=3;
	//spi0->nop2=5;
	//spi0->divisor=4;
	i2c0->rxtx=5;
 280:	28 21 00 00 	lw r1,(r1+0)
isr_ptr_t isr_table[32];

void prueba()
{
	uart0->rxtx=30;
	uart1->rxtx=30;
 284:	58 83 00 04 	sw (r4+4),r3
	timer0->tcr0 = 0xAA;
 288:	34 03 00 aa 	mvi r3,170
 28c:	58 43 00 00 	sw (r2+0),r3
	//spi0->rxtx=1;
	//spi0->nop1=2;
	//spi0->cs=3;
	//spi0->nop2=5;
	//spi0->divisor=4;
	i2c0->rxtx=5;
 290:	34 02 00 05 	mvi r2,5
 294:	58 22 00 00 	sw (r1+0),r2
	i2c0->divisor=5;
 298:	58 22 00 04 	sw (r1+4),r2

}
 29c:	c3 a0 00 00 	ret

000002a0 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 2a0:	37 9c ff f0 	addi sp,sp,-16
 2a4:	5b 8b 00 10 	sw (sp+16),r11
 2a8:	5b 8c 00 0c 	sw (sp+12),r12
 2ac:	5b 8d 00 08 	sw (sp+8),r13
 2b0:	5b 9d 00 04 	sw (sp+4),ra
 2b4:	78 0b 00 00 	mvhi r11,0x0
 2b8:	39 6b 09 9c 	ori r11,r11,0x99c
 2bc:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 2c0:	35 6d 00 80 	addi r13,r11,128
 2c4:	e0 00 00 04 	bi 2d4 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 2c8:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 2cc:	45 6d 00 08 	be r11,r13,2ec <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 2d0:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 2d4:	21 81 00 01 	andi r1,r12,0x1
 2d8:	44 20 ff fc 	be r1,r0,2c8 <irq_handler+0x28>
 2dc:	29 61 00 00 	lw r1,(r11+0)
 2e0:	35 6b 00 04 	addi r11,r11,4
 2e4:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 2e8:	5d 6d ff fa 	bne r11,r13,2d0 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 2ec:	2b 9d 00 04 	lw ra,(sp+4)
 2f0:	2b 8b 00 10 	lw r11,(sp+16)
 2f4:	2b 8c 00 0c 	lw r12,(sp+12)
 2f8:	2b 8d 00 08 	lw r13,(sp+8)
 2fc:	37 9c 00 10 	addi sp,sp,16
 300:	c3 a0 00 00 	ret

00000304 <isr_init>:

void isr_init()
{
 304:	78 01 00 00 	mvhi r1,0x0
 308:	78 02 00 00 	mvhi r2,0x0
 30c:	38 21 09 9c 	ori r1,r1,0x99c
 310:	38 42 02 1c 	ori r2,r2,0x21c
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 314:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 318:	58 22 00 00 	sw (r1+0),r2
 31c:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 320:	5c 23 ff fe 	bne r1,r3,318 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 324:	c3 a0 00 00 	ret

00000328 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 328:	78 03 00 00 	mvhi r3,0x0
 32c:	3c 21 00 02 	sli r1,r1,2
 330:	38 63 09 9c 	ori r3,r3,0x99c
 334:	b4 61 18 00 	add r3,r3,r1
 338:	58 62 00 00 	sw (r3+0),r2
}
 33c:	c3 a0 00 00 	ret

00000340 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 340:	78 03 00 00 	mvhi r3,0x0
 344:	3c 21 00 02 	sli r1,r1,2
 348:	38 63 09 9c 	ori r3,r3,0x99c
 34c:	78 02 00 00 	mvhi r2,0x0
 350:	b4 61 18 00 	add r3,r3,r1
 354:	38 42 02 1c 	ori r2,r2,0x21c
 358:	58 62 00 00 	sw (r3+0),r2
}
 35c:	c3 a0 00 00 	ret

00000360 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 360:	78 04 00 00 	mvhi r4,0x0
 364:	38 84 09 28 	ori r4,r4,0x928
 368:	28 83 00 00 	lw r3,(r4+0)
 36c:	78 02 00 00 	mvhi r2,0x0
 370:	38 42 09 88 	ori r2,r2,0x988
 374:	28 42 00 00 	lw r2,(r2+0)
 378:	88 23 08 00 	mul r1,r1,r3
 37c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 380:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 384:	34 01 00 08 	mvi r1,8
 388:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
		tcr = timer0->tcr1;
 38c:	28 41 00 0c 	lw r1,(r2+12)
	} while ( ! (tcr & TIMER_TRIG) );
 390:	20 21 00 01 	andi r1,r1,0x1
 394:	44 20 ff fe 	be r1,r0,38c <msleep+0x2c>
}
 398:	c3 a0 00 00 	ret

0000039c <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 39c:	78 02 00 00 	mvhi r2,0x0
 3a0:	38 42 09 88 	ori r2,r2,0x988
 3a4:	28 42 00 00 	lw r2,(r2+0)
 3a8:	08 21 00 64 	muli r1,r1,100
 3ac:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3b0:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 3b4:	34 01 00 08 	mvi r1,8
 3b8:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
		tcr = timer0->tcr1;
 3bc:	28 41 00 0c 	lw r1,(r2+12)
	} while ( ! (tcr & TIMER_TRIG) );
 3c0:	20 21 00 01 	andi r1,r1,0x1
 3c4:	44 20 ff fe 	be r1,r0,3bc <nsleep+0x20>
}
 3c8:	c3 a0 00 00 	ret

000003cc <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 3cc:	78 01 00 00 	mvhi r1,0x0
 3d0:	38 21 09 88 	ori r1,r1,0x988
 3d4:	28 23 00 00 	lw r3,(r1+0)
 3d8:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 3dc:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 3e0:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 3e4:	38 21 0a 1c 	ori r1,r1,0xa1c

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 3e8:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 3ec:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 3f0:	78 02 00 00 	mvhi r2,0x0
 3f4:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 3f8:	34 04 00 0e 	mvi r4,14
 3fc:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 400:	38 21 09 9c 	ori r1,r1,0x99c
 404:	38 42 02 20 	ori r2,r2,0x220
 408:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 40c:	c3 a0 00 00 	ret

00000410 <wifi_getchar>:
			c = uart_getchar();
			return c;
			break;
		}
	}
	return '\n';
 410:	78 01 00 00 	mvhi r1,0x0
 414:	38 21 09 84 	ori r1,r1,0x984
 418:	28 22 00 00 	lw r2,(r1+0)
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 41c:	34 03 00 00 	mvi r3,0
		c = uart_getchar();
		if (c ==':'){
 420:	34 04 00 3a 	mvi r4,58
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 424:	34 05 00 14 	mvi r5,20
	//uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 428:	28 41 00 00 	lw r1,(r2+0)
 42c:	20 21 00 01 	andi r1,r1,0x1
 430:	44 20 ff fe 	be r1,r0,428 <wifi_getchar+0x18>
	return uart0->rxtx;
 434:	28 41 00 04 	lw r1,(r2+4)
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 438:	34 63 00 01 	addi r3,r3,1
		c = uart_getchar();
		if (c ==':'){
 43c:	20 21 00 ff 	andi r1,r1,0xff
 440:	44 24 00 04 	be r1,r4,450 <wifi_getchar+0x40>
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 444:	5c 65 ff f9 	bne r3,r5,428 <wifi_getchar+0x18>
			c = uart_getchar();
			return c;
			break;
		}
	}
	return '\n';
 448:	34 01 00 0a 	mvi r1,10

}
 44c:	c3 a0 00 00 	ret
	//uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 450:	28 41 00 00 	lw r1,(r2+0)
 454:	20 21 00 01 	andi r1,r1,0x1
 458:	44 20 ff fe 	be r1,r0,450 <wifi_getchar+0x40>
	return uart0->rxtx;
 45c:	28 41 00 04 	lw r1,(r2+4)
 460:	20 21 00 ff 	andi r1,r1,0xff
	int i=0;
	for(i=0;i<20;i++){
		c = uart_getchar();
		if (c ==':'){
			c = uart_getchar();
			return c;
 464:	c3 a0 00 00 	ret

00000468 <ok>:
		a=uart_getchar();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
 468:	78 01 00 00 	mvhi r1,0x0
 46c:	38 21 09 84 	ori r1,r1,0x984
 470:	28 22 00 00 	lw r2,(r1+0)
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 474:	34 03 00 00 	mvi r3,0
		a=uart_getchar();
		if(a=='K'){
 478:	34 04 00 4b 	mvi r4,75
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 47c:	34 05 00 1e 	mvi r5,30
	//uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 480:	28 41 00 00 	lw r1,(r2+0)
 484:	20 21 00 01 	andi r1,r1,0x1
 488:	44 20 ff fe 	be r1,r0,480 <ok+0x18>
	return uart0->rxtx;
 48c:	28 41 00 04 	lw r1,(r2+4)
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 490:	34 63 00 01 	addi r3,r3,1
		a=uart_getchar();
		if(a=='K'){
 494:	20 21 00 ff 	andi r1,r1,0xff
 498:	44 24 00 04 	be r1,r4,4a8 <ok+0x40>
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 49c:	5c 65 ff f9 	bne r3,r5,480 <ok+0x18>
		a=uart_getchar();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
 4a0:	34 01 00 00 	mvi r1,0
 4a4:	c3 a0 00 00 	ret
	int i=0;
	char a;
	for(i=0;i<30;i++){
		a=uart_getchar();
		if(a=='K'){
			return 1;
 4a8:	34 01 00 01 	mvi r1,1
		}
	}
	return 0;

}
 4ac:	c3 a0 00 00 	ret

000004b0 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 4b0:	c3 a0 00 00 	ret

000004b4 <uart_getchar>:

char uart_getchar()
{   
 4b4:	78 01 00 00 	mvhi r1,0x0
 4b8:	38 21 09 84 	ori r1,r1,0x984
 4bc:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 4c0:	28 41 00 00 	lw r1,(r2+0)
 4c4:	20 21 00 01 	andi r1,r1,0x1
 4c8:	44 20 ff fe 	be r1,r0,4c0 <uart_getchar+0xc>
	return uart0->rxtx;
 4cc:	28 41 00 04 	lw r1,(r2+4)
}
 4d0:	20 21 00 ff 	andi r1,r1,0xff
 4d4:	c3 a0 00 00 	ret

000004d8 <uart_putchar>:

void uart_putchar(char c)
{
 4d8:	78 02 00 00 	mvhi r2,0x0
 4dc:	38 42 09 84 	ori r2,r2,0x984
 4e0:	28 43 00 00 	lw r3,(r2+0)
 4e4:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 4e8:	28 62 00 00 	lw r2,(r3+0)
 4ec:	20 42 00 10 	andi r2,r2,0x10
 4f0:	5c 40 ff fe 	bne r2,r0,4e8 <uart_putchar+0x10>
	uart0->rxtx = c;
 4f4:	58 61 00 04 	sw (r3+4),r1
}
 4f8:	c3 a0 00 00 	ret

000004fc <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 4fc:	40 24 00 00 	lbu r4,(r1+0)
 500:	44 80 00 0b 	be r4,r0,52c <uart_putstr+0x30>
 504:	78 02 00 00 	mvhi r2,0x0
 508:	38 42 09 84 	ori r2,r2,0x984
 50c:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 510:	28 62 00 00 	lw r2,(r3+0)
 514:	20 42 00 10 	andi r2,r2,0x10
 518:	5c 40 ff fe 	bne r2,r0,510 <uart_putstr+0x14>
	uart0->rxtx = c;
 51c:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 520:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 524:	40 24 00 00 	lbu r4,(r1+0)
 528:	5c 82 ff fa 	bne r4,r2,510 <uart_putstr+0x14>
 52c:	c3 a0 00 00 	ret

00000530 <wifi_putchar>:
		uart_putstr("AT+CIPSERVER=1,80\r\n");
		c = ok();
	}
}

void wifi_putchar(char a){
 530:	37 9c ff ec 	addi sp,sp,-20
 534:	5b 8b 00 14 	sw (sp+20),r11
 538:	5b 8c 00 10 	sw (sp+16),r12
 53c:	5b 8d 00 0c 	sw (sp+12),r13
 540:	5b 8e 00 08 	sw (sp+8),r14
 544:	5b 9d 00 04 	sw (sp+4),ra
 548:	78 0d 00 00 	mvhi r13,0x0
 54c:	78 0c 00 00 	mvhi r12,0x0
 550:	20 2e 00 ff 	andi r14,r1,0xff
 554:	39 ad 09 40 	ori r13,r13,0x940
 558:	39 8c 09 84 	ori r12,r12,0x984
	int c = 0; 	  
	while(c == 0){
		uart_putstr("AT+CIPSEND=0,1\r\n");
 55c:	b9 a0 08 00 	mv r1,r13
 560:	fb ff ff e7 	calli 4fc <uart_putstr>
 564:	29 82 00 00 	lw r2,(r12+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 568:	28 4b 00 00 	lw r11,(r2+0)
 56c:	21 6b 00 10 	andi r11,r11,0x10
 570:	5d 60 ff fe 	bne r11,r0,568 <wifi_putchar+0x38>
	uart0->rxtx = c;
 574:	58 4e 00 04 	sw (r2+4),r14
void wifi_putchar(char a){
	int c = 0; 	  
	while(c == 0){
		uart_putstr("AT+CIPSEND=0,1\r\n");
		uart_putchar(a);
		c = ok();
 578:	fb ff ff bc 	calli 468 <ok>
	}
}

void wifi_putchar(char a){
	int c = 0; 	  
	while(c == 0){
 57c:	44 2b ff f8 	be r1,r11,55c <wifi_putchar+0x2c>
		uart_putstr("AT+CIPSEND=0,1\r\n");
		uart_putchar(a);
		c = ok();
	}
}
 580:	2b 9d 00 04 	lw ra,(sp+4)
 584:	2b 8b 00 14 	lw r11,(sp+20)
 588:	2b 8c 00 10 	lw r12,(sp+16)
 58c:	2b 8d 00 0c 	lw r13,(sp+12)
 590:	2b 8e 00 08 	lw r14,(sp+8)
 594:	37 9c 00 14 	addi sp,sp,20
 598:	c3 a0 00 00 	ret

0000059c <init_wifi>:

/***************************************************************************
 * WIFI ESP8266 Functions
 */

void init_wifi(){ //configurar el modulo como estación con puerto 80
 59c:	37 9c ff f8 	addi sp,sp,-8
 5a0:	5b 8b 00 08 	sw (sp+8),r11
 5a4:	5b 9d 00 04 	sw (sp+4),ra
	uart_putstr("AT+RST\r\n");
 5a8:	78 01 00 00 	mvhi r1,0x0
 5ac:	38 21 09 54 	ori r1,r1,0x954
 5b0:	fb ff ff d3 	calli 4fc <uart_putstr>
	msleep(200);
 5b4:	34 01 00 c8 	mvi r1,200
 5b8:	78 0b 00 00 	mvhi r11,0x0
 5bc:	fb ff ff 69 	calli 360 <msleep>
 5c0:	39 6b 09 60 	ori r11,r11,0x960
	int c = 0;
	while(c==0){
		uart_putstr("AT+CIPMUX=1\r\n");
 5c4:	b9 60 08 00 	mv r1,r11
 5c8:	fb ff ff cd 	calli 4fc <uart_putstr>
		c = ok();
 5cc:	fb ff ff a7 	calli 468 <ok>

void init_wifi(){ //configurar el modulo como estación con puerto 80
	uart_putstr("AT+RST\r\n");
	msleep(200);
	int c = 0;
	while(c==0){
 5d0:	44 20 ff fd 	be r1,r0,5c4 <init_wifi+0x28>
 5d4:	78 0b 00 00 	mvhi r11,0x0
 5d8:	39 6b 09 70 	ori r11,r11,0x970
		uart_putstr("AT+CIPMUX=1\r\n");
		c = ok();
	}
	c = 0;
	while (c==0){
		uart_putstr("AT+CIPSERVER=1,80\r\n");
 5dc:	b9 60 08 00 	mv r1,r11
 5e0:	fb ff ff c7 	calli 4fc <uart_putstr>
		c = ok();
 5e4:	fb ff ff a1 	calli 468 <ok>
	while(c==0){
		uart_putstr("AT+CIPMUX=1\r\n");
		c = ok();
	}
	c = 0;
	while (c==0){
 5e8:	44 20 ff fd 	be r1,r0,5dc <init_wifi+0x40>
		uart_putstr("AT+CIPSERVER=1,80\r\n");
		c = ok();
	}
}
 5ec:	2b 9d 00 04 	lw ra,(sp+4)
 5f0:	2b 8b 00 08 	lw r11,(sp+8)
 5f4:	37 9c 00 08 	addi sp,sp,8
 5f8:	c3 a0 00 00 	ret

000005fc <uart_getchar1>:


//uart1

char uart_getchar1()
{   
 5fc:	78 01 00 00 	mvhi r1,0x0
 600:	38 21 09 90 	ori r1,r1,0x990
 604:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;
 608:	28 41 00 00 	lw r1,(r2+0)
 60c:	20 21 00 01 	andi r1,r1,0x1
 610:	44 20 ff fe 	be r1,r0,608 <uart_getchar1+0xc>
	return uart1->rxtx;
 614:	28 41 00 04 	lw r1,(r2+4)
}
 618:	20 21 00 ff 	andi r1,r1,0xff
 61c:	c3 a0 00 00 	ret

00000620 <uart_putchar1>:

void uart_putchar1(char c)
{
 620:	78 02 00 00 	mvhi r2,0x0
 624:	38 42 09 90 	ori r2,r2,0x990
 628:	28 43 00 00 	lw r3,(r2+0)
 62c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
 630:	28 62 00 00 	lw r2,(r3+0)
 634:	20 42 00 10 	andi r2,r2,0x10
 638:	5c 40 ff fe 	bne r2,r0,630 <uart_putchar1+0x10>
	uart1->rxtx = c;
 63c:	58 61 00 04 	sw (r3+4),r1
}
 640:	c3 a0 00 00 	ret

00000644 <uart_putstr1>:

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 644:	40 24 00 00 	lbu r4,(r1+0)
 648:	44 80 00 0b 	be r4,r0,674 <uart_putstr1+0x30>
 64c:	78 02 00 00 	mvhi r2,0x0
 650:	38 42 09 90 	ori r2,r2,0x990
 654:	28 43 00 00 	lw r3,(r2+0)
	return uart1->rxtx;
}

void uart_putchar1(char c)
{
	while (uart1->ucr & UART_BUSY) ;
 658:	28 62 00 00 	lw r2,(r3+0)
 65c:	20 42 00 10 	andi r2,r2,0x10
 660:	5c 40 ff fe 	bne r2,r0,658 <uart_putstr1+0x14>
	uart1->rxtx = c;
 664:	58 64 00 04 	sw (r3+4),r4
void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar1(*c);
		c++;
 668:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 66c:	40 24 00 00 	lbu r4,(r1+0)
 670:	5c 82 ff fa 	bne r4,r2,658 <uart_putstr1+0x14>
 674:	c3 a0 00 00 	ret

00000678 <set_period>:
/***************************************************************************
 * Functions PWM //FUNCIONES PRIMITIVAS
 */

void set_period(int p){
	pwm0->period=p;
 678:	78 02 00 00 	mvhi r2,0x0
 67c:	38 42 09 8c 	ori r2,r2,0x98c
 680:	28 42 00 00 	lw r2,(r2+0)
 684:	58 41 00 00 	sw (r2+0),r1
}
 688:	c3 a0 00 00 	ret

0000068c <set_motor1>:
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
 68c:	78 02 00 00 	mvhi r2,0x0
 690:	38 42 09 8c 	ori r2,r2,0x98c
 694:	28 42 00 00 	lw r2,(r2+0)
 698:	58 41 00 04 	sw (r2+4),r1
}
 69c:	c3 a0 00 00 	ret

000006a0 <set_motor2>:
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
 6a0:	78 02 00 00 	mvhi r2,0x0
 6a4:	38 42 09 8c 	ori r2,r2,0x98c
 6a8:	28 42 00 00 	lw r2,(r2+0)
 6ac:	58 41 00 08 	sw (r2+8),r1
}
 6b0:	c3 a0 00 00 	ret

000006b4 <set_motor3>:
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
 6b4:	78 02 00 00 	mvhi r2,0x0
 6b8:	38 42 09 8c 	ori r2,r2,0x98c
 6bc:	28 42 00 00 	lw r2,(r2+0)
 6c0:	58 41 00 0c 	sw (r2+12),r1
}
 6c4:	c3 a0 00 00 	ret

000006c8 <set_motor4>:
void set_motor4(int wk){
	pwm0-> duty_m4=wk;
 6c8:	78 02 00 00 	mvhi r2,0x0
 6cc:	38 42 09 8c 	ori r2,r2,0x98c
 6d0:	28 42 00 00 	lw r2,(r2+0)
 6d4:	58 41 00 10 	sw (r2+16),r1
}
 6d8:	c3 a0 00 00 	ret

000006dc <setMotors>:

/***************************************************************************
 * Functions motors //FUNCIONES PRIMITIVAS
 */

void setMotors(){
 6dc:	37 9c ff fc 	addi sp,sp,-4
 6e0:	5b 9d 00 04 	sw (sp+4),ra
/***************************************************************************
 * Functions PWM //FUNCIONES PRIMITIVAS
 */

void set_period(int p){
	pwm0->period=p;
 6e4:	78 01 00 00 	mvhi r1,0x0
 6e8:	78 05 00 00 	mvhi r5,0x0
 6ec:	38 a5 09 2c 	ori r5,r5,0x92c
 6f0:	38 21 09 8c 	ori r1,r1,0x98c
 6f4:	28 22 00 00 	lw r2,(r1+0)
 6f8:	28 a4 00 00 	lw r4,(r5+0)
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
 6fc:	34 03 27 10 	mvi r3,10000
	set_period(0x1E8480); //F=50Hz
	set_motor1(0x2710);
	set_motor2(0x2710);
	set_motor3(0x2710);
	set_motor4(0x2710);
	msleep(0x3E8);
 700:	34 01 03 e8 	mvi r1,1000
/***************************************************************************
 * Functions PWM //FUNCIONES PRIMITIVAS
 */

void set_period(int p){
	pwm0->period=p;
 704:	58 44 00 00 	sw (r2+0),r4
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
 708:	58 43 00 04 	sw (r2+4),r3
}
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
 70c:	58 43 00 08 	sw (r2+8),r3
}
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
 710:	58 43 00 0c 	sw (r2+12),r3
}
void set_motor4(int wk){
	pwm0-> duty_m4=wk;
 714:	58 43 00 10 	sw (r2+16),r3
	set_period(0x1E8480); //F=50Hz
	set_motor1(0x2710);
	set_motor2(0x2710);
	set_motor3(0x2710);
	set_motor4(0x2710);
	msleep(0x3E8);
 718:	fb ff ff 12 	calli 360 <msleep>
}
 71c:	2b 9d 00 04 	lw ra,(sp+4)
 720:	37 9c 00 04 	addi sp,sp,4
 724:	c3 a0 00 00 	ret

00000728 <speedM1>:

int vel;

void speedM1(int s){
	if(s == 0){
 728:	44 20 00 1a 	be r1,r0,790 <speedM1+0x68>
		set_motor1(0x258);	
	}else if((s <= 0x1) && (s <= 0x64)){
 72c:	34 02 00 01 	mvi r2,1
 730:	48 22 00 0e 	bg r1,r2,768 <speedM1+0x40>
		vel = 0x434 * s + 0x1CA60;
 734:	78 05 00 00 	mvhi r5,0x0

void set_period(int p){
	pwm0->period=p;
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
 738:	78 02 00 00 	mvhi r2,0x0

void speedM1(int s){
	if(s == 0){
		set_motor1(0x258);	
	}else if((s <= 0x1) && (s <= 0x64)){
		vel = 0x434 * s + 0x1CA60;
 73c:	38 a5 09 30 	ori r5,r5,0x930

void set_period(int p){
	pwm0->period=p;
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
 740:	38 42 09 8c 	ori r2,r2,0x98c

void speedM1(int s){
	if(s == 0){
		set_motor1(0x258);	
	}else if((s <= 0x1) && (s <= 0x64)){
		vel = 0x434 * s + 0x1CA60;
 744:	08 21 04 34 	muli r1,r1,1076
 748:	28 a4 00 00 	lw r4,(r5+0)

void set_period(int p){
	pwm0->period=p;
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
 74c:	28 43 00 00 	lw r3,(r2+0)

void speedM1(int s){
	if(s == 0){
		set_motor1(0x258);	
	}else if((s <= 0x1) && (s <= 0x64)){
		vel = 0x434 * s + 0x1CA60;
 750:	78 02 00 00 	mvhi r2,0x0
 754:	b4 24 08 00 	add r1,r1,r4
 758:	38 42 09 98 	ori r2,r2,0x998
 75c:	58 41 00 00 	sw (r2+0),r1

void set_period(int p){
	pwm0->period=p;
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
 760:	58 61 00 04 	sw (r3+4),r1
 764:	c3 a0 00 00 	ret
	if(s == 0){
		set_motor1(0x258);	
	}else if((s <= 0x1) && (s <= 0x64)){
		vel = 0x434 * s + 0x1CA60;
		set_motor1(vel);
	}else if(s > 0x64){
 768:	34 02 00 64 	mvi r2,100
 76c:	4c 41 00 08 	bge r2,r1,78c <speedM1+0x64>

void set_period(int p){
	pwm0->period=p;
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
 770:	78 01 00 00 	mvhi r1,0x0
 774:	78 03 00 00 	mvhi r3,0x0
 778:	38 21 09 8c 	ori r1,r1,0x98c
 77c:	38 63 09 34 	ori r3,r3,0x934
 780:	28 21 00 00 	lw r1,(r1+0)
 784:	28 62 00 00 	lw r2,(r3+0)
 788:	58 22 00 04 	sw (r1+4),r2
 78c:	c3 a0 00 00 	ret
 790:	78 01 00 00 	mvhi r1,0x0
 794:	38 21 09 8c 	ori r1,r1,0x98c
 798:	28 21 00 00 	lw r1,(r1+0)
 79c:	34 02 02 58 	mvi r2,600
 7a0:	58 22 00 04 	sw (r1+4),r2
 7a4:	c3 a0 00 00 	ret

000007a8 <speedM2>:
		set_motor1(0x36EB0);
	}
}

void speedM2(int s){
	if(s == 0){
 7a8:	44 20 00 1a 	be r1,r0,810 <speedM2+0x68>
		set_motor2(0x258);	
	}else if((s <= 0x1) && (s <= 0x64)){
 7ac:	34 02 00 01 	mvi r2,1
 7b0:	48 22 00 0e 	bg r1,r2,7e8 <speedM2+0x40>
		vel = 0x434 * s + 0x1CA60;
 7b4:	78 05 00 00 	mvhi r5,0x0
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
}
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
 7b8:	78 02 00 00 	mvhi r2,0x0

void speedM2(int s){
	if(s == 0){
		set_motor2(0x258);	
	}else if((s <= 0x1) && (s <= 0x64)){
		vel = 0x434 * s + 0x1CA60;
 7bc:	38 a5 09 30 	ori r5,r5,0x930
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
}
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
 7c0:	38 42 09 8c 	ori r2,r2,0x98c

void speedM2(int s){
	if(s == 0){
		set_motor2(0x258);	
	}else if((s <= 0x1) && (s <= 0x64)){
		vel = 0x434 * s + 0x1CA60;
 7c4:	08 21 04 34 	muli r1,r1,1076
 7c8:	28 a4 00 00 	lw r4,(r5+0)
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
}
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
 7cc:	28 43 00 00 	lw r3,(r2+0)

void speedM2(int s){
	if(s == 0){
		set_motor2(0x258);	
	}else if((s <= 0x1) && (s <= 0x64)){
		vel = 0x434 * s + 0x1CA60;
 7d0:	78 02 00 00 	mvhi r2,0x0
 7d4:	b4 24 08 00 	add r1,r1,r4
 7d8:	38 42 09 98 	ori r2,r2,0x998
 7dc:	58 41 00 00 	sw (r2+0),r1
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
}
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
 7e0:	58 61 00 08 	sw (r3+8),r1
 7e4:	c3 a0 00 00 	ret
	if(s == 0){
		set_motor2(0x258);	
	}else if((s <= 0x1) && (s <= 0x64)){
		vel = 0x434 * s + 0x1CA60;
		set_motor2(vel);
	}else if(s > 0x64){
 7e8:	34 02 00 64 	mvi r2,100
 7ec:	4c 41 00 08 	bge r2,r1,80c <speedM2+0x64>
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
}
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
 7f0:	78 01 00 00 	mvhi r1,0x0
 7f4:	78 03 00 00 	mvhi r3,0x0
 7f8:	38 21 09 8c 	ori r1,r1,0x98c
 7fc:	38 63 09 34 	ori r3,r3,0x934
 800:	28 21 00 00 	lw r1,(r1+0)
 804:	28 62 00 00 	lw r2,(r3+0)
 808:	58 22 00 08 	sw (r1+8),r2
 80c:	c3 a0 00 00 	ret
 810:	78 01 00 00 	mvhi r1,0x0
 814:	38 21 09 8c 	ori r1,r1,0x98c
 818:	28 21 00 00 	lw r1,(r1+0)
 81c:	34 02 02 58 	mvi r2,600
 820:	58 22 00 08 	sw (r1+8),r2
 824:	c3 a0 00 00 	ret

00000828 <speedM3>:
		set_motor2(0x36EB0);
	}
}

void speedM3(int s){
	if(s == 0){
 828:	44 20 00 1a 	be r1,r0,890 <speedM3+0x68>
		set_motor3(0x258);	
	}else if((s <= 0x1) && (s <= 0x64)){
 82c:	34 02 00 01 	mvi r2,1
 830:	48 22 00 0e 	bg r1,r2,868 <speedM3+0x40>
		vel = 0x38D * s + 0xF1B8B;
 834:	78 05 00 00 	mvhi r5,0x0
}
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
}
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
 838:	78 02 00 00 	mvhi r2,0x0

void speedM3(int s){
	if(s == 0){
		set_motor3(0x258);	
	}else if((s <= 0x1) && (s <= 0x64)){
		vel = 0x38D * s + 0xF1B8B;
 83c:	38 a5 09 38 	ori r5,r5,0x938
}
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
}
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
 840:	38 42 09 8c 	ori r2,r2,0x98c

void speedM3(int s){
	if(s == 0){
		set_motor3(0x258);	
	}else if((s <= 0x1) && (s <= 0x64)){
		vel = 0x38D * s + 0xF1B8B;
 844:	08 21 03 8d 	muli r1,r1,909
 848:	28 a4 00 00 	lw r4,(r5+0)
}
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
}
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
 84c:	28 43 00 00 	lw r3,(r2+0)

void speedM3(int s){
	if(s == 0){
		set_motor3(0x258);	
	}else if((s <= 0x1) && (s <= 0x64)){
		vel = 0x38D * s + 0xF1B8B;
 850:	78 02 00 00 	mvhi r2,0x0
 854:	b4 24 08 00 	add r1,r1,r4
 858:	38 42 09 98 	ori r2,r2,0x998
 85c:	58 41 00 00 	sw (r2+0),r1
}
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
}
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
 860:	58 61 00 0c 	sw (r3+12),r1
 864:	c3 a0 00 00 	ret
	if(s == 0){
		set_motor3(0x258);	
	}else if((s <= 0x1) && (s <= 0x64)){
		vel = 0x38D * s + 0xF1B8B;
		set_motor3(vel);
	}else if(s > 0x64){
 868:	34 02 00 64 	mvi r2,100
 86c:	4c 41 00 08 	bge r2,r1,88c <speedM3+0x64>
}
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
}
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
 870:	78 01 00 00 	mvhi r1,0x0
 874:	78 03 00 00 	mvhi r3,0x0
 878:	38 21 09 8c 	ori r1,r1,0x98c
 87c:	38 63 09 3c 	ori r3,r3,0x93c
 880:	28 21 00 00 	lw r1,(r1+0)
 884:	28 62 00 00 	lw r2,(r3+0)
 888:	58 22 00 0c 	sw (r1+12),r2
 88c:	c3 a0 00 00 	ret
 890:	78 01 00 00 	mvhi r1,0x0
 894:	38 21 09 8c 	ori r1,r1,0x98c
 898:	28 21 00 00 	lw r1,(r1+0)
 89c:	34 02 02 58 	mvi r2,600
 8a0:	58 22 00 0c 	sw (r1+12),r2
 8a4:	c3 a0 00 00 	ret

000008a8 <speedM4>:
		set_motor3(0x2E630);
	}
}

void speedM4(int s){
	if(s == 0){
 8a8:	44 20 00 1a 	be r1,r0,910 <speedM4+0x68>
		set_motor4(0x258);	
	}else if((s <= 0x1) && (s <= 0x64)){
 8ac:	34 02 00 01 	mvi r2,1
 8b0:	48 22 00 0e 	bg r1,r2,8e8 <speedM4+0x40>
		vel = 0x434 * s + 0x1CA60;
 8b4:	78 05 00 00 	mvhi r5,0x0
}
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
}
void set_motor4(int wk){
	pwm0-> duty_m4=wk;
 8b8:	78 02 00 00 	mvhi r2,0x0

void speedM4(int s){
	if(s == 0){
		set_motor4(0x258);	
	}else if((s <= 0x1) && (s <= 0x64)){
		vel = 0x434 * s + 0x1CA60;
 8bc:	38 a5 09 30 	ori r5,r5,0x930
}
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
}
void set_motor4(int wk){
	pwm0-> duty_m4=wk;
 8c0:	38 42 09 8c 	ori r2,r2,0x98c

void speedM4(int s){
	if(s == 0){
		set_motor4(0x258);	
	}else if((s <= 0x1) && (s <= 0x64)){
		vel = 0x434 * s + 0x1CA60;
 8c4:	08 21 04 34 	muli r1,r1,1076
 8c8:	28 a4 00 00 	lw r4,(r5+0)
}
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
}
void set_motor4(int wk){
	pwm0-> duty_m4=wk;
 8cc:	28 43 00 00 	lw r3,(r2+0)

void speedM4(int s){
	if(s == 0){
		set_motor4(0x258);	
	}else if((s <= 0x1) && (s <= 0x64)){
		vel = 0x434 * s + 0x1CA60;
 8d0:	78 02 00 00 	mvhi r2,0x0
 8d4:	b4 24 08 00 	add r1,r1,r4
 8d8:	38 42 09 98 	ori r2,r2,0x998
 8dc:	58 41 00 00 	sw (r2+0),r1
}
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
}
void set_motor4(int wk){
	pwm0-> duty_m4=wk;
 8e0:	58 61 00 10 	sw (r3+16),r1
 8e4:	c3 a0 00 00 	ret
	if(s == 0){
		set_motor4(0x258);	
	}else if((s <= 0x1) && (s <= 0x64)){
		vel = 0x434 * s + 0x1CA60;
		set_motor4(vel);
	}else if(s > 0x64){
 8e8:	34 02 00 64 	mvi r2,100
 8ec:	4c 41 00 08 	bge r2,r1,90c <speedM4+0x64>
}
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
}
void set_motor4(int wk){
	pwm0-> duty_m4=wk;
 8f0:	78 01 00 00 	mvhi r1,0x0
 8f4:	78 03 00 00 	mvhi r3,0x0
 8f8:	38 21 09 8c 	ori r1,r1,0x98c
 8fc:	38 63 09 34 	ori r3,r3,0x934
 900:	28 21 00 00 	lw r1,(r1+0)
 904:	28 62 00 00 	lw r2,(r3+0)
 908:	58 22 00 10 	sw (r1+16),r2
 90c:	c3 a0 00 00 	ret
 910:	78 01 00 00 	mvhi r1,0x0
 914:	38 21 09 8c 	ori r1,r1,0x98c
 918:	28 21 00 00 	lw r1,(r1+0)
 91c:	34 02 02 58 	mvi r2,600
 920:	58 22 00 10 	sw (r1+16),r2
 924:	c3 a0 00 00 	ret
