
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         000027c8  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       000004b4  000027c8  000027c8  0000281c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000028  00002c7c  00002c7c  00002cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000090  00002ca4  00002ca4  00002cf8  2**2
                  ALLOC
  4 .debug_abbrev 000007a2  00000000  00000000  00002cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003922  00000000  00000000  0000349a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00002cf7  00000000  00000000  00006dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000004d0  00000000  00000000  00009ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003643  00000000  00000000  00009f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000526  00000000  00000000  0000d5c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000109  00000000  00000000  0000daed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000060  00000000  00000000  0000dbf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000009ab  00000000  00000000  0000dc56  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  0000e601  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 000009c0  00000000  00000000  0000e612  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
       0:	98 00 00 00 	xor r0,r0,r0
       4:	d0 00 00 00 	wcsr IE,r0
       8:	78 01 00 00 	mvhi r1,0x0
       c:	38 21 00 00 	ori r1,r1,0x0
      10:	d0 e1 00 00 	wcsr EBA,r1
      14:	f8 00 00 3b 	calli 100 <_crt0>
      18:	34 00 00 00 	nop
      1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
      20:	34 00 00 00 	nop
      24:	34 00 00 00 	nop
      28:	34 00 00 00 	nop
      2c:	34 00 00 00 	nop
      30:	34 00 00 00 	nop
      34:	34 00 00 00 	nop
      38:	34 00 00 00 	nop
      3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
      40:	34 00 00 00 	nop
      44:	34 00 00 00 	nop
      48:	34 00 00 00 	nop
      4c:	34 00 00 00 	nop
      50:	34 00 00 00 	nop
      54:	34 00 00 00 	nop
      58:	34 00 00 00 	nop
      5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
      60:	34 00 00 00 	nop
      64:	34 00 00 00 	nop
      68:	34 00 00 00 	nop
      6c:	34 00 00 00 	nop
      70:	34 00 00 00 	nop
      74:	34 00 00 00 	nop
      78:	34 00 00 00 	nop
      7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
      80:	34 00 00 00 	nop
      84:	34 00 00 00 	nop
      88:	34 00 00 00 	nop
      8c:	34 00 00 00 	nop
      90:	34 00 00 00 	nop
      94:	34 00 00 00 	nop
      98:	34 00 00 00 	nop
      9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
      a0:	34 00 00 00 	nop
      a4:	34 00 00 00 	nop
      a8:	34 00 00 00 	nop
      ac:	34 00 00 00 	nop
      b0:	34 00 00 00 	nop
      b4:	34 00 00 00 	nop
      b8:	34 00 00 00 	nop
      bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
      c0:	5b 9d 00 00 	sw (sp+0),ra
      c4:	f8 00 00 2b 	calli 170 <_save_all>
      c8:	90 40 08 00 	rcsr r1,IP
      cc:	f8 00 00 c5 	calli 3e0 <irq_handler>
      d0:	78 01 ff ff 	mvhi r1,0xffff
      d4:	38 21 ff ff 	ori r1,r1,0xffff
      d8:	d0 41 00 00 	wcsr IP,r1
      dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
      e0:	34 00 00 00 	nop
      e4:	34 00 00 00 	nop
      e8:	34 00 00 00 	nop
      ec:	34 00 00 00 	nop
      f0:	34 00 00 00 	nop
      f4:	34 00 00 00 	nop
      f8:	34 00 00 00 	nop
      fc:	34 00 00 00 	nop

00000100 <_crt0>:
     100:	78 1c 00 00 	mvhi sp,0x0
     104:	3b 9c 2f fc 	ori sp,sp,0x2ffc
     108:	78 1a 00 00 	mvhi gp,0x0
     10c:	3b 5a 2c b0 	ori gp,gp,0x2cb0
     110:	78 01 00 00 	mvhi r1,0x0
     114:	38 21 2c a4 	ori r1,r1,0x2ca4
     118:	78 03 00 00 	mvhi r3,0x0
     11c:	38 63 2d 34 	ori r3,r3,0x2d34

00000120 <.clearBSS>:
     120:	44 23 00 04 	be r1,r3,130 <.callMain>
     124:	58 20 00 00 	sw (r1+0),r0
     128:	34 21 00 04 	addi r1,r1,4
     12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
     130:	34 01 00 00 	mvi r1,0
     134:	34 02 00 00 	mvi r2,0
     138:	34 03 00 00 	mvi r3,0
     13c:	f8 00 00 5f 	calli 2b8 <main>

00000140 <irq_enable>:
     140:	34 01 00 01 	mvi r1,1
     144:	d0 01 00 00 	wcsr IE,r1
     148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
     14c:	34 01 00 00 	mvi r1,0
     150:	d0 01 00 00 	wcsr IE,r1
     154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
     158:	d0 21 00 00 	wcsr IM,r1
     15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
     160:	90 20 08 00 	rcsr r1,IM
     164:	c3 a0 00 00 	ret

00000168 <jump>:
     168:	c0 20 00 00 	b r1

0000016c <halt>:
     16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
     170:	37 9c ff 80 	addi sp,sp,-128
     174:	5b 81 00 04 	sw (sp+4),r1
     178:	5b 82 00 08 	sw (sp+8),r2
     17c:	5b 83 00 0c 	sw (sp+12),r3
     180:	5b 84 00 10 	sw (sp+16),r4
     184:	5b 85 00 14 	sw (sp+20),r5
     188:	5b 86 00 18 	sw (sp+24),r6
     18c:	5b 87 00 1c 	sw (sp+28),r7
     190:	5b 88 00 20 	sw (sp+32),r8
     194:	5b 89 00 24 	sw (sp+36),r9
     198:	5b 8a 00 28 	sw (sp+40),r10
     19c:	5b 9e 00 78 	sw (sp+120),ea
     1a0:	5b 9f 00 7c 	sw (sp+124),ba
     1a4:	2b 81 00 80 	lw r1,(sp+128)
     1a8:	5b 81 00 74 	sw (sp+116),r1
     1ac:	bb 80 08 00 	mv r1,sp
     1b0:	34 21 00 80 	addi r1,r1,128
     1b4:	5b 81 00 70 	sw (sp+112),r1
     1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
     1bc:	2b 81 00 04 	lw r1,(sp+4)
     1c0:	2b 82 00 08 	lw r2,(sp+8)
     1c4:	2b 83 00 0c 	lw r3,(sp+12)
     1c8:	2b 84 00 10 	lw r4,(sp+16)
     1cc:	2b 85 00 14 	lw r5,(sp+20)
     1d0:	2b 86 00 18 	lw r6,(sp+24)
     1d4:	2b 87 00 1c 	lw r7,(sp+28)
     1d8:	2b 88 00 20 	lw r8,(sp+32)
     1dc:	2b 89 00 24 	lw r9,(sp+36)
     1e0:	2b 8a 00 28 	lw r10,(sp+40)
     1e4:	2b 9d 00 74 	lw ra,(sp+116)
     1e8:	2b 9e 00 78 	lw ea,(sp+120)
     1ec:	2b 9f 00 7c 	lw ba,(sp+124)
     1f0:	2b 9c 00 70 	lw sp,(sp+112)
     1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
     1f8:	bb 80 08 00 	mv r1,sp
     1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
     200:	bb 40 08 00 	mv r1,gp
     204:	c3 a0 00 00 	ret

00000208 <printdec2hex>:
#define A_R 0x46800000		//Ratio to Accelerometer, 16384 float32
#define G_R 0x43030000		//Ratio to Gyroscope, 131 float32
#define NEG 0xBF800000		//-1 float32
#define RtoD 0x42652ECC		//Rad_to_Deg float32

void printdec2hex(char l){
     208:	37 9c ff f8 	addi sp,sp,-8
     20c:	5b 8b 00 08 	sw (sp+8),r11
     210:	5b 9d 00 04 	sw (sp+4),ra
     214:	20 2b 00 ff 	andi r11,r1,0xff

        char t = ((l & 0xf0 )>>4)+0x30;
     218:	01 61 00 04 	srui r1,r11,4
	if (t > 0x39)
     21c:	34 02 00 39 	mvi r2,57
#define NEG 0xBF800000		//-1 float32
#define RtoD 0x42652ECC		//Rad_to_Deg float32

void printdec2hex(char l){

        char t = ((l & 0xf0 )>>4)+0x30;
     220:	34 21 00 30 	addi r1,r1,48
	if (t > 0x39)
     224:	50 41 00 02 	bgeu r2,r1,22c <printdec2hex+0x24>
		t+=0x07;
     228:	34 21 00 07 	addi r1,r1,7
	uart_putchar1(t);
     22c:	f8 00 01 59 	calli 790 <uart_putchar1>
	t = (l & 0x0f)+0x30;
     230:	21 61 00 0f 	andi r1,r11,0xf
     234:	34 21 00 30 	addi r1,r1,48
	if (t > 0x39)
     238:	34 02 00 39 	mvi r2,57
     23c:	50 41 00 02 	bgeu r2,r1,244 <printdec2hex+0x3c>
		t+=0x07;
     240:	34 21 00 07 	addi r1,r1,7
	uart_putchar1(t);
     244:	f8 00 01 53 	calli 790 <uart_putchar1>

}
     248:	2b 9d 00 04 	lw ra,(sp+4)
     24c:	2b 8b 00 08 	lw r11,(sp+8)
     250:	37 9c 00 08 	addi sp,sp,8
     254:	c3 a0 00 00 	ret

00000258 <printxyz>:
void printxyz(int8_t AcH, char AcL){
     258:	37 9c ff f4 	addi sp,sp,-12
     25c:	5b 8b 00 0c 	sw (sp+12),r11
     260:	5b 8c 00 08 	sw (sp+8),r12
     264:	5b 9d 00 04 	sw (sp+4),ra
     268:	b0 20 58 00 	sextb r11,r1
     26c:	20 4c 00 ff 	andi r12,r2,0xff
		if(AcH<0){
     270:	4d 60 00 06 	bge r11,r0,288 <printxyz+0x30>
			uart_putchar1('-');
     274:	34 01 00 2d 	mvi r1,45
     278:	f8 00 01 46 	calli 790 <uart_putchar1>
			printdec2hex(AcH & 0X7F);
     27c:	21 61 00 7f 	andi r1,r11,0x7f
     280:	fb ff ff e2 	calli 208 <printdec2hex>
     284:	e0 00 00 03 	bi 290 <printxyz+0x38>
		}
		else		
			printdec2hex(AcH);
     288:	21 61 00 ff 	andi r1,r11,0xff
     28c:	fb ff ff df 	calli 208 <printdec2hex>
		
		printdec2hex(AcL);
     290:	b9 80 08 00 	mv r1,r12
     294:	fb ff ff dd 	calli 208 <printdec2hex>
		uart_putstr1(" ");
     298:	78 01 00 00 	mvhi r1,0x0
     29c:	38 21 27 c8 	ori r1,r1,0x27c8
     2a0:	f8 00 01 45 	calli 7b4 <uart_putstr1>
}
     2a4:	2b 9d 00 04 	lw ra,(sp+4)
     2a8:	2b 8b 00 0c 	lw r11,(sp+12)
     2ac:	2b 8c 00 08 	lw r12,(sp+8)
     2b0:	37 9c 00 0c 	addi sp,sp,12
     2b4:	c3 a0 00 00 	ret

000002b8 <main>:

int main(){
     2b8:	37 9c ff ec 	addi sp,sp,-20
     2bc:	5b 8b 00 14 	sw (sp+20),r11
     2c0:	5b 8c 00 10 	sw (sp+16),r12
     2c4:	5b 8d 00 0c 	sw (sp+12),r13
     2c8:	5b 8e 00 08 	sw (sp+8),r14
     2cc:	5b 9d 00 04 	sw (sp+4),ra
	
	int8_t AcXh;
	int8_t AcYh;	
	int8_t AcZh;
	int i=0;
	setMotors();
     2d0:	f8 00 01 71 	calli 894 <setMotors>
	msleep(50);	
     2d4:	34 01 00 32 	mvi r1,50
     2d8:	f8 00 00 72 	calli 4a0 <msleep>
	initImu();
     2dc:	f8 00 01 ef 	calli a98 <initImu>
	msleep(50);
     2e0:	34 01 00 32 	mvi r1,50
     2e4:	f8 00 00 6f 	calli 4a0 <msleep>
	//init_wifi()
	//msleep(50);
	testMotos();
     2e8:	f8 00 01 80 	calli 8e8 <testMotos>
	uart_putchar(0);
     2ec:	34 01 00 00 	mvi r1,0
     2f0:	f8 00 00 d6 	calli 648 <uart_putchar>
	uart_putchar1(0);
     2f4:	34 01 00 00 	mvi r1,0
     2f8:	f8 00 01 26 	calli 790 <uart_putchar1>
	
	int32_t z=0x01;
	float32 a = int32_to_float32(z);	
     2fc:	34 01 00 01 	mvi r1,1
     300:	f8 00 04 57 	calli 145c <int32_to_float32>
		
		printdec2hex(AcL);
		uart_putstr1(" ");
}

int main(){
     304:	34 0b 00 05 	mvi r11,5
	
	int32_t z=0x01;
	float32 a = int32_to_float32(z);	
	for(;;){
		for(i=0;i<5;i++){
			AcZh = i2c_read (ADDRESS_I2C, ACCEL_ZOUT_H);
     308:	34 02 00 3f 	mvi r2,63
     30c:	34 01 00 68 	mvi r1,104
     310:	f8 00 01 bf 	calli a0c <i2c_read>
     314:	b8 20 60 00 	mv r12,r1
			sleep(1);
     318:	35 6b ff ff 	addi r11,r11,-1
     31c:	34 01 00 01 	mvi r1,1
     320:	f8 00 00 6d 	calli 4d4 <sleep>
	uart_putchar1(0);
	
	int32_t z=0x01;
	float32 a = int32_to_float32(z);	
	for(;;){
		for(i=0;i<5;i++){
     324:	5d 60 ff f9 	bne r11,r0,308 <main+0x50>
     328:	34 0b 00 05 	mvi r11,5
			AcZh = i2c_read (ADDRESS_I2C, ACCEL_ZOUT_H);
			sleep(1);
		}
		
		for(i=0;i<5;i++){			
			AcYh = i2c_read (ADDRESS_I2C, ACCEL_YOUT_H);
     32c:	34 02 00 3d 	mvi r2,61
     330:	34 01 00 68 	mvi r1,104
     334:	f8 00 01 b6 	calli a0c <i2c_read>
     338:	b8 20 68 00 	mv r13,r1
			sleep(1);
     33c:	35 6b ff ff 	addi r11,r11,-1
     340:	34 01 00 01 	mvi r1,1
     344:	f8 00 00 64 	calli 4d4 <sleep>
		for(i=0;i<5;i++){
			AcZh = i2c_read (ADDRESS_I2C, ACCEL_ZOUT_H);
			sleep(1);
		}
		
		for(i=0;i<5;i++){			
     348:	5d 60 ff f9 	bne r11,r0,32c <main+0x74>
     34c:	34 0b 00 05 	mvi r11,5
			AcYh = i2c_read (ADDRESS_I2C, ACCEL_YOUT_H);
			sleep(1);
		}
		
		for(i=0;i<5;i++){				
			AcXh = i2c_read (ADDRESS_I2C, ACCEL_XOUT_H);
     350:	34 02 00 3b 	mvi r2,59
     354:	34 01 00 68 	mvi r1,104
     358:	f8 00 01 ad 	calli a0c <i2c_read>
     35c:	b8 20 70 00 	mv r14,r1
			sleep(1);
     360:	35 6b ff ff 	addi r11,r11,-1
     364:	34 01 00 01 	mvi r1,1
     368:	f8 00 00 5b 	calli 4d4 <sleep>
		for(i=0;i<5;i++){			
			AcYh = i2c_read (ADDRESS_I2C, ACCEL_YOUT_H);
			sleep(1);
		}
		
		for(i=0;i<5;i++){				
     36c:	5d 60 ff f9 	bne r11,r0,350 <main+0x98>
			AcXh = i2c_read (ADDRESS_I2C, ACCEL_XOUT_H);
			sleep(1);
		}	

		printxyz(AcXh, 0x00);
     370:	b9 c0 08 00 	mv r1,r14
     374:	34 02 00 00 	mvi r2,0
     378:	fb ff ff b8 	calli 258 <printxyz>
		printxyz(AcYh, 0x00);
     37c:	b9 a0 08 00 	mv r1,r13
     380:	34 02 00 00 	mvi r2,0
     384:	fb ff ff b5 	calli 258 <printxyz>
		printxyz(AcZh, 0x00);			
     388:	34 02 00 00 	mvi r2,0
     38c:	b9 80 08 00 	mv r1,r12
     390:	fb ff ff b2 	calli 258 <printxyz>
		uart_putchar1(13);
     394:	34 01 00 0d 	mvi r1,13
     398:	f8 00 00 fe 	calli 790 <uart_putchar1>
		uart_putchar1(10);
     39c:	34 01 00 0a 	mvi r1,10
     3a0:	f8 00 00 fc 	calli 790 <uart_putchar1>
		
		sleep(200);
     3a4:	34 01 00 c8 	mvi r1,200
     3a8:	f8 00 00 4b 	calli 4d4 <sleep>
	}
     3ac:	e3 ff ff d6 	bi 304 <main+0x4c>

000003b0 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
     3b0:	c3 a0 00 00 	ret

000003b4 <tic_isr>:
}
uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
     3b4:	78 01 00 00 	mvhi r1,0x0
     3b8:	38 21 2d 30 	ori r1,r1,0x2d30
     3bc:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     3c0:	78 02 00 00 	mvhi r2,0x0
     3c4:	38 42 2c 80 	ori r2,r2,0x2c80
     3c8:	28 42 00 00 	lw r2,(r2+0)
}
uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
     3cc:	34 63 00 01 	addi r3,r3,1
     3d0:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     3d4:	34 01 00 0e 	mvi r1,14
     3d8:	58 41 00 00 	sw (r2+0),r1
}
     3dc:	c3 a0 00 00 	ret

000003e0 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
     3e0:	37 9c ff f0 	addi sp,sp,-16
     3e4:	5b 8b 00 10 	sw (sp+16),r11
     3e8:	5b 8c 00 0c 	sw (sp+12),r12
     3ec:	5b 8d 00 08 	sw (sp+8),r13
     3f0:	5b 9d 00 04 	sw (sp+4),ra
     3f4:	78 0b 00 00 	mvhi r11,0x0
     3f8:	39 6b 2c b0 	ori r11,r11,0x2cb0
     3fc:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
     400:	35 6d 00 80 	addi r13,r11,128
     404:	e0 00 00 04 	bi 414 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
     408:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
     40c:	45 6d 00 08 	be r11,r13,42c <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
     410:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
     414:	21 81 00 01 	andi r1,r12,0x1
     418:	44 20 ff fc 	be r1,r0,408 <irq_handler+0x28>
     41c:	29 61 00 00 	lw r1,(r11+0)
     420:	35 6b 00 04 	addi r11,r11,4
     424:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
     428:	5d 6d ff fa 	bne r11,r13,410 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
     42c:	2b 9d 00 04 	lw ra,(sp+4)
     430:	2b 8b 00 10 	lw r11,(sp+16)
     434:	2b 8c 00 0c 	lw r12,(sp+12)
     438:	2b 8d 00 08 	lw r13,(sp+8)
     43c:	37 9c 00 10 	addi sp,sp,16
     440:	c3 a0 00 00 	ret

00000444 <isr_init>:

void isr_init()
{
     444:	78 01 00 00 	mvhi r1,0x0
     448:	78 02 00 00 	mvhi r2,0x0
     44c:	38 21 2c b0 	ori r1,r1,0x2cb0
     450:	38 42 03 b0 	ori r2,r2,0x3b0
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
     454:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
     458:	58 22 00 00 	sw (r1+0),r2
     45c:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
     460:	5c 23 ff fe 	bne r1,r3,458 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
     464:	c3 a0 00 00 	ret

00000468 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
     468:	78 03 00 00 	mvhi r3,0x0
     46c:	3c 21 00 02 	sli r1,r1,2
     470:	38 63 2c b0 	ori r3,r3,0x2cb0
     474:	b4 61 18 00 	add r3,r3,r1
     478:	58 62 00 00 	sw (r3+0),r2
}
     47c:	c3 a0 00 00 	ret

00000480 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
     480:	78 03 00 00 	mvhi r3,0x0
     484:	3c 21 00 02 	sli r1,r1,2
     488:	38 63 2c b0 	ori r3,r3,0x2cb0
     48c:	78 02 00 00 	mvhi r2,0x0
     490:	b4 61 18 00 	add r3,r3,r1
     494:	38 42 03 b0 	ori r2,r2,0x3b0
     498:	58 62 00 00 	sw (r3+0),r2
}
     49c:	c3 a0 00 00 	ret

000004a0 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
     4a0:	78 02 00 00 	mvhi r2,0x0
     4a4:	38 42 2c 80 	ori r2,r2,0x2c80
     4a8:	38 03 c3 50 	mvu r3,0xc350
     4ac:	28 42 00 00 	lw r2,(r2+0)
     4b0:	88 23 08 00 	mul r1,r1,r3
     4b4:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
     4b8:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
     4bc:	34 01 00 08 	mvi r1,8
     4c0:	58 41 00 0c 	sw (r2+12),r1
	// | TIMER_IRQEN;
	do {
		//halt();
		tcr = timer0->tcr1;
     4c4:	28 41 00 0c 	lw r1,(r2+12)
	} while ( ! (tcr & TIMER_TRIG) );
     4c8:	20 21 00 01 	andi r1,r1,0x1
     4cc:	44 20 ff fe 	be r1,r0,4c4 <msleep+0x24>
}
     4d0:	c3 a0 00 00 	ret

000004d4 <sleep>:
void sleep(int msec){

	uint32_t tcr;

	// Use timer0.1      
	timer0->compare1 = (100000*msec);
     4d4:	78 04 00 00 	mvhi r4,0x0
     4d8:	38 84 27 cc 	ori r4,r4,0x27cc
     4dc:	28 83 00 00 	lw r3,(r4+0)
     4e0:	78 02 00 00 	mvhi r2,0x0
     4e4:	38 42 2c 80 	ori r2,r2,0x2c80
     4e8:	28 42 00 00 	lw r2,(r2+0)
     4ec:	88 23 08 00 	mul r1,r1,r3
     4f0:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
     4f4:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN | TIMER_IRQEN;
     4f8:	34 01 00 0a 	mvi r1,10
     4fc:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
		tcr = timer0->tcr1;
     500:	28 41 00 0c 	lw r1,(r2+12)
	} while ( ! (tcr & TIMER_TRIG) );
     504:	20 21 00 01 	andi r1,r1,0x1
     508:	44 20 ff fe 	be r1,r0,500 <sleep+0x2c>
}
     50c:	c3 a0 00 00 	ret

00000510 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000000)*nsec;
     510:	78 01 00 00 	mvhi r1,0x0
     514:	38 21 2c 80 	ori r1,r1,0x2c80
     518:	28 21 00 00 	lw r1,(r1+0)
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN| TIMER_IRQEN;
     51c:	34 02 00 0a 	mvi r2,10
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000000)*nsec;
     520:	58 20 00 10 	sw (r1+16),r0
	timer0->counter1 = 0;
     524:	58 20 00 14 	sw (r1+20),r0
	timer0->tcr1 = TIMER_EN| TIMER_IRQEN;
     528:	58 22 00 0c 	sw (r1+12),r2

	do {
		//halt();
		tcr = timer0->tcr1;
     52c:	28 22 00 0c 	lw r2,(r1+12)
	} while ( ! (tcr & TIMER_TRIG) );
     530:	20 42 00 01 	andi r2,r2,0x1
     534:	44 40 ff fe 	be r2,r0,52c <nsleep+0x1c>
}
     538:	c3 a0 00 00 	ret

0000053c <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
     53c:	78 01 00 00 	mvhi r1,0x0
     540:	38 21 2c 80 	ori r1,r1,0x2c80
     544:	28 23 00 00 	lw r3,(r1+0)
     548:	34 02 13 88 	mvi r2,5000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
     54c:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
     550:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
     554:	38 21 2d 30 	ori r1,r1,0x2d30

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
     558:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
     55c:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
     560:	78 02 00 00 	mvhi r2,0x0
     564:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     568:	34 04 00 0e 	mvi r4,14
     56c:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
     570:	38 21 2c b0 	ori r1,r1,0x2cb0
     574:	38 42 03 b4 	ori r2,r2,0x3b4
     578:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
     57c:	c3 a0 00 00 	ret

00000580 <wifi_getchar>:
			c = uart_getchar();
			return c;
			break;
		}
	}
	return '\n';
     580:	78 01 00 00 	mvhi r1,0x0
     584:	38 21 2c 7c 	ori r1,r1,0x2c7c
     588:	28 22 00 00 	lw r2,(r1+0)
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
     58c:	34 03 00 00 	mvi r3,0
		c = uart_getchar();
		if (c ==':'){
     590:	34 04 00 3a 	mvi r4,58
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
     594:	34 05 00 14 	mvi r5,20
	//uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
     598:	28 41 00 00 	lw r1,(r2+0)
     59c:	20 21 00 01 	andi r1,r1,0x1
     5a0:	44 20 ff fe 	be r1,r0,598 <wifi_getchar+0x18>
	return uart0->rxtx;
     5a4:	28 41 00 04 	lw r1,(r2+4)
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
     5a8:	34 63 00 01 	addi r3,r3,1
		c = uart_getchar();
		if (c ==':'){
     5ac:	20 21 00 ff 	andi r1,r1,0xff
     5b0:	44 24 00 04 	be r1,r4,5c0 <wifi_getchar+0x40>
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
     5b4:	5c 65 ff f9 	bne r3,r5,598 <wifi_getchar+0x18>
			c = uart_getchar();
			return c;
			break;
		}
	}
	return '\n';
     5b8:	34 01 00 0a 	mvi r1,10

}
     5bc:	c3 a0 00 00 	ret
	//uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
     5c0:	28 41 00 00 	lw r1,(r2+0)
     5c4:	20 21 00 01 	andi r1,r1,0x1
     5c8:	44 20 ff fe 	be r1,r0,5c0 <wifi_getchar+0x40>
	return uart0->rxtx;
     5cc:	28 41 00 04 	lw r1,(r2+4)
     5d0:	20 21 00 ff 	andi r1,r1,0xff
	int i=0;
	for(i=0;i<20;i++){
		c = uart_getchar();
		if (c ==':'){
			c = uart_getchar();
			return c;
     5d4:	c3 a0 00 00 	ret

000005d8 <ok>:
		a=uart_getchar();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
     5d8:	78 01 00 00 	mvhi r1,0x0
     5dc:	38 21 2c 7c 	ori r1,r1,0x2c7c
     5e0:	28 22 00 00 	lw r2,(r1+0)
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
     5e4:	34 03 00 00 	mvi r3,0
		a=uart_getchar();
		if(a=='K'){
     5e8:	34 04 00 4b 	mvi r4,75
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
     5ec:	34 05 00 1e 	mvi r5,30
	//uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
     5f0:	28 41 00 00 	lw r1,(r2+0)
     5f4:	20 21 00 01 	andi r1,r1,0x1
     5f8:	44 20 ff fe 	be r1,r0,5f0 <ok+0x18>
	return uart0->rxtx;
     5fc:	28 41 00 04 	lw r1,(r2+4)
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
     600:	34 63 00 01 	addi r3,r3,1
		a=uart_getchar();
		if(a=='K'){
     604:	20 21 00 ff 	andi r1,r1,0xff
     608:	44 24 00 04 	be r1,r4,618 <ok+0x40>
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
     60c:	5c 65 ff f9 	bne r3,r5,5f0 <ok+0x18>
		a=uart_getchar();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
     610:	34 01 00 00 	mvi r1,0
     614:	c3 a0 00 00 	ret
	int i=0;
	char a;
	for(i=0;i<30;i++){
		a=uart_getchar();
		if(a=='K'){
			return 1;
     618:	34 01 00 01 	mvi r1,1
		}
	}
	return 0;

}
     61c:	c3 a0 00 00 	ret

00000620 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
     620:	c3 a0 00 00 	ret

00000624 <uart_getchar>:

char uart_getchar()
{   
     624:	78 01 00 00 	mvhi r1,0x0
     628:	38 21 2c 7c 	ori r1,r1,0x2c7c
     62c:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
     630:	28 41 00 00 	lw r1,(r2+0)
     634:	20 21 00 01 	andi r1,r1,0x1
     638:	44 20 ff fe 	be r1,r0,630 <uart_getchar+0xc>
	return uart0->rxtx;
     63c:	28 41 00 04 	lw r1,(r2+4)
}
     640:	20 21 00 ff 	andi r1,r1,0xff
     644:	c3 a0 00 00 	ret

00000648 <uart_putchar>:

void uart_putchar(char c)
{
     648:	78 02 00 00 	mvhi r2,0x0
     64c:	38 42 2c 7c 	ori r2,r2,0x2c7c
     650:	28 43 00 00 	lw r3,(r2+0)
     654:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
     658:	28 62 00 00 	lw r2,(r3+0)
     65c:	20 42 00 10 	andi r2,r2,0x10
     660:	5c 40 ff fe 	bne r2,r0,658 <uart_putchar+0x10>
	uart0->rxtx = c;
     664:	58 61 00 04 	sw (r3+4),r1
}
     668:	c3 a0 00 00 	ret

0000066c <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
     66c:	40 24 00 00 	lbu r4,(r1+0)
     670:	44 80 00 0b 	be r4,r0,69c <uart_putstr+0x30>
     674:	78 02 00 00 	mvhi r2,0x0
     678:	38 42 2c 7c 	ori r2,r2,0x2c7c
     67c:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
     680:	28 62 00 00 	lw r2,(r3+0)
     684:	20 42 00 10 	andi r2,r2,0x10
     688:	5c 40 ff fe 	bne r2,r0,680 <uart_putstr+0x14>
	uart0->rxtx = c;
     68c:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
     690:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
     694:	40 24 00 00 	lbu r4,(r1+0)
     698:	5c 82 ff fa 	bne r4,r2,680 <uart_putstr+0x14>
     69c:	c3 a0 00 00 	ret

000006a0 <wifi_putchar>:
		uart_putstr("AT+CIPSERVER=1,80\r\n");
		c = ok();
	}
}

void wifi_putchar(char a){
     6a0:	37 9c ff ec 	addi sp,sp,-20
     6a4:	5b 8b 00 14 	sw (sp+20),r11
     6a8:	5b 8c 00 10 	sw (sp+16),r12
     6ac:	5b 8d 00 0c 	sw (sp+12),r13
     6b0:	5b 8e 00 08 	sw (sp+8),r14
     6b4:	5b 9d 00 04 	sw (sp+4),ra
     6b8:	78 0d 00 00 	mvhi r13,0x0
     6bc:	78 0c 00 00 	mvhi r12,0x0
     6c0:	20 2e 00 ff 	andi r14,r1,0xff
     6c4:	39 ad 27 d8 	ori r13,r13,0x27d8
     6c8:	39 8c 2c 7c 	ori r12,r12,0x2c7c
	int c = 0; 	  
	while(c == 0){
		uart_putstr("AT+CIPSEND=0,1\r\n");
     6cc:	b9 a0 08 00 	mv r1,r13
     6d0:	fb ff ff e7 	calli 66c <uart_putstr>
     6d4:	29 82 00 00 	lw r2,(r12+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
     6d8:	28 4b 00 00 	lw r11,(r2+0)
     6dc:	21 6b 00 10 	andi r11,r11,0x10
     6e0:	5d 60 ff fe 	bne r11,r0,6d8 <wifi_putchar+0x38>
	uart0->rxtx = c;
     6e4:	58 4e 00 04 	sw (r2+4),r14
void wifi_putchar(char a){
	int c = 0; 	  
	while(c == 0){
		uart_putstr("AT+CIPSEND=0,1\r\n");
		uart_putchar(a);
		c = ok();
     6e8:	fb ff ff bc 	calli 5d8 <ok>
	}
}

void wifi_putchar(char a){
	int c = 0; 	  
	while(c == 0){
     6ec:	44 2b ff f8 	be r1,r11,6cc <wifi_putchar+0x2c>
		uart_putstr("AT+CIPSEND=0,1\r\n");
		uart_putchar(a);
		c = ok();
	}
}
     6f0:	2b 9d 00 04 	lw ra,(sp+4)
     6f4:	2b 8b 00 14 	lw r11,(sp+20)
     6f8:	2b 8c 00 10 	lw r12,(sp+16)
     6fc:	2b 8d 00 0c 	lw r13,(sp+12)
     700:	2b 8e 00 08 	lw r14,(sp+8)
     704:	37 9c 00 14 	addi sp,sp,20
     708:	c3 a0 00 00 	ret

0000070c <init_wifi>:
}
/***************************************************************************
 * WIFI ESP8266 Functions
 */

void init_wifi(){ //configurar el modulo como estación con puerto 80
     70c:	37 9c ff f8 	addi sp,sp,-8
     710:	5b 8b 00 08 	sw (sp+8),r11
     714:	5b 9d 00 04 	sw (sp+4),ra
	uart_putstr("AT+RST\r\n");
     718:	78 01 00 00 	mvhi r1,0x0
     71c:	38 21 27 ec 	ori r1,r1,0x27ec
     720:	fb ff ff d3 	calli 66c <uart_putstr>
	msleep(200);
     724:	34 01 00 c8 	mvi r1,200
     728:	78 0b 00 00 	mvhi r11,0x0
     72c:	fb ff ff 5d 	calli 4a0 <msleep>
     730:	39 6b 27 f8 	ori r11,r11,0x27f8
	int c = 0;
	while(c==0){
		uart_putstr("AT+CIPMUX=1\r\n");
     734:	b9 60 08 00 	mv r1,r11
     738:	fb ff ff cd 	calli 66c <uart_putstr>
		c = ok();
     73c:	fb ff ff a7 	calli 5d8 <ok>

void init_wifi(){ //configurar el modulo como estación con puerto 80
	uart_putstr("AT+RST\r\n");
	msleep(200);
	int c = 0;
	while(c==0){
     740:	44 20 ff fd 	be r1,r0,734 <init_wifi+0x28>
     744:	78 0b 00 00 	mvhi r11,0x0
     748:	39 6b 28 08 	ori r11,r11,0x2808
		uart_putstr("AT+CIPMUX=1\r\n");
		c = ok();
	}
	c = 0;
	while (c==0){
		uart_putstr("AT+CIPSERVER=1,80\r\n");
     74c:	b9 60 08 00 	mv r1,r11
     750:	fb ff ff c7 	calli 66c <uart_putstr>
		c = ok();
     754:	fb ff ff a1 	calli 5d8 <ok>
	while(c==0){
		uart_putstr("AT+CIPMUX=1\r\n");
		c = ok();
	}
	c = 0;
	while (c==0){
     758:	44 20 ff fd 	be r1,r0,74c <init_wifi+0x40>
		uart_putstr("AT+CIPSERVER=1,80\r\n");
		c = ok();
	}
}
     75c:	2b 9d 00 04 	lw ra,(sp+4)
     760:	2b 8b 00 08 	lw r11,(sp+8)
     764:	37 9c 00 08 	addi sp,sp,8
     768:	c3 a0 00 00 	ret

0000076c <uart_getchar1>:
	}
}
//uart1

char uart_getchar1()
{   
     76c:	78 01 00 00 	mvhi r1,0x0
     770:	38 21 2c 8c 	ori r1,r1,0x2c8c
     774:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;
     778:	28 41 00 00 	lw r1,(r2+0)
     77c:	20 21 00 01 	andi r1,r1,0x1
     780:	44 20 ff fe 	be r1,r0,778 <uart_getchar1+0xc>
	return uart1->rxtx;
     784:	28 41 00 04 	lw r1,(r2+4)
}
     788:	20 21 00 ff 	andi r1,r1,0xff
     78c:	c3 a0 00 00 	ret

00000790 <uart_putchar1>:

void uart_putchar1(char c)
{
     790:	78 02 00 00 	mvhi r2,0x0
     794:	38 42 2c 8c 	ori r2,r2,0x2c8c
     798:	28 43 00 00 	lw r3,(r2+0)
     79c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
     7a0:	28 62 00 00 	lw r2,(r3+0)
     7a4:	20 42 00 10 	andi r2,r2,0x10
     7a8:	5c 40 ff fe 	bne r2,r0,7a0 <uart_putchar1+0x10>
	uart1->rxtx = c;
     7ac:	58 61 00 04 	sw (r3+4),r1
}
     7b0:	c3 a0 00 00 	ret

000007b4 <uart_putstr1>:

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
     7b4:	40 24 00 00 	lbu r4,(r1+0)
     7b8:	44 80 00 0b 	be r4,r0,7e4 <uart_putstr1+0x30>
     7bc:	78 02 00 00 	mvhi r2,0x0
     7c0:	38 42 2c 8c 	ori r2,r2,0x2c8c
     7c4:	28 43 00 00 	lw r3,(r2+0)
	return uart1->rxtx;
}

void uart_putchar1(char c)
{
	while (uart1->ucr & UART_BUSY) ;
     7c8:	28 62 00 00 	lw r2,(r3+0)
     7cc:	20 42 00 10 	andi r2,r2,0x10
     7d0:	5c 40 ff fe 	bne r2,r0,7c8 <uart_putstr1+0x14>
	uart1->rxtx = c;
     7d4:	58 64 00 04 	sw (r3+4),r4
void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar1(*c);
		c++;
     7d8:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
     7dc:	40 24 00 00 	lbu r4,(r1+0)
     7e0:	5c 82 ff fa 	bne r4,r2,7c8 <uart_putstr1+0x14>
     7e4:	c3 a0 00 00 	ret

000007e8 <write_dir>:
 */


void write_dir(char dir)
{
	gpio0->gpio_dir=dir;
     7e8:	78 02 00 00 	mvhi r2,0x0
     7ec:	38 42 2c 84 	ori r2,r2,0x2c84
     7f0:	28 42 00 00 	lw r2,(r2+0)
 * GPIO Functions
 */


void write_dir(char dir)
{
     7f4:	20 21 00 ff 	andi r1,r1,0xff
	gpio0->gpio_dir=dir;
     7f8:	58 41 00 08 	sw (r2+8),r1

}
     7fc:	c3 a0 00 00 	ret

00000800 <write_data>:


void write_data(char data)
{
	gpio0->gpio_o=data; 
     800:	78 02 00 00 	mvhi r2,0x0
     804:	38 42 2c 84 	ori r2,r2,0x2c84
     808:	28 42 00 00 	lw r2,(r2+0)

}


void write_data(char data)
{
     80c:	20 21 00 ff 	andi r1,r1,0xff
	gpio0->gpio_o=data; 
     810:	58 41 00 04 	sw (r2+4),r1

}
     814:	c3 a0 00 00 	ret

00000818 <read_data>:


char read_data()
{
	return gpio0->gpio_i;
     818:	78 01 00 00 	mvhi r1,0x0
     81c:	38 21 2c 84 	ori r1,r1,0x2c84
     820:	28 21 00 00 	lw r1,(r1+0)
     824:	28 21 00 00 	lw r1,(r1+0)

}
     828:	20 21 00 ff 	andi r1,r1,0xff
     82c:	c3 a0 00 00 	ret

00000830 <set_period>:
/***************************************************************************
 * Functions PWM //FUNCIONES PRIMITIVAS
 */

void set_period(int p){
	pwm0->period=p;
     830:	78 02 00 00 	mvhi r2,0x0
     834:	38 42 2c 90 	ori r2,r2,0x2c90
     838:	28 42 00 00 	lw r2,(r2+0)
     83c:	58 41 00 00 	sw (r2+0),r1
}
     840:	c3 a0 00 00 	ret

00000844 <set_motor1>:
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
     844:	78 02 00 00 	mvhi r2,0x0
     848:	38 42 2c 90 	ori r2,r2,0x2c90
     84c:	28 42 00 00 	lw r2,(r2+0)
     850:	58 41 00 04 	sw (r2+4),r1
}
     854:	c3 a0 00 00 	ret

00000858 <set_motor2>:
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
     858:	78 02 00 00 	mvhi r2,0x0
     85c:	38 42 2c 90 	ori r2,r2,0x2c90
     860:	28 42 00 00 	lw r2,(r2+0)
     864:	58 41 00 08 	sw (r2+8),r1
}
     868:	c3 a0 00 00 	ret

0000086c <set_motor3>:
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
     86c:	78 02 00 00 	mvhi r2,0x0
     870:	38 42 2c 90 	ori r2,r2,0x2c90
     874:	28 42 00 00 	lw r2,(r2+0)
     878:	58 41 00 0c 	sw (r2+12),r1
}
     87c:	c3 a0 00 00 	ret

00000880 <set_motor4>:
void set_motor4(int wk){
	pwm0-> duty_m4=wk;
     880:	78 02 00 00 	mvhi r2,0x0
     884:	38 42 2c 90 	ori r2,r2,0x2c90
     888:	28 42 00 00 	lw r2,(r2+0)
     88c:	58 41 00 10 	sw (r2+16),r1
}
     890:	c3 a0 00 00 	ret

00000894 <setMotors>:
int velM1=0xEA60;
int velM2=0xEA60;
int velM3=0xEA60;
int velM4=0xEA60;

void setMotors(){
     894:	37 9c ff fc 	addi sp,sp,-4
     898:	5b 9d 00 04 	sw (sp+4),ra
/***************************************************************************
 * Functions PWM //FUNCIONES PRIMITIVAS
 */

void set_period(int p){
	pwm0->period=p;
     89c:	78 01 00 00 	mvhi r1,0x0
     8a0:	78 05 00 00 	mvhi r5,0x0
     8a4:	38 a5 27 d0 	ori r5,r5,0x27d0
     8a8:	38 21 2c 90 	ori r1,r1,0x2c90
     8ac:	28 22 00 00 	lw r2,(r1+0)
     8b0:	28 a4 00 00 	lw r4,(r5+0)
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
     8b4:	38 03 ea 60 	mvu r3,0xea60
	set_period(0x1E8480); //F=50Hz
	set_motor1(0xEA60);
	set_motor2(0xEA60);
	set_motor3(0xEA60);
	set_motor4(0xEA60);
	msleep(0x5E8);
     8b8:	34 01 05 e8 	mvi r1,1512
/***************************************************************************
 * Functions PWM //FUNCIONES PRIMITIVAS
 */

void set_period(int p){
	pwm0->period=p;
     8bc:	58 44 00 00 	sw (r2+0),r4
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
     8c0:	58 43 00 04 	sw (r2+4),r3
}
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
     8c4:	58 43 00 08 	sw (r2+8),r3
}
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
     8c8:	58 43 00 0c 	sw (r2+12),r3
}
void set_motor4(int wk){
	pwm0-> duty_m4=wk;
     8cc:	58 43 00 10 	sw (r2+16),r3
	set_period(0x1E8480); //F=50Hz
	set_motor1(0xEA60);
	set_motor2(0xEA60);
	set_motor3(0xEA60);
	set_motor4(0xEA60);
	msleep(0x5E8);
     8d0:	fb ff fe f4 	calli 4a0 <msleep>
}
     8d4:	2b 9d 00 04 	lw ra,(sp+4)
     8d8:	37 9c 00 04 	addi sp,sp,4
     8dc:	c3 a0 00 00 	ret

000008e0 <forward_backward>:

void forward_backward(){}
     8e0:	c3 a0 00 00 	ret

000008e4 <rght_lft>:
void rght_lft(){}
     8e4:	c3 a0 00 00 	ret

000008e8 <testMotos>:
	
void testMotos(){
     8e8:	37 9c ff f8 	addi sp,sp,-8
     8ec:	5b 8b 00 08 	sw (sp+8),r11
     8f0:	5b 9d 00 04 	sw (sp+4),ra

void set_period(int p){
	pwm0->period=p;
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
     8f4:	78 0b 00 00 	mvhi r11,0x0
     8f8:	78 01 00 00 	mvhi r1,0x0
     8fc:	39 6b 2c 90 	ori r11,r11,0x2c90
     900:	38 21 27 d4 	ori r1,r1,0x27d4
     904:	28 22 00 00 	lw r2,(r1+0)
     908:	29 63 00 00 	lw r3,(r11+0)
void testMotos(){
	set_motor1(0X5DC+0xFD20); //0x10FC=0X5DC+0xFD20
	set_motor2(0X5DC+0xFD20);
	set_motor3(0X5DC+0xFD20);
	set_motor4(0X5DC+0xFD20);
	msleep(3000);
     90c:	34 01 0b b8 	mvi r1,3000

void set_period(int p){
	pwm0->period=p;
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
     910:	58 62 00 04 	sw (r3+4),r2
}
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
     914:	58 62 00 08 	sw (r3+8),r2
}
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
     918:	58 62 00 0c 	sw (r3+12),r2
}
void set_motor4(int wk){
	pwm0-> duty_m4=wk;
     91c:	58 62 00 10 	sw (r3+16),r2
void testMotos(){
	set_motor1(0X5DC+0xFD20); //0x10FC=0X5DC+0xFD20
	set_motor2(0X5DC+0xFD20);
	set_motor3(0X5DC+0xFD20);
	set_motor4(0X5DC+0xFD20);
	msleep(3000);
     920:	fb ff fe e0 	calli 4a0 <msleep>

void set_period(int p){
	pwm0->period=p;
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
     924:	29 61 00 00 	lw r1,(r11+0)
     928:	38 02 ea 60 	mvu r2,0xea60
     92c:	58 22 00 04 	sw (r1+4),r2
}
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
     930:	58 22 00 08 	sw (r1+8),r2
}
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
     934:	58 22 00 0c 	sw (r1+12),r2
}
void set_motor4(int wk){
	pwm0-> duty_m4=wk;
     938:	58 22 00 10 	sw (r1+16),r2
	msleep(3000);
	set_motor1(0xEA60); 
	set_motor2(0xEA60);
	set_motor3(0xEA60);
	set_motor4(0xEA60);
}
     93c:	2b 9d 00 04 	lw ra,(sp+4)
     940:	2b 8b 00 08 	lw r11,(sp+8)
     944:	37 9c 00 08 	addi sp,sp,8
     948:	c3 a0 00 00 	ret

0000094c <start_Read>:

/******************************************************************************
 * i2c Functons
 */
void start_Read (int r)
{  i2c0->startRead = r;
     94c:	78 02 00 00 	mvhi r2,0x0
     950:	38 42 2c 88 	ori r2,r2,0x2c88
     954:	28 42 00 00 	lw r2,(r2+0)
     958:	58 41 00 14 	sw (r2+20),r1
}
     95c:	c3 a0 00 00 	ret

00000960 <start_Write>:
void start_Write (int w)
{  i2c0->startWrite = w;
     960:	78 02 00 00 	mvhi r2,0x0
     964:	38 42 2c 88 	ori r2,r2,0x2c88
     968:	28 42 00 00 	lw r2,(r2+0)
     96c:	58 41 00 18 	sw (r2+24),r1
}
     970:	c3 a0 00 00 	ret

00000974 <rw>:
void rw(int data_rw){
	i2c0->rw = data_rw;
     974:	78 02 00 00 	mvhi r2,0x0
     978:	38 42 2c 88 	ori r2,r2,0x2c88
     97c:	28 42 00 00 	lw r2,(r2+0)
     980:	58 41 00 0c 	sw (r2+12),r1
}
     984:	c3 a0 00 00 	ret

00000988 <i2c_write>:

void i2c_write (int dirI2C, int dirIntern, int data)
{		
     988:	37 9c ff ec 	addi sp,sp,-20
     98c:	5b 8b 00 14 	sw (sp+20),r11
     990:	5b 8c 00 10 	sw (sp+16),r12
     994:	5b 8d 00 0c 	sw (sp+12),r13
     998:	5b 8e 00 08 	sw (sp+8),r14
     99c:	5b 9d 00 04 	sw (sp+4),ra
 */
void start_Read (int r)
{  i2c0->startRead = r;
}
void start_Write (int w)
{  i2c0->startWrite = w;
     9a0:	78 0b 00 00 	mvhi r11,0x0
     9a4:	39 6b 2c 88 	ori r11,r11,0x2c88
     9a8:	29 64 00 00 	lw r4,(r11+0)
void rw(int data_rw){
	i2c0->rw = data_rw;
}

void i2c_write (int dirI2C, int dirIntern, int data)
{		
     9ac:	b8 20 68 00 	mv r13,r1
 */
void start_Read (int r)
{  i2c0->startRead = r;
}
void start_Write (int w)
{  i2c0->startWrite = w;
     9b0:	34 01 00 01 	mvi r1,1
     9b4:	58 81 00 18 	sw (r4+24),r1
}

void i2c_write (int dirI2C, int dirIntern, int data)
{		
	start_Write(1);
	msleep(10);
     9b8:	34 01 00 0a 	mvi r1,10
void rw(int data_rw){
	i2c0->rw = data_rw;
}

void i2c_write (int dirI2C, int dirIntern, int data)
{		
     9bc:	b8 40 70 00 	mv r14,r2
     9c0:	b8 60 60 00 	mv r12,r3
	start_Write(1);
	msleep(10);
     9c4:	fb ff fe b7 	calli 4a0 <msleep>
 */
void start_Read (int r)
{  i2c0->startRead = r;
}
void start_Write (int w)
{  i2c0->startWrite = w;
     9c8:	29 64 00 00 	lw r4,(r11+0)
     9cc:	58 80 00 18 	sw (r4+24),r0
}
void rw(int data_rw){
	i2c0->rw = data_rw;
     9d0:	58 80 00 0c 	sw (r4+12),r0
{		
	start_Write(1);
	msleep(10);
	start_Write(0);
	rw(0); 
	while((i2c0->availWrite)==0x00);
     9d4:	28 85 00 04 	lw r5,(r4+4)
     9d8:	44 a0 ff ff 	be r5,r0,9d4 <i2c_write+0x4c>
	i2c0->data = ((dirI2C<<16)|(dirIntern<<8)|data);	
     9dc:	3d c2 00 08 	sli r2,r14,8
     9e0:	3d a5 00 10 	sli r5,r13,16
     9e4:	b8 4c 08 00 	or r1,r2,r12
     9e8:	b8 25 08 00 	or r1,r1,r5
     9ec:	58 81 00 10 	sw (r4+16),r1

}
     9f0:	2b 9d 00 04 	lw ra,(sp+4)
     9f4:	2b 8b 00 14 	lw r11,(sp+20)
     9f8:	2b 8c 00 10 	lw r12,(sp+16)
     9fc:	2b 8d 00 0c 	lw r13,(sp+12)
     a00:	2b 8e 00 08 	lw r14,(sp+8)
     a04:	37 9c 00 14 	addi sp,sp,20
     a08:	c3 a0 00 00 	ret

00000a0c <i2c_read>:

int8_t i2c_read (int dirI2C, int dirIntern){  
     a0c:	37 9c ff ec 	addi sp,sp,-20
     a10:	5b 8b 00 14 	sw (sp+20),r11
     a14:	5b 8c 00 10 	sw (sp+16),r12
     a18:	5b 8d 00 0c 	sw (sp+12),r13
     a1c:	5b 8e 00 08 	sw (sp+8),r14
     a20:	5b 9d 00 04 	sw (sp+4),ra

/******************************************************************************
 * i2c Functons
 */
void start_Read (int r)
{  i2c0->startRead = r;
     a24:	78 0b 00 00 	mvhi r11,0x0
     a28:	39 6b 2c 88 	ori r11,r11,0x2c88
     a2c:	29 63 00 00 	lw r3,(r11+0)
     a30:	34 0d 00 01 	mvi r13,1
	while((i2c0->availWrite)==0x00);
	i2c0->data = ((dirI2C<<16)|(dirIntern<<8)|data);	

}

int8_t i2c_read (int dirI2C, int dirIntern){  
     a34:	b8 20 60 00 	mv r12,r1

/******************************************************************************
 * i2c Functons
 */
void start_Read (int r)
{  i2c0->startRead = r;
     a38:	58 6d 00 14 	sw (r3+20),r13

}

int8_t i2c_read (int dirI2C, int dirIntern){  
	start_Read(1);
	msleep(10);
     a3c:	34 01 00 0a 	mvi r1,10
	while((i2c0->availWrite)==0x00);
	i2c0->data = ((dirI2C<<16)|(dirIntern<<8)|data);	

}

int8_t i2c_read (int dirI2C, int dirIntern){  
     a40:	b8 40 70 00 	mv r14,r2
	start_Read(1);
	msleep(10);
     a44:	fb ff fe 97 	calli 4a0 <msleep>

/******************************************************************************
 * i2c Functons
 */
void start_Read (int r)
{  i2c0->startRead = r;
     a48:	29 63 00 00 	lw r3,(r11+0)
int8_t i2c_read (int dirI2C, int dirIntern){  
	start_Read(1);
	msleep(10);
	start_Read(0);
	rw(1);
	while((i2c0->availRead)==0x04);
     a4c:	34 05 00 04 	mvi r5,4

/******************************************************************************
 * i2c Functons
 */
void start_Read (int r)
{  i2c0->startRead = r;
     a50:	58 60 00 14 	sw (r3+20),r0
}
void start_Write (int w)
{  i2c0->startWrite = w;
}
void rw(int data_rw){
	i2c0->rw = data_rw;
     a54:	58 6d 00 0c 	sw (r3+12),r13
int8_t i2c_read (int dirI2C, int dirIntern){  
	start_Read(1);
	msleep(10);
	start_Read(0);
	rw(1);
	while((i2c0->availRead)==0x04);
     a58:	28 64 00 08 	lw r4,(r3+8)
     a5c:	44 85 ff ff 	be r4,r5,a58 <i2c_read+0x4c>
	i2c0->data = ((dirI2C<<15)|(dirIntern<<7)|dirI2C);
     a60:	3d 81 00 0f 	sli r1,r12,15
     a64:	3d c2 00 07 	sli r2,r14,7
     a68:	b8 2c 60 00 	or r12,r1,r12
     a6c:	b9 82 60 00 	or r12,r12,r2
     a70:	58 6c 00 10 	sw (r3+16),r12
	return i2c0->i2c_data_out;
     a74:	28 61 00 00 	lw r1,(r3+0)
}
     a78:	b0 20 08 00 	sextb r1,r1
     a7c:	2b 9d 00 04 	lw ra,(sp+4)
     a80:	2b 8b 00 14 	lw r11,(sp+20)
     a84:	2b 8c 00 10 	lw r12,(sp+16)
     a88:	2b 8d 00 0c 	lw r13,(sp+12)
     a8c:	2b 8e 00 08 	lw r14,(sp+8)
     a90:	37 9c 00 14 	addi sp,sp,20
     a94:	c3 a0 00 00 	ret

00000a98 <initImu>:

/******************************************************************************
 * mpu6050 Functions
 */
void initImu(){
     a98:	37 9c ff fc 	addi sp,sp,-4
     a9c:	5b 9d 00 04 	sw (sp+4),ra
	//Reset device, reset all registers, clear gyro and accelerometer bias registers		
	i2c_write(ADDRESS_I2C,PWR_MGMT_1,0x80);
     aa0:	34 02 00 6b 	mvi r2,107
     aa4:	34 03 00 80 	mvi r3,128
     aa8:	34 01 00 68 	mvi r1,104
     aac:	fb ff ff b7 	calli 988 <i2c_write>
	sleep(100); 
     ab0:	34 01 00 64 	mvi r1,100
     ab4:	fb ff fe 88 	calli 4d4 <sleep>
	//Get stable time source
	i2c_write(ADDRESS_I2C,PWR_MGMT_1,0x01);
     ab8:	34 01 00 68 	mvi r1,104
     abc:	34 02 00 6b 	mvi r2,107
     ac0:	34 03 00 01 	mvi r3,1
     ac4:	fb ff ff b1 	calli 988 <i2c_write>
	i2c_write(ADDRESS_I2C,PWR_MGMT_2,0x00);
     ac8:	34 02 00 6c 	mvi r2,108
     acc:	34 03 00 00 	mvi r3,0
     ad0:	34 01 00 68 	mvi r1,104
     ad4:	fb ff ff ad 	calli 988 <i2c_write>
	sleep(200);
     ad8:	34 01 00 c8 	mvi r1,200
     adc:	fb ff fe 7e 	calli 4d4 <sleep>
	// Configure device for bias calculation
	i2c_write(ADDRESS_I2C,INT_ENABLE,0x00);
     ae0:	34 01 00 68 	mvi r1,104
     ae4:	34 02 00 38 	mvi r2,56
     ae8:	34 03 00 00 	mvi r3,0
     aec:	fb ff ff a7 	calli 988 <i2c_write>
	i2c_write(ADDRESS_I2C,FIFO_EN,0x00);
     af0:	34 01 00 68 	mvi r1,104
     af4:	34 02 00 23 	mvi r2,35
     af8:	34 03 00 00 	mvi r3,0
     afc:	fb ff ff a3 	calli 988 <i2c_write>
	i2c_write(ADDRESS_I2C,PWR_MGMT_1,0x00);
     b00:	34 01 00 68 	mvi r1,104
     b04:	34 02 00 6b 	mvi r2,107
     b08:	34 03 00 00 	mvi r3,0
     b0c:	fb ff ff 9f 	calli 988 <i2c_write>
	i2c_write(ADDRESS_I2C,I2C_MST_CTRL,0x00);
     b10:	34 01 00 68 	mvi r1,104
     b14:	34 02 00 24 	mvi r2,36
     b18:	34 03 00 00 	mvi r3,0
     b1c:	fb ff ff 9b 	calli 988 <i2c_write>
	i2c_write(ADDRESS_I2C,USER_CTRL,0x00);
     b20:	34 01 00 68 	mvi r1,104
     b24:	34 02 00 6a 	mvi r2,106
     b28:	34 03 00 00 	mvi r3,0
     b2c:	fb ff ff 97 	calli 988 <i2c_write>
	i2c_write(ADDRESS_I2C,USER_CTRL,0x0C);
     b30:	34 02 00 6a 	mvi r2,106
     b34:	34 03 00 0c 	mvi r3,12
     b38:	34 01 00 68 	mvi r1,104
     b3c:	fb ff ff 93 	calli 988 <i2c_write>
	sleep(15);
     b40:	34 01 00 0f 	mvi r1,15
     b44:	fb ff fe 64 	calli 4d4 <sleep>
	// Configure MPU6050 gyro and accelerometer for bias calculation
	i2c_write(ADDRESS_I2C,CONFIG,0x01);
     b48:	34 01 00 68 	mvi r1,104
     b4c:	34 02 00 1a 	mvi r2,26
     b50:	34 03 00 01 	mvi r3,1
     b54:	fb ff ff 8d 	calli 988 <i2c_write>
	i2c_write(ADDRESS_I2C,SMPLRT_DIV,0x00);
     b58:	34 01 00 68 	mvi r1,104
     b5c:	34 02 00 19 	mvi r2,25
     b60:	34 03 00 00 	mvi r3,0
     b64:	fb ff ff 89 	calli 988 <i2c_write>
	i2c_write(ADDRESS_I2C,GYRO_CONFIG,0x01);
     b68:	34 01 00 68 	mvi r1,104
     b6c:	34 02 00 1b 	mvi r2,27
     b70:	34 03 00 01 	mvi r3,1
     b74:	fb ff ff 85 	calli 988 <i2c_write>
	i2c_write(ADDRESS_I2C,ACCEL_CONFIG,0x00);
     b78:	34 01 00 68 	mvi r1,104
     b7c:	34 02 00 1c 	mvi r2,28
     b80:	34 03 00 00 	mvi r3,0
     b84:	fb ff ff 81 	calli 988 <i2c_write>
	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	i2c_write(ADDRESS_I2C,USER_CTRL,0x40);
     b88:	34 01 00 68 	mvi r1,104
     b8c:	34 02 00 6a 	mvi r2,106
     b90:	34 03 00 40 	mvi r3,64
     b94:	fb ff ff 7d 	calli 988 <i2c_write>
	i2c_write(ADDRESS_I2C,ACCEL_CONFIG,0x78);
     b98:	34 02 00 1c 	mvi r2,28
     b9c:	34 03 00 78 	mvi r3,120
     ba0:	34 01 00 68 	mvi r1,104
     ba4:	fb ff ff 79 	calli 988 <i2c_write>
	sleep(80);
     ba8:	34 01 00 50 	mvi r1,80
     bac:	fb ff fe 4a 	calli 4d4 <sleep>
}
     bb0:	2b 9d 00 04 	lw ra,(sp+4)
     bb4:	37 9c 00 04 	addi sp,sp,4
     bb8:	c3 a0 00 00 	ret

00000bbc <getAcX>:

int getAcX(){
     bbc:	37 9c ff f4 	addi sp,sp,-12
     bc0:	5b 8b 00 0c 	sw (sp+12),r11
     bc4:	5b 8c 00 08 	sw (sp+8),r12
     bc8:	5b 9d 00 04 	sw (sp+4),ra
	int8_t AcXh = i2c_read (ADDRESS_I2C, ACCEL_XOUT_H);
     bcc:	34 02 00 3b 	mvi r2,59
     bd0:	34 01 00 68 	mvi r1,104
     bd4:	fb ff ff 8e 	calli a0c <i2c_read>
     bd8:	b8 20 60 00 	mv r12,r1
	sleep(1);
     bdc:	34 01 00 01 	mvi r1,1
     be0:	fb ff fe 3d 	calli 4d4 <sleep>
	char AcXl = i2c_read (ADDRESS_I2C, ACCEL_XOUT_L);
     be4:	34 02 00 3c 	mvi r2,60
     be8:	34 01 00 68 	mvi r1,104
     bec:	fb ff ff 88 	calli a0c <i2c_read>
     bf0:	b8 20 58 00 	mv r11,r1
	sleep(1);
     bf4:	34 01 00 01 	mvi r1,1
     bf8:	fb ff fe 37 	calli 4d4 <sleep>
	int acX= (AcXh<<8)+AcXl;
     bfc:	3d 82 00 08 	sli r2,r12,8
     c00:	21 61 00 ff 	andi r1,r11,0xff
	return acX;
}
     c04:	b4 22 08 00 	add r1,r1,r2
     c08:	2b 9d 00 04 	lw ra,(sp+4)
     c0c:	2b 8b 00 0c 	lw r11,(sp+12)
     c10:	2b 8c 00 08 	lw r12,(sp+8)
     c14:	37 9c 00 0c 	addi sp,sp,12
     c18:	c3 a0 00 00 	ret

00000c1c <getAcY>:

int getAcY(){
     c1c:	37 9c ff f4 	addi sp,sp,-12
     c20:	5b 8b 00 0c 	sw (sp+12),r11
     c24:	5b 8c 00 08 	sw (sp+8),r12
     c28:	5b 9d 00 04 	sw (sp+4),ra
	int8_t AcYh = i2c_read (ADDRESS_I2C, ACCEL_YOUT_H);
     c2c:	34 02 00 3d 	mvi r2,61
     c30:	34 01 00 68 	mvi r1,104
     c34:	fb ff ff 76 	calli a0c <i2c_read>
     c38:	b8 20 60 00 	mv r12,r1
	sleep(1);
     c3c:	34 01 00 01 	mvi r1,1
     c40:	fb ff fe 25 	calli 4d4 <sleep>
	char AcYl = i2c_read (ADDRESS_I2C, ACCEL_YOUT_L);
     c44:	34 02 00 3e 	mvi r2,62
     c48:	34 01 00 68 	mvi r1,104
     c4c:	fb ff ff 70 	calli a0c <i2c_read>
     c50:	b8 20 58 00 	mv r11,r1
	sleep(1);
     c54:	34 01 00 01 	mvi r1,1
     c58:	fb ff fe 1f 	calli 4d4 <sleep>
	int acY= (AcYh<<8)+AcYl;
     c5c:	3d 82 00 08 	sli r2,r12,8
     c60:	21 61 00 ff 	andi r1,r11,0xff
	return acY;

}
     c64:	b4 22 08 00 	add r1,r1,r2
     c68:	2b 9d 00 04 	lw ra,(sp+4)
     c6c:	2b 8b 00 0c 	lw r11,(sp+12)
     c70:	2b 8c 00 08 	lw r12,(sp+8)
     c74:	37 9c 00 0c 	addi sp,sp,12
     c78:	c3 a0 00 00 	ret

00000c7c <getAcZ>:
int getAcZ(){
     c7c:	37 9c ff f4 	addi sp,sp,-12
     c80:	5b 8b 00 0c 	sw (sp+12),r11
     c84:	5b 8c 00 08 	sw (sp+8),r12
     c88:	5b 9d 00 04 	sw (sp+4),ra
	int8_t AcZh = i2c_read (ADDRESS_I2C, ACCEL_ZOUT_H);
     c8c:	34 02 00 3f 	mvi r2,63
     c90:	34 01 00 68 	mvi r1,104
     c94:	fb ff ff 5e 	calli a0c <i2c_read>
     c98:	b8 20 60 00 	mv r12,r1
	sleep(1);
     c9c:	34 01 00 01 	mvi r1,1
     ca0:	fb ff fe 0d 	calli 4d4 <sleep>
	char AcZl = i2c_read (ADDRESS_I2C, ACCEL_ZOUT_L);
     ca4:	34 02 00 40 	mvi r2,64
     ca8:	34 01 00 68 	mvi r1,104
     cac:	fb ff ff 58 	calli a0c <i2c_read>
     cb0:	b8 20 58 00 	mv r11,r1
	sleep(1);
     cb4:	34 01 00 01 	mvi r1,1
     cb8:	fb ff fe 07 	calli 4d4 <sleep>
	int acZ= (AcZh<<8)+AcZl;
     cbc:	3d 82 00 08 	sli r2,r12,8
     cc0:	21 61 00 ff 	andi r1,r11,0xff
	return acZ;	
}
     cc4:	b4 22 08 00 	add r1,r1,r2
     cc8:	2b 9d 00 04 	lw ra,(sp+4)
     ccc:	2b 8b 00 0c 	lw r11,(sp+12)
     cd0:	2b 8c 00 08 	lw r12,(sp+8)
     cd4:	37 9c 00 0c 	addi sp,sp,12
     cd8:	c3 a0 00 00 	ret

00000cdc <propagateFloat32NaN>:
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
     cdc:	00 24 00 16 	srui r4,r1,22
is a NaN, and returns the appropriate NaN result.  If either `a' or `b' is a
signaling NaN, the invalid exception is raised.
-------------------------------------------------------------------------------
*/
static float32 propagateFloat32NaN( float32 a, float32 b )
{
     ce0:	b8 20 18 00 	mv r3,r1
-------------------------------------------------------------------------------
*/
flag float32_is_nan( float32 a )
{

    return ( 0xFF000000 < (bits32) ( a<<1 ) );
     ce4:	3c 26 00 01 	sli r6,r1,1
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
     ce8:	20 84 01 ff 	andi r4,r4,0x1ff
     cec:	34 01 01 fe 	mvi r1,510
     cf0:	34 05 00 00 	mvi r5,0
     cf4:	44 81 00 1f 	be r4,r1,d70 <propagateFloat32NaN+0x94>
     cf8:	00 47 00 16 	srui r7,r2,22
     cfc:	34 04 01 fe 	mvi r4,510
     d00:	20 e7 01 ff 	andi r7,r7,0x1ff
     d04:	34 01 00 00 	mvi r1,0
     d08:	44 e4 00 14 	be r7,r4,d58 <propagateFloat32NaN+0x7c>
    aIsSignalingNaN = float32_is_signaling_nan( a );
    bIsNaN = float32_is_nan( b );
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
    b |= 0x00400000;
    if ( aIsSignalingNaN | bIsSignalingNaN ) float_raise( float_flag_invalid );
     d0c:	b8 25 20 00 	or r4,r1,r5
    aIsNaN = float32_is_nan( a );
    aIsSignalingNaN = float32_is_signaling_nan( a );
    bIsNaN = float32_is_nan( b );
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
    b |= 0x00400000;
     d10:	78 01 00 40 	mvhi r1,0x40
     d14:	b8 41 08 00 	or r1,r2,r1
    if ( aIsSignalingNaN | bIsSignalingNaN ) float_raise( float_flag_invalid );
     d18:	44 80 00 06 	be r4,r0,d30 <propagateFloat32NaN+0x54>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
     d1c:	78 04 00 00 	mvhi r4,0x0
     d20:	38 84 2c a8 	ori r4,r4,0x2ca8
     d24:	28 87 00 00 	lw r7,(r4+0)
     d28:	38 e7 00 10 	ori r7,r7,0x10
     d2c:	58 87 00 00 	sw (r4+0),r7
    bIsNaN = float32_is_nan( b );
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
    b |= 0x00400000;
    if ( aIsSignalingNaN | bIsSignalingNaN ) float_raise( float_flag_invalid );
    if ( aIsNaN ) {
     d30:	78 04 ff 00 	mvhi r4,0xff00
     d34:	50 86 00 05 	bgeu r4,r6,d48 <propagateFloat32NaN+0x6c>
-------------------------------------------------------------------------------
*/
flag float32_is_nan( float32 a )
{

    return ( 0xFF000000 < (bits32) ( a<<1 ) );
     d38:	3c 42 00 01 	sli r2,r2,1
     d3c:	f4 44 20 00 	cmpgu r4,r2,r4
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
    b |= 0x00400000;
    if ( aIsSignalingNaN | bIsSignalingNaN ) float_raise( float_flag_invalid );
    if ( aIsNaN ) {
        return ( aIsSignalingNaN & bIsNaN ) ? b : a;
     d40:	a0 a4 28 00 	and r5,r5,r4
     d44:	44 a0 00 02 	be r5,r0,d4c <propagateFloat32NaN+0x70>
    }
    else {
        return b;
    }

}
     d48:	c3 a0 00 00 	ret

    aIsNaN = float32_is_nan( a );
    aIsSignalingNaN = float32_is_signaling_nan( a );
    bIsNaN = float32_is_nan( b );
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
     d4c:	78 01 00 40 	mvhi r1,0x40
     d50:	b8 61 08 00 	or r1,r3,r1
    }
    else {
        return b;
    }

}
     d54:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
     d58:	78 04 00 00 	mvhi r4,0x0
     d5c:	38 84 28 1c 	ori r4,r4,0x281c
     d60:	28 81 00 00 	lw r1,(r4+0)
     d64:	a0 41 08 00 	and r1,r2,r1
     d68:	7c 21 00 00 	cmpnei r1,r1,0
     d6c:	e3 ff ff e8 	bi d0c <propagateFloat32NaN+0x30>
     d70:	78 01 00 00 	mvhi r1,0x0
     d74:	38 21 28 1c 	ori r1,r1,0x281c
     d78:	28 25 00 00 	lw r5,(r1+0)
     d7c:	a0 65 28 00 	and r5,r3,r5
     d80:	7c a5 00 00 	cmpnei r5,r5,0
     d84:	e3 ff ff dd 	bi cf8 <propagateFloat32NaN+0x1c>

00000d88 <normalizeFloat32Subnormal>:
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
     d88:	38 05 ff ff 	mvu r5,0xffff
     d8c:	b8 20 20 00 	mv r4,r1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
     d90:	34 06 00 00 	mvi r6,0
    if ( a < 0x10000 ) {
     d94:	54 25 00 03 	bgu r1,r5,da0 <normalizeFloat32Subnormal+0x18>
        shiftCount += 16;
        a <<= 16;
     d98:	3c 24 00 10 	sli r4,r1,16
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
     d9c:	34 06 00 10 	mvi r6,16
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
     da0:	78 07 00 00 	mvhi r7,0x0
     da4:	38 e7 28 20 	ori r7,r7,0x2820
     da8:	28 e5 00 00 	lw r5,(r7+0)
     dac:	54 85 00 03 	bgu r4,r5,db8 <normalizeFloat32Subnormal+0x30>
        shiftCount += 8;
        a <<= 8;
     db0:	3c 84 00 08 	sli r4,r4,8
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
     db4:	34 c6 00 08 	addi r6,r6,8
        a <<= 8;
    }
    shiftCount += countLeadingZerosHigh[ a>>24 ];
     db8:	00 84 00 18 	srui r4,r4,24
     dbc:	78 05 00 00 	mvhi r5,0x0
     dc0:	3c 84 00 02 	sli r4,r4,2
     dc4:	38 a5 28 3c 	ori r5,r5,0x283c
     dc8:	b4 a4 28 00 	add r5,r5,r4
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
     dcc:	28 a4 00 00 	lw r4,(r5+0)
     dd0:	34 c6 ff f8 	addi r6,r6,-8
     dd4:	b4 c4 30 00 	add r6,r6,r4
    *zSigPtr = aSig<<shiftCount;
     dd8:	bc 26 08 00 	sl r1,r1,r6
    *zExpPtr = 1 - shiftCount;
     ddc:	34 04 00 01 	mvi r4,1
     de0:	c8 86 30 00 	sub r6,r4,r6
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    *zSigPtr = aSig<<shiftCount;
     de4:	58 61 00 00 	sw (r3+0),r1
    *zExpPtr = 1 - shiftCount;
     de8:	58 46 00 00 	sw (r2+0),r6

}
     dec:	c3 a0 00 00 	ret

00000df0 <roundAndPackFloat32>:
    int8 roundingMode;
    flag roundNearestEven;
    int8 roundIncrement, roundBits;
    flag isTiny;

    roundingMode = float_rounding_mode;
     df0:	78 04 00 00 	mvhi r4,0x0
     df4:	38 84 2c a4 	ori r4,r4,0x2ca4
     df8:	28 86 00 00 	lw r6,(r4+0)
    roundNearestEven = roundingMode == float_round_nearest_even;
    roundIncrement = 0x40;
     dfc:	34 04 00 40 	mvi r4,64
    flag roundNearestEven;
    int8 roundIncrement, roundBits;
    flag isTiny;

    roundingMode = float_rounding_mode;
    roundNearestEven = roundingMode == float_round_nearest_even;
     e00:	64 c5 00 00 	cmpei r5,r6,0
    roundIncrement = 0x40;
    if ( ! roundNearestEven ) {
     e04:	5c a0 00 08 	bne r5,r0,e24 <roundAndPackFloat32+0x34>
        if ( roundingMode == float_round_to_zero ) {
     e08:	34 07 00 01 	mvi r7,1
            roundIncrement = 0;
     e0c:	34 04 00 00 	mvi r4,0

    roundingMode = float_rounding_mode;
    roundNearestEven = roundingMode == float_round_nearest_even;
    roundIncrement = 0x40;
    if ( ! roundNearestEven ) {
        if ( roundingMode == float_round_to_zero ) {
     e10:	44 c7 00 05 	be r6,r7,e24 <roundAndPackFloat32+0x34>
            roundIncrement = 0;
        }
        else {
            roundIncrement = 0x7F;
            if ( zSign ) {
     e14:	44 25 00 37 	be r1,r5,ef0 <roundAndPackFloat32+0x100>
    if ( ! roundNearestEven ) {
        if ( roundingMode == float_round_to_zero ) {
            roundIncrement = 0;
        }
        else {
            roundIncrement = 0x7F;
     e18:	7c c4 00 02 	cmpnei r4,r6,2
     e1c:	c8 04 20 00 	sub r4,r0,r4
     e20:	20 84 00 7f 	andi r4,r4,0x7f
                if ( roundingMode == float_round_down ) roundIncrement = 0;
            }
        }
    }
    roundBits = zSig & 0x7F;
    if ( 0xFD <= (bits16) zExp ) {
     e24:	20 47 ff ff 	andi r7,r2,0xffff
     e28:	34 09 00 fc 	mvi r9,252
            else {
                if ( roundingMode == float_round_down ) roundIncrement = 0;
            }
        }
    }
    roundBits = zSig & 0x7F;
     e2c:	20 66 00 7f 	andi r6,r3,0x7f
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
     e30:	b4 83 40 00 	add r8,r4,r3
    if ( 0xFD <= (bits16) zExp ) {
     e34:	51 27 00 05 	bgeu r9,r7,e48 <roundAndPackFloat32+0x58>
        if (    ( 0xFD < zExp )
     e38:	34 07 00 fd 	mvi r7,253
     e3c:	48 47 00 22 	bg r2,r7,ec4 <roundAndPackFloat32+0xd4>
             || (    ( zExp == 0xFD )
     e40:	44 47 00 20 	be r2,r7,ec0 <roundAndPackFloat32+0xd0>
                  && ( (sbits32) ( zSig + roundIncrement ) < 0 ) )
           ) {
            float_raise( float_flag_overflow | float_flag_inexact );
            return packFloat32( zSign, 0xFF, 0 ) - ( roundIncrement == 0 );
        }
        if ( zExp < 0 ) {
     e44:	48 02 00 2f 	bg r0,r2,f00 <roundAndPackFloat32+0x110>
            zExp = 0;
            roundBits = zSig & 0x7F;
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
        }
    }
    if ( roundBits ) float_exception_flags |= float_flag_inexact;
     e48:	5c c0 00 11 	bne r6,r0,e8c <roundAndPackFloat32+0x9c>
    zSig = ( zSig + roundIncrement )>>7;
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
     e4c:	64 c6 00 40 	cmpei r6,r6,64
            roundBits = zSig & 0x7F;
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
        }
    }
    if ( roundBits ) float_exception_flags |= float_flag_inexact;
    zSig = ( zSig + roundIncrement )>>7;
     e50:	01 08 00 07 	srui r8,r8,7
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
     e54:	a0 c5 28 00 	and r5,r6,r5
     e58:	a4 a0 28 00 	not r5,r5
     e5c:	a0 a8 40 00 	and r8,r5,r8
    if ( zSig == 0 ) zExp = 0;
     e60:	34 03 00 00 	mvi r3,0
     e64:	5d 00 00 05 	bne r8,r0,e78 <roundAndPackFloat32+0x88>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
     e68:	3c 21 00 1f 	sli r1,r1,31
     e6c:	b5 01 08 00 	add r1,r8,r1
     e70:	b4 23 08 00 	add r1,r1,r3
    zSig = ( zSig + roundIncrement )>>7;
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
    if ( zSig == 0 ) zExp = 0;
    return packFloat32( zSign, zExp, zSig );

}
     e74:	c3 a0 00 00 	ret
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
     e78:	3c 21 00 1f 	sli r1,r1,31
        }
    }
    if ( roundBits ) float_exception_flags |= float_flag_inexact;
    zSig = ( zSig + roundIncrement )>>7;
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
    if ( zSig == 0 ) zExp = 0;
     e7c:	3c 43 00 17 	sli r3,r2,23
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
     e80:	b5 01 08 00 	add r1,r8,r1
     e84:	b4 23 08 00 	add r1,r1,r3
    zSig = ( zSig + roundIncrement )>>7;
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
    if ( zSig == 0 ) zExp = 0;
    return packFloat32( zSign, zExp, zSig );

}
     e88:	c3 a0 00 00 	ret
            zExp = 0;
            roundBits = zSig & 0x7F;
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
        }
    }
    if ( roundBits ) float_exception_flags |= float_flag_inexact;
     e8c:	78 07 00 00 	mvhi r7,0x0
     e90:	38 e7 2c a8 	ori r7,r7,0x2ca8
     e94:	28 e3 00 00 	lw r3,(r7+0)
    zSig = ( zSig + roundIncrement )>>7;
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
     e98:	64 c6 00 40 	cmpei r6,r6,64
            roundBits = zSig & 0x7F;
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
        }
    }
    if ( roundBits ) float_exception_flags |= float_flag_inexact;
    zSig = ( zSig + roundIncrement )>>7;
     e9c:	01 08 00 07 	srui r8,r8,7
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
     ea0:	a0 c5 28 00 	and r5,r6,r5
            zExp = 0;
            roundBits = zSig & 0x7F;
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
        }
    }
    if ( roundBits ) float_exception_flags |= float_flag_inexact;
     ea4:	38 63 00 01 	ori r3,r3,0x1
    zSig = ( zSig + roundIncrement )>>7;
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
     ea8:	a4 a0 28 00 	not r5,r5
            zExp = 0;
            roundBits = zSig & 0x7F;
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
        }
    }
    if ( roundBits ) float_exception_flags |= float_flag_inexact;
     eac:	58 e3 00 00 	sw (r7+0),r3
    zSig = ( zSig + roundIncrement )>>7;
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
     eb0:	a0 a8 40 00 	and r8,r5,r8
    if ( zSig == 0 ) zExp = 0;
     eb4:	34 03 00 00 	mvi r3,0
     eb8:	45 00 ff ec 	be r8,r0,e68 <roundAndPackFloat32+0x78>
     ebc:	e3 ff ff ef 	bi e78 <roundAndPackFloat32+0x88>
    }
    roundBits = zSig & 0x7F;
    if ( 0xFD <= (bits16) zExp ) {
        if (    ( 0xFD < zExp )
             || (    ( zExp == 0xFD )
                  && ( (sbits32) ( zSig + roundIncrement ) < 0 ) )
     ec0:	4d 00 ff e2 	bge r8,r0,e48 <roundAndPackFloat32+0x58>
     ec4:	78 02 00 00 	mvhi r2,0x0
     ec8:	38 42 2c a8 	ori r2,r2,0x2ca8
     ecc:	28 43 00 00 	lw r3,(r2+0)
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
     ed0:	3c 21 00 1f 	sli r1,r1,31
        if (    ( 0xFD < zExp )
             || (    ( zExp == 0xFD )
                  && ( (sbits32) ( zSig + roundIncrement ) < 0 ) )
           ) {
            float_raise( float_flag_overflow | float_flag_inexact );
            return packFloat32( zSign, 0xFF, 0 ) - ( roundIncrement == 0 );
     ed4:	64 84 00 00 	cmpei r4,r4,0
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
     ed8:	78 05 7f 80 	mvhi r5,0x7f80
     edc:	38 63 00 09 	ori r3,r3,0x9
     ee0:	b4 25 08 00 	add r1,r1,r5
     ee4:	58 43 00 00 	sw (r2+0),r3
        if (    ( 0xFD < zExp )
             || (    ( zExp == 0xFD )
                  && ( (sbits32) ( zSig + roundIncrement ) < 0 ) )
           ) {
            float_raise( float_flag_overflow | float_flag_inexact );
            return packFloat32( zSign, 0xFF, 0 ) - ( roundIncrement == 0 );
     ee8:	c8 24 08 00 	sub r1,r1,r4
     eec:	c3 a0 00 00 	ret
    if ( ! roundNearestEven ) {
        if ( roundingMode == float_round_to_zero ) {
            roundIncrement = 0;
        }
        else {
            roundIncrement = 0x7F;
     ef0:	7c c4 00 03 	cmpnei r4,r6,3
     ef4:	c8 04 20 00 	sub r4,r0,r4
     ef8:	20 84 00 7f 	andi r4,r4,0x7f
     efc:	e3 ff ff ca 	bi e24 <roundAndPackFloat32+0x34>
            float_raise( float_flag_overflow | float_flag_inexact );
            return packFloat32( zSign, 0xFF, 0 ) - ( roundIncrement == 0 );
        }
        if ( zExp < 0 ) {
            isTiny =
                   ( float_detect_tininess == float_tininess_before_rounding )
     f00:	78 06 00 00 	mvhi r6,0x0
     f04:	38 c6 2c ac 	ori r6,r6,0x2cac
     f08:	28 c6 00 00 	lw r6,(r6+0)
                || ( zExp < -1 )
     f0c:	34 09 ff ff 	mvi r9,-1
     f10:	e9 22 48 00 	cmpg r9,r9,r2
            float_raise( float_flag_overflow | float_flag_inexact );
            return packFloat32( zSign, 0xFF, 0 ) - ( roundIncrement == 0 );
        }
        if ( zExp < 0 ) {
            isTiny =
                   ( float_detect_tininess == float_tininess_before_rounding )
     f14:	64 c6 00 01 	cmpei r6,r6,1
           ) {
            float_raise( float_flag_overflow | float_flag_inexact );
            return packFloat32( zSign, 0xFF, 0 ) - ( roundIncrement == 0 );
        }
        if ( zExp < 0 ) {
            isTiny =
     f18:	34 07 00 01 	mvi r7,1
     f1c:	b9 26 30 00 	or r6,r9,r6
     f20:	44 c0 00 09 	be r6,r0,f44 <roundAndPackFloat32+0x154>
                   ( float_detect_tininess == float_tininess_before_rounding )
                || ( zExp < -1 )
                || ( zSig + roundIncrement < 0x80000000 );
            shift32RightJamming( zSig, - zExp, &zSig );
     f24:	c8 02 30 00 	sub r6,r0,r2
    bits32 z;

    if ( count == 0 ) {
        z = a;
    }
    else if ( count < 32 ) {
     f28:	34 08 00 1f 	mvi r8,31
     f2c:	48 c8 00 08 	bg r6,r8,f4c <roundAndPackFloat32+0x15c>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
     f30:	bc 62 10 00 	sl r2,r3,r2
     f34:	80 66 30 00 	sru r6,r3,r6
     f38:	7c 43 00 00 	cmpnei r3,r2,0
     f3c:	b8 66 18 00 	or r3,r3,r6
     f40:	e0 00 00 04 	bi f50 <roundAndPackFloat32+0x160>
           ) {
            float_raise( float_flag_overflow | float_flag_inexact );
            return packFloat32( zSign, 0xFF, 0 ) - ( roundIncrement == 0 );
        }
        if ( zExp < 0 ) {
            isTiny =
     f44:	6d 07 00 00 	cmpgei r7,r8,0
     f48:	e3 ff ff f7 	bi f24 <roundAndPackFloat32+0x134>
    }
    else {
        z = ( a != 0 );
     f4c:	7c 63 00 00 	cmpnei r3,r3,0
                   ( float_detect_tininess == float_tininess_before_rounding )
                || ( zExp < -1 )
                || ( zSig + roundIncrement < 0x80000000 );
            shift32RightJamming( zSig, - zExp, &zSig );
            zExp = 0;
            roundBits = zSig & 0x7F;
     f50:	20 66 00 7f 	andi r6,r3,0x7f
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
     f54:	7c c2 00 00 	cmpnei r2,r6,0
     f58:	b4 64 40 00 	add r8,r3,r4
     f5c:	a0 e2 38 00 	and r7,r7,r2
            isTiny =
                   ( float_detect_tininess == float_tininess_before_rounding )
                || ( zExp < -1 )
                || ( zSig + roundIncrement < 0x80000000 );
            shift32RightJamming( zSig, - zExp, &zSig );
            zExp = 0;
     f60:	34 02 00 00 	mvi r2,0
            roundBits = zSig & 0x7F;
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
     f64:	44 e0 ff b9 	be r7,r0,e48 <roundAndPackFloat32+0x58>
     f68:	78 07 00 00 	mvhi r7,0x0
     f6c:	38 e7 2c a8 	ori r7,r7,0x2ca8
     f70:	28 e9 00 00 	lw r9,(r7+0)
     f74:	b4 83 40 00 	add r8,r4,r3
            isTiny =
                   ( float_detect_tininess == float_tininess_before_rounding )
                || ( zExp < -1 )
                || ( zSig + roundIncrement < 0x80000000 );
            shift32RightJamming( zSig, - zExp, &zSig );
            zExp = 0;
     f78:	34 02 00 00 	mvi r2,0
     f7c:	39 23 00 04 	ori r3,r9,0x4
     f80:	e3 ff ff c6 	bi e98 <roundAndPackFloat32+0xa8>

00000f84 <normalizeRoundAndPackFloat32>:
point exponent.
-------------------------------------------------------------------------------
*/
static float32
 normalizeRoundAndPackFloat32( flag zSign, int16 zExp, bits32 zSig )
{
     f84:	37 9c ff fc 	addi sp,sp,-4
     f88:	5b 9d 00 04 	sw (sp+4),ra
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
     f8c:	38 05 ff ff 	mvu r5,0xffff
     f90:	b8 60 20 00 	mv r4,r3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
     f94:	34 06 00 00 	mvi r6,0
    if ( a < 0x10000 ) {
     f98:	54 65 00 03 	bgu r3,r5,fa4 <normalizeRoundAndPackFloat32+0x20>
        shiftCount += 16;
        a <<= 16;
     f9c:	3c 64 00 10 	sli r4,r3,16
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
     fa0:	34 06 00 10 	mvi r6,16
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
     fa4:	78 07 00 00 	mvhi r7,0x0
     fa8:	38 e7 28 20 	ori r7,r7,0x2820
     fac:	28 e5 00 00 	lw r5,(r7+0)
     fb0:	54 85 00 03 	bgu r4,r5,fbc <normalizeRoundAndPackFloat32+0x38>
        shiftCount += 8;
        a <<= 8;
     fb4:	3c 84 00 08 	sli r4,r4,8
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
     fb8:	34 c6 00 08 	addi r6,r6,8
        a <<= 8;
    }
    shiftCount += countLeadingZerosHigh[ a>>24 ];
     fbc:	00 84 00 18 	srui r4,r4,24
     fc0:	78 05 00 00 	mvhi r5,0x0
     fc4:	3c 84 00 02 	sli r4,r4,2
     fc8:	38 a5 28 3c 	ori r5,r5,0x283c
     fcc:	b4 a4 28 00 	add r5,r5,r4
    int8 shiftCount;
	
    shiftCount = countLeadingZeros32( zSig ) - 1;
     fd0:	28 a4 00 00 	lw r4,(r5+0)
     fd4:	34 c6 ff ff 	addi r6,r6,-1
     fd8:	b4 c4 30 00 	add r6,r6,r4
    return roundAndPackFloat32( zSign, zExp - shiftCount, zSig<<shiftCount );
     fdc:	bc 66 18 00 	sl r3,r3,r6
     fe0:	c8 46 10 00 	sub r2,r2,r6
     fe4:	fb ff ff 83 	calli df0 <roundAndPackFloat32>

}
     fe8:	2b 9d 00 04 	lw ra,(sp+4)
     fec:	37 9c 00 04 	addi sp,sp,4
     ff0:	c3 a0 00 00 	ret

00000ff4 <addFloat32Sigs>:
addition is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 addFloat32Sigs( float32 a, float32 b, flag zSign )
{
     ff4:	37 9c ff fc 	addi sp,sp,-4
     ff8:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
     ffc:	78 05 00 00 	mvhi r5,0x0
    1000:	38 a5 28 24 	ori r5,r5,0x2824
    1004:	28 a7 00 00 	lw r7,(r5+0)
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1008:	00 48 00 17 	srui r8,r2,23
    100c:	00 25 00 17 	srui r5,r1,23
    1010:	21 08 00 ff 	andi r8,r8,0xff
    1014:	20 a5 00 ff 	andi r5,r5,0xff
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1018:	a0 27 48 00 	and r9,r1,r7

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    101c:	c8 a8 30 00 	sub r6,r5,r8
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1020:	a0 47 38 00 	and r7,r2,r7
addition is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 addFloat32Sigs( float32 a, float32 b, flag zSign )
{
    1024:	b8 20 20 00 	mv r4,r1
    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 6;
    1028:	3d 29 00 06 	sli r9,r9,6
    bSig <<= 6;
    102c:	3c e7 00 06 	sli r7,r7,6
    if ( 0 < expDiff ) {
    1030:	4c 06 00 20 	bge r0,r6,10b0 <addFloat32Sigs+0xbc>
        if ( aExp == 0xFF ) {
    1034:	34 0a 00 ff 	mvi r10,255
    1038:	44 aa 00 27 	be r5,r10,10d4 <addFloat32Sigs+0xe0>
            if ( aSig ) return propagateFloat32NaN( a, b );
            return a;
        }
        if ( bExp == 0 ) {
    103c:	5d 00 00 12 	bne r8,r0,1084 <addFloat32Sigs+0x90>
            --expDiff;
    1040:	34 c6 ff ff 	addi r6,r6,-1
*/
INLINE void shift32RightJamming( bits32 a, int16 count, bits32 *zPtr )
{
    bits32 z;

    if ( count == 0 ) {
    1044:	b8 a0 10 00 	mv r2,r5
    1048:	5c c8 00 11 	bne r6,r8,108c <addFloat32Sigs+0x98>
        if ( aExp == 0 ) return packFloat32( zSign, 0, ( aSig + bSig )>>6 );
        zSig = 0x40000000 + aSig + bSig;
        zExp = aExp;
        goto roundAndPack;
    }
    aSig |= 0x20000000;
    104c:	78 01 20 00 	mvhi r1,0x2000
    1050:	b9 21 48 00 	or r9,r9,r1
    zSig = ( aSig + bSig )<<1;
    1054:	b5 27 38 00 	add r7,r9,r7
    1058:	3c e4 00 01 	sli r4,r7,1
    --zExp;
    if ( (sbits32) zSig < 0 ) {
    105c:	48 04 00 34 	bg r0,r4,112c <addFloat32Sigs+0x138>
        zExp = aExp;
        goto roundAndPack;
    }
    aSig |= 0x20000000;
    zSig = ( aSig + bSig )<<1;
    --zExp;
    1060:	34 42 ff ff 	addi r2,r2,-1
    if ( (sbits32) zSig < 0 ) {
        zSig = aSig + bSig;
        ++zExp;
    }
 roundAndPack:
    return roundAndPackFloat32( zSign, zExp, zSig );
    1064:	b8 60 08 00 	mv r1,r3
    1068:	b8 80 18 00 	mv r3,r4
    106c:	fb ff ff 61 	calli df0 <roundAndPackFloat32>
    1070:	b8 20 20 00 	mv r4,r1

}
    1074:	b8 80 08 00 	mv r1,r4
    1078:	2b 9d 00 04 	lw ra,(sp+4)
    107c:	37 9c 00 04 	addi sp,sp,4
    1080:	c3 a0 00 00 	ret
        }
        if ( bExp == 0 ) {
            --expDiff;
        }
        else {
            bSig |= 0x20000000;
    1084:	78 01 20 00 	mvhi r1,0x2000
    1088:	b8 e1 38 00 	or r7,r7,r1
        z = a;
    }
    else if ( count < 32 ) {
    108c:	34 01 00 1f 	mvi r1,31
    1090:	48 c1 00 15 	bg r6,r1,10e4 <addFloat32Sigs+0xf0>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    1094:	c8 06 08 00 	sub r1,r0,r6
    1098:	bc e1 08 00 	sl r1,r7,r1
    109c:	80 e6 30 00 	sru r6,r7,r6
    10a0:	7c 27 00 00 	cmpnei r7,r1,0
    10a4:	b8 a0 10 00 	mv r2,r5
    10a8:	b8 e6 38 00 	or r7,r7,r6
    10ac:	e3 ff ff e8 	bi 104c <addFloat32Sigs+0x58>
        }
        shift32RightJamming( bSig, expDiff, &bSig );
        zExp = aExp;
    }
    else if ( expDiff < 0 ) {
    10b0:	5c c0 00 10 	bne r6,r0,10f0 <addFloat32Sigs+0xfc>
        }
        shift32RightJamming( aSig, - expDiff, &aSig );
        zExp = bExp;
    }
    else {
        if ( aExp == 0xFF ) {
    10b4:	34 06 00 ff 	mvi r6,255
    10b8:	44 a6 00 24 	be r5,r6,1148 <addFloat32Sigs+0x154>
            if ( aSig | bSig ) return propagateFloat32NaN( a, b );
            return a;
        }
        if ( aExp == 0 ) return packFloat32( zSign, 0, ( aSig + bSig )>>6 );
    10bc:	44 a0 00 1e 	be r5,r0,1134 <addFloat32Sigs+0x140>
        zSig = 0x40000000 + aSig + bSig;
    10c0:	78 04 40 00 	mvhi r4,0x4000
    10c4:	b5 24 48 00 	add r9,r9,r4
    10c8:	b5 27 20 00 	add r4,r9,r7
        zExp = aExp;
        goto roundAndPack;
    10cc:	b8 a0 10 00 	mv r2,r5
    10d0:	e3 ff ff e5 	bi 1064 <addFloat32Sigs+0x70>
    expDiff = aExp - bExp;
    aSig <<= 6;
    bSig <<= 6;
    if ( 0 < expDiff ) {
        if ( aExp == 0xFF ) {
            if ( aSig ) return propagateFloat32NaN( a, b );
    10d4:	45 20 ff e8 	be r9,r0,1074 <addFloat32Sigs+0x80>
        shift32RightJamming( aSig, - expDiff, &aSig );
        zExp = bExp;
    }
    else {
        if ( aExp == 0xFF ) {
            if ( aSig | bSig ) return propagateFloat32NaN( a, b );
    10d8:	fb ff ff 01 	calli cdc <propagateFloat32NaN>
    10dc:	b8 20 20 00 	mv r4,r1
    10e0:	e3 ff ff e5 	bi 1074 <addFloat32Sigs+0x80>
    }
    else {
        z = ( a != 0 );
    10e4:	7c e7 00 00 	cmpnei r7,r7,0
    10e8:	b8 a0 10 00 	mv r2,r5
    10ec:	e3 ff ff d8 	bi 104c <addFloat32Sigs+0x58>
        }
        shift32RightJamming( bSig, expDiff, &bSig );
        zExp = aExp;
    }
    else if ( expDiff < 0 ) {
        if ( bExp == 0xFF ) {
    10f0:	34 04 00 ff 	mvi r4,255
    10f4:	45 04 00 1a 	be r8,r4,115c <addFloat32Sigs+0x168>
            if ( bSig ) return propagateFloat32NaN( a, b );
            return packFloat32( zSign, 0xFF, 0 );
        }
        if ( aExp == 0 ) {
    10f8:	44 a0 00 17 	be r5,r0,1154 <addFloat32Sigs+0x160>
            ++expDiff;
        }
        else {
            aSig |= 0x20000000;
    10fc:	78 01 20 00 	mvhi r1,0x2000
    1100:	b9 21 48 00 	or r9,r9,r1
        }
        shift32RightJamming( aSig, - expDiff, &aSig );
    1104:	c8 06 08 00 	sub r1,r0,r6
*/
INLINE void shift32RightJamming( bits32 a, int16 count, bits32 *zPtr )
{
    bits32 z;

    if ( count == 0 ) {
    1108:	b9 00 10 00 	mv r2,r8
    110c:	44 20 ff d0 	be r1,r0,104c <addFloat32Sigs+0x58>
        z = a;
    }
    else if ( count < 32 ) {
    1110:	34 04 00 1f 	mvi r4,31
    1114:	48 24 00 17 	bg r1,r4,1170 <addFloat32Sigs+0x17c>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    1118:	bd 26 30 00 	sl r6,r9,r6
    111c:	81 21 08 00 	sru r1,r9,r1
    1120:	7c c9 00 00 	cmpnei r9,r6,0
    1124:	b9 21 48 00 	or r9,r9,r1
    1128:	e3 ff ff c9 	bi 104c <addFloat32Sigs+0x58>
    }
    aSig |= 0x20000000;
    zSig = ( aSig + bSig )<<1;
    --zExp;
    if ( (sbits32) zSig < 0 ) {
        zSig = aSig + bSig;
    112c:	b8 e0 20 00 	mv r4,r7
    1130:	e3 ff ff cd 	bi 1064 <addFloat32Sigs+0x70>
    else {
        if ( aExp == 0xFF ) {
            if ( aSig | bSig ) return propagateFloat32NaN( a, b );
            return a;
        }
        if ( aExp == 0 ) return packFloat32( zSign, 0, ( aSig + bSig )>>6 );
    1134:	b4 e9 20 00 	add r4,r7,r9
    1138:	00 84 00 06 	srui r4,r4,6
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    113c:	3c 63 00 1f 	sli r3,r3,31
    1140:	b4 83 20 00 	add r4,r4,r3
    else {
        if ( aExp == 0xFF ) {
            if ( aSig | bSig ) return propagateFloat32NaN( a, b );
            return a;
        }
        if ( aExp == 0 ) return packFloat32( zSign, 0, ( aSig + bSig )>>6 );
    1144:	e3 ff ff cc 	bi 1074 <addFloat32Sigs+0x80>
        shift32RightJamming( aSig, - expDiff, &aSig );
        zExp = bExp;
    }
    else {
        if ( aExp == 0xFF ) {
            if ( aSig | bSig ) return propagateFloat32NaN( a, b );
    1148:	b8 e9 38 00 	or r7,r7,r9
    114c:	44 e0 ff ca 	be r7,r0,1074 <addFloat32Sigs+0x80>
    1150:	e3 ff ff e2 	bi 10d8 <addFloat32Sigs+0xe4>
        if ( bExp == 0xFF ) {
            if ( bSig ) return propagateFloat32NaN( a, b );
            return packFloat32( zSign, 0xFF, 0 );
        }
        if ( aExp == 0 ) {
            ++expDiff;
    1154:	34 c6 00 01 	addi r6,r6,1
    1158:	e3 ff ff eb 	bi 1104 <addFloat32Sigs+0x110>
        shift32RightJamming( bSig, expDiff, &bSig );
        zExp = aExp;
    }
    else if ( expDiff < 0 ) {
        if ( bExp == 0xFF ) {
            if ( bSig ) return propagateFloat32NaN( a, b );
    115c:	5c e0 ff df 	bne r7,r0,10d8 <addFloat32Sigs+0xe4>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1160:	3c 63 00 1f 	sli r3,r3,31
    1164:	78 01 7f 80 	mvhi r1,0x7f80
    1168:	b4 61 20 00 	add r4,r3,r1
        zExp = aExp;
    }
    else if ( expDiff < 0 ) {
        if ( bExp == 0xFF ) {
            if ( bSig ) return propagateFloat32NaN( a, b );
            return packFloat32( zSign, 0xFF, 0 );
    116c:	e3 ff ff c2 	bi 1074 <addFloat32Sigs+0x80>
    }
    else {
        z = ( a != 0 );
    1170:	7d 29 00 00 	cmpnei r9,r9,0
    1174:	e3 ff ff b6 	bi 104c <addFloat32Sigs+0x58>

00001178 <subFloat32Sigs>:
result is a NaN.  The subtraction is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 subFloat32Sigs( float32 a, float32 b, flag zSign )
{
    1178:	37 9c ff fc 	addi sp,sp,-4
    117c:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1180:	78 05 00 00 	mvhi r5,0x0
    1184:	38 a5 28 24 	ori r5,r5,0x2824
    1188:	28 a8 00 00 	lw r8,(r5+0)
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    118c:	00 27 00 17 	srui r7,r1,23
    1190:	00 49 00 17 	srui r9,r2,23
    1194:	20 e7 00 ff 	andi r7,r7,0xff
    1198:	21 29 00 ff 	andi r9,r9,0xff
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    119c:	a0 28 28 00 	and r5,r1,r8
    11a0:	a0 48 30 00 	and r6,r2,r8

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    11a4:	c8 e9 40 00 	sub r8,r7,r9
result is a NaN.  The subtraction is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 subFloat32Sigs( float32 a, float32 b, flag zSign )
{
    11a8:	b8 20 20 00 	mv r4,r1
    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 7;
    11ac:	3c a5 00 07 	sli r5,r5,7
    bSig <<= 7;
    11b0:	3c c6 00 07 	sli r6,r6,7
    if ( 0 < expDiff ) goto aExpBigger;
    11b4:	49 00 00 0f 	bg r8,r0,11f0 <subFloat32Sigs+0x78>
    if ( expDiff < 0 ) goto bExpBigger;
    11b8:	5d 00 00 2f 	bne r8,r0,1274 <subFloat32Sigs+0xfc>
    if ( aExp == 0xFF ) {
    11bc:	34 04 00 ff 	mvi r4,255
    11c0:	44 e4 00 40 	be r7,r4,12c0 <subFloat32Sigs+0x148>
        if ( aSig | bSig ) return propagateFloat32NaN( a, b );
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( aExp == 0 ) {
    11c4:	5c e0 00 03 	bne r7,r0,11d0 <subFloat32Sigs+0x58>
        aExp = 1;
        bExp = 1;
    11c8:	34 09 00 01 	mvi r9,1
        if ( aSig | bSig ) return propagateFloat32NaN( a, b );
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( aExp == 0 ) {
        aExp = 1;
    11cc:	34 07 00 01 	mvi r7,1
        bExp = 1;
    }
    if ( bSig < aSig ) goto aBigger;
    11d0:	54 a6 00 0f 	bgu r5,r6,120c <subFloat32Sigs+0x94>
    if ( aSig < bSig ) goto bBigger;
    11d4:	54 c5 00 37 	bgu r6,r5,12b0 <subFloat32Sigs+0x138>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    11d8:	78 01 00 00 	mvhi r1,0x0
    11dc:	38 21 2c a4 	ori r1,r1,0x2ca4
    11e0:	28 24 00 00 	lw r4,(r1+0)
    11e4:	64 84 00 03 	cmpei r4,r4,3
    11e8:	3c 84 00 1f 	sli r4,r4,31
        aExp = 1;
        bExp = 1;
    }
    if ( bSig < aSig ) goto aBigger;
    if ( aSig < bSig ) goto bBigger;
    return packFloat32( float_rounding_mode == float_round_down, 0, 0 );
    11ec:	e0 00 00 0e 	bi 1224 <subFloat32Sigs+0xac>
    zSig = bSig - aSig;
    zExp = bExp;
    zSign ^= 1;
    goto normalizeRoundAndPack;
 aExpBigger:
    if ( aExp == 0xFF ) {
    11f0:	34 0a 00 ff 	mvi r10,255
    11f4:	44 ea 00 1a 	be r7,r10,125c <subFloat32Sigs+0xe4>
        if ( aSig ) return propagateFloat32NaN( a, b );
        return a;
    }
    if ( bExp == 0 ) {
    11f8:	5d 20 00 0f 	bne r9,r0,1234 <subFloat32Sigs+0xbc>
        --expDiff;
    11fc:	35 08 ff ff 	addi r8,r8,-1
*/
INLINE void shift32RightJamming( bits32 a, int16 count, bits32 *zPtr )
{
    bits32 z;

    if ( count == 0 ) {
    1200:	5d 09 00 0f 	bne r8,r9,123c <subFloat32Sigs+0xc4>
    }
    else {
        bSig |= 0x40000000;
    }
    shift32RightJamming( bSig, expDiff, &bSig );
    aSig |= 0x40000000;
    1204:	78 01 40 00 	mvhi r1,0x4000
    1208:	b8 a1 28 00 	or r5,r5,r1
 aBigger:
    zSig = aSig - bSig;
    120c:	c8 a6 28 00 	sub r5,r5,r6
    zExp = aExp;
 normalizeRoundAndPack:
    --zExp;
    return normalizeRoundAndPackFloat32( zSign, zExp, zSig );
    1210:	b8 60 08 00 	mv r1,r3
    1214:	34 e2 ff ff 	addi r2,r7,-1
    1218:	b8 a0 18 00 	mv r3,r5
    121c:	fb ff ff 5a 	calli f84 <normalizeRoundAndPackFloat32>
    1220:	b8 20 20 00 	mv r4,r1

}
    1224:	b8 80 08 00 	mv r1,r4
    1228:	2b 9d 00 04 	lw ra,(sp+4)
    122c:	37 9c 00 04 	addi sp,sp,4
    1230:	c3 a0 00 00 	ret
    }
    if ( bExp == 0 ) {
        --expDiff;
    }
    else {
        bSig |= 0x40000000;
    1234:	78 01 40 00 	mvhi r1,0x4000
    1238:	b8 c1 30 00 	or r6,r6,r1
        z = a;
    }
    else if ( count < 32 ) {
    123c:	34 01 00 1f 	mvi r1,31
    1240:	49 01 00 0b 	bg r8,r1,126c <subFloat32Sigs+0xf4>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    1244:	c8 08 08 00 	sub r1,r0,r8
    1248:	bc c1 08 00 	sl r1,r6,r1
    124c:	80 c8 40 00 	sru r8,r6,r8
    1250:	7c 26 00 00 	cmpnei r6,r1,0
    1254:	b8 c8 30 00 	or r6,r6,r8
    1258:	e3 ff ff eb 	bi 1204 <subFloat32Sigs+0x8c>
    zExp = bExp;
    zSign ^= 1;
    goto normalizeRoundAndPack;
 aExpBigger:
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, b );
    125c:	44 a0 ff f2 	be r5,r0,1224 <subFloat32Sigs+0xac>
    1260:	fb ff fe 9f 	calli cdc <propagateFloat32NaN>
    1264:	b8 20 20 00 	mv r4,r1
    1268:	e3 ff ff ef 	bi 1224 <subFloat32Sigs+0xac>
    }
    else {
        z = ( a != 0 );
    126c:	7c c6 00 00 	cmpnei r6,r6,0
    1270:	e3 ff ff e5 	bi 1204 <subFloat32Sigs+0x8c>
    }
    if ( bSig < aSig ) goto aBigger;
    if ( aSig < bSig ) goto bBigger;
    return packFloat32( float_rounding_mode == float_round_down, 0, 0 );
 bExpBigger:
    if ( bExp == 0xFF ) {
    1274:	34 04 00 ff 	mvi r4,255
    1278:	45 24 00 1d 	be r9,r4,12ec <subFloat32Sigs+0x174>
        if ( bSig ) return propagateFloat32NaN( a, b );
        return packFloat32( zSign ^ 1, 0xFF, 0 );
    }
    if ( aExp == 0 ) {
    127c:	44 e0 00 1a 	be r7,r0,12e4 <subFloat32Sigs+0x16c>
        ++expDiff;
    }
    else {
        aSig |= 0x40000000;
    1280:	78 01 40 00 	mvhi r1,0x4000
    1284:	b8 a1 28 00 	or r5,r5,r1
    }
    shift32RightJamming( aSig, - expDiff, &aSig );
    1288:	c8 08 08 00 	sub r1,r0,r8
*/
INLINE void shift32RightJamming( bits32 a, int16 count, bits32 *zPtr )
{
    bits32 z;

    if ( count == 0 ) {
    128c:	44 20 00 07 	be r1,r0,12a8 <subFloat32Sigs+0x130>
        z = a;
    }
    else if ( count < 32 ) {
    1290:	34 02 00 1f 	mvi r2,31
    1294:	48 22 00 1c 	bg r1,r2,1304 <subFloat32Sigs+0x18c>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    1298:	bc a8 40 00 	sl r8,r5,r8
    129c:	80 a1 08 00 	sru r1,r5,r1
    12a0:	7d 05 00 00 	cmpnei r5,r8,0
    12a4:	b8 a1 28 00 	or r5,r5,r1
    bSig |= 0x40000000;
    12a8:	78 01 40 00 	mvhi r1,0x4000
    12ac:	b8 c1 30 00 	or r6,r6,r1
 bBigger:
    zSig = bSig - aSig;
    12b0:	c8 c5 28 00 	sub r5,r6,r5
    zExp = bExp;
    zSign ^= 1;
    12b4:	18 63 00 01 	xori r3,r3,0x1
    }
    shift32RightJamming( aSig, - expDiff, &aSig );
    bSig |= 0x40000000;
 bBigger:
    zSig = bSig - aSig;
    zExp = bExp;
    12b8:	b9 20 38 00 	mv r7,r9
    zSign ^= 1;
    goto normalizeRoundAndPack;
    12bc:	e3 ff ff d5 	bi 1210 <subFloat32Sigs+0x98>
    aSig <<= 7;
    bSig <<= 7;
    if ( 0 < expDiff ) goto aExpBigger;
    if ( expDiff < 0 ) goto bExpBigger;
    if ( aExp == 0xFF ) {
        if ( aSig | bSig ) return propagateFloat32NaN( a, b );
    12c0:	b8 c5 28 00 	or r5,r6,r5
    12c4:	5c a0 ff e7 	bne r5,r0,1260 <subFloat32Sigs+0xe8>
    12c8:	78 01 00 00 	mvhi r1,0x0
    12cc:	38 21 2c a8 	ori r1,r1,0x2ca8
    12d0:	28 22 00 00 	lw r2,(r1+0)
        float_raise( float_flag_invalid );
        return float32_default_nan;
    12d4:	34 04 ff ff 	mvi r4,-1
    12d8:	38 42 00 10 	ori r2,r2,0x10
    12dc:	58 22 00 00 	sw (r1+0),r2
    12e0:	e3 ff ff d1 	bi 1224 <subFloat32Sigs+0xac>
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
        return packFloat32( zSign ^ 1, 0xFF, 0 );
    }
    if ( aExp == 0 ) {
        ++expDiff;
    12e4:	35 08 00 01 	addi r8,r8,1
    12e8:	e3 ff ff e8 	bi 1288 <subFloat32Sigs+0x110>
    if ( bSig < aSig ) goto aBigger;
    if ( aSig < bSig ) goto bBigger;
    return packFloat32( float_rounding_mode == float_round_down, 0, 0 );
 bExpBigger:
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    12ec:	5c c0 ff dd 	bne r6,r0,1260 <subFloat32Sigs+0xe8>
        return packFloat32( zSign ^ 1, 0xFF, 0 );
    12f0:	18 63 00 01 	xori r3,r3,0x1
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    12f4:	3c 64 00 1f 	sli r4,r3,31
    12f8:	78 01 7f 80 	mvhi r1,0x7f80
    12fc:	b4 81 20 00 	add r4,r4,r1
    if ( aSig < bSig ) goto bBigger;
    return packFloat32( float_rounding_mode == float_round_down, 0, 0 );
 bExpBigger:
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
        return packFloat32( zSign ^ 1, 0xFF, 0 );
    1300:	e3 ff ff c9 	bi 1224 <subFloat32Sigs+0xac>
    }
    else {
        z = ( a != 0 );
    1304:	7c a5 00 00 	cmpnei r5,r5,0
    1308:	e3 ff ff e8 	bi 12a8 <subFloat32Sigs+0x130>

0000130c <estimateDiv64To32.clone.0>:
zero, the approximation returned lies between q and q + 2 inclusive.  If
the exact quotient q is larger than 32 bits, the maximum positive 32-bit
unsigned integer is returned.
-------------------------------------------------------------------------------
*/
static bits32 estimateDiv64To32( bits32 a0, bits32 a1, bits32 b )
    130c:	37 9c ff fc 	addi sp,sp,-4
    1310:	5b 8b 00 04 	sw (sp+4),r11
{
    bits32 b0, b1;
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
    1314:	34 06 ff ff 	mvi r6,-1
    1318:	50 22 00 28 	bgeu r1,r2,13b8 <estimateDiv64To32.clone.0+0xac>
    b0 = b>>16;
    131c:	00 47 00 10 	srui r7,r2,16
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
    1320:	3c e8 00 10 	sli r8,r7,16
    1324:	55 01 00 29 	bgu r8,r1,13c8 <estimateDiv64To32.clone.0+0xbc>
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    1328:	20 44 ff ff 	andi r4,r2,0xffff
    132c:	3c 85 00 10 	sli r5,r4,16
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    1330:	c9 07 18 00 	sub r3,r8,r7
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    1334:	c8 a4 20 00 	sub r4,r5,r4
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
    1338:	78 06 ff ff 	mvhi r6,0xffff
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    133c:	34 05 00 00 	mvi r5,0
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1340:	34 0a 00 00 	mvi r10,0
    zMiddleA <<= 16;
    1344:	3c 89 00 10 	sli r9,r4,16
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1348:	00 84 00 10 	srui r4,r4,16
    zMiddleA <<= 16;
    z1 += zMiddleA;
    134c:	b5 25 28 00 	add r5,r9,r5
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1350:	c8 23 18 00 	sub r3,r1,r3
    zMiddleA <<= 16;
    z1 += zMiddleA;
    z0 += ( z1 < zMiddleA );
    1354:	f5 25 48 00 	cmpgu r9,r9,r5
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1358:	c8 64 18 00 	sub r3,r3,r4
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    135c:	7c a1 00 00 	cmpnei r1,r5,0
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    zMiddleA <<= 16;
    z1 += zMiddleA;
    z0 += ( z1 < zMiddleA );
    1360:	c8 69 18 00 	sub r3,r3,r9
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    1364:	c8 61 18 00 	sub r3,r3,r1
INLINE void
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    1368:	c8 05 28 00 	sub r5,r0,r5
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    136c:	c8 6a 18 00 	sub r3,r3,r10
INLINE void
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    1370:	b8 a0 20 00 	mv r4,r5
    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
    mul32To64( b, z, &term0, &term1 );
    sub64( a0, a1, term0, term1, &rem0, &rem1 );
    while ( ( (sbits32) rem0 ) < 0 ) {
    1374:	4c 60 00 0a 	bge r3,r0,139c <estimateDiv64To32.clone.0+0x90>
    1378:	3c 42 00 10 	sli r2,r2,16
        z -= 0x10000;
    137c:	78 01 ff ff 	mvhi r1,0xffff
 add64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{
    bits32 z1;

    z1 = a1 + b1;
    1380:	b4 a2 20 00 	add r4,r5,r2
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
    1384:	f4 a4 28 00 	cmpgu r5,r5,r4
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
    mul32To64( b, z, &term0, &term1 );
    sub64( a0, a1, term0, term1, &rem0, &rem1 );
    while ( ( (sbits32) rem0 ) < 0 ) {
        z -= 0x10000;
    1388:	b4 c1 30 00 	add r6,r6,r1
{
    bits32 z1;

    z1 = a1 + b1;
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
    138c:	b4 a7 28 00 	add r5,r5,r7
    1390:	b4 65 18 00 	add r3,r3,r5
 add64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{
    bits32 z1;

    z1 = a1 + b1;
    1394:	b8 80 28 00 	mv r5,r4
    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
    mul32To64( b, z, &term0, &term1 );
    sub64( a0, a1, term0, term1, &rem0, &rem1 );
    while ( ( (sbits32) rem0 ) < 0 ) {
    1398:	48 03 ff fa 	bg r0,r3,1380 <estimateDiv64To32.clone.0+0x74>
        z -= 0x10000;
        b1 = b<<16;
        add64( rem0, rem1, b0, b1, &rem0, &rem1 );
    }
    rem0 = ( rem0<<16 ) | ( rem1>>16 );
    139c:	00 84 00 10 	srui r4,r4,16
    13a0:	3c 63 00 10 	sli r3,r3,16
    z |= ( b0<<16 <= rem0 ) ? 0xFFFF : rem0 / b0;
    13a4:	38 01 ff ff 	mvu r1,0xffff
    while ( ( (sbits32) rem0 ) < 0 ) {
        z -= 0x10000;
        b1 = b<<16;
        add64( rem0, rem1, b0, b1, &rem0, &rem1 );
    }
    rem0 = ( rem0<<16 ) | ( rem1>>16 );
    13a8:	b8 83 18 00 	or r3,r4,r3
    z |= ( b0<<16 <= rem0 ) ? 0xFFFF : rem0 / b0;
    13ac:	50 68 00 02 	bgeu r3,r8,13b4 <estimateDiv64To32.clone.0+0xa8>
    13b0:	8c 67 08 00 	divu r1,r3,r7
    13b4:	b8 26 30 00 	or r6,r1,r6
    return z;

}
    13b8:	b8 c0 08 00 	mv r1,r6
    13bc:	2b 8b 00 04 	lw r11,(sp+4)
    13c0:	37 9c 00 04 	addi sp,sp,4
    13c4:	c3 a0 00 00 	ret
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
    13c8:	8c 27 30 00 	divu r6,r1,r7
    13cc:	20 45 ff ff 	andi r5,r2,0xffff
    13d0:	3c c6 00 10 	sli r6,r6,16
    13d4:	20 e3 ff ff 	andi r3,r7,0xffff
    13d8:	00 c9 00 10 	srui r9,r6,16
    13dc:	20 cb ff ff 	andi r11,r6,0xffff
    13e0:	89 63 50 00 	mul r10,r11,r3
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    13e4:	88 a9 20 00 	mul r4,r5,r9
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    13e8:	89 23 18 00 	mul r3,r9,r3
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
    13ec:	89 65 28 00 	mul r5,r11,r5
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    13f0:	b4 8a 20 00 	add r4,r4,r10
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    13f4:	f5 44 50 00 	cmpgu r10,r10,r4
    13f8:	3d 4a 00 10 	sli r10,r10,16
    13fc:	e3 ff ff d2 	bi 1344 <estimateDiv64To32.clone.0+0x38>

00001400 <float_raise>:
    1400:	78 02 00 00 	mvhi r2,0x0
    1404:	38 42 2c a8 	ori r2,r2,0x2ca8
    1408:	28 43 00 00 	lw r3,(r2+0)
    140c:	b8 23 08 00 	or r1,r1,r3
    1410:	58 41 00 00 	sw (r2+0),r1

}
    1414:	c3 a0 00 00 	ret

00001418 <float32_is_nan>:
-------------------------------------------------------------------------------
*/
flag float32_is_nan( float32 a )
{

    return ( 0xFF000000 < (bits32) ( a<<1 ) );
    1418:	3c 21 00 01 	sli r1,r1,1
    141c:	78 02 ff 00 	mvhi r2,0xff00

}
    1420:	f4 22 08 00 	cmpgu r1,r1,r2
    1424:	c3 a0 00 00 	ret

00001428 <float32_is_signaling_nan>:
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    1428:	00 24 00 16 	srui r4,r1,22
    142c:	34 03 01 fe 	mvi r3,510
    1430:	20 84 01 ff 	andi r4,r4,0x1ff
Returns 1 if the single-precision floating-point value `a' is a signaling
NaN; otherwise returns 0.
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{
    1434:	b8 20 10 00 	mv r2,r1

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    1438:	34 01 00 00 	mvi r1,0
    143c:	44 83 00 02 	be r4,r3,1444 <float32_is_signaling_nan+0x1c>

}
    1440:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    1444:	78 03 00 00 	mvhi r3,0x0
    1448:	38 63 28 1c 	ori r3,r3,0x281c
    144c:	28 61 00 00 	lw r1,(r3+0)
    1450:	a0 41 08 00 	and r1,r2,r1
    1454:	7c 21 00 00 	cmpnei r1,r1,0

}
    1458:	c3 a0 00 00 	ret

0000145c <int32_to_float32>:
the single-precision floating-point format.  The conversion is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 int32_to_float32( int32 a )
{
    145c:	37 9c ff fc 	addi sp,sp,-4
    1460:	5b 9d 00 04 	sw (sp+4),ra
    1464:	b8 20 18 00 	mv r3,r1
    flag zSign;

    if ( a == 0 ) return 0;
    1468:	34 01 00 00 	mvi r1,0
    146c:	44 60 00 08 	be r3,r0,148c <int32_to_float32+0x30>
    if ( a == 0x80000000 ) return packFloat32( 1, 0x9E, 0 );
    1470:	78 02 80 00 	mvhi r2,0x8000
    1474:	78 01 cf 00 	mvhi r1,0xcf00
    1478:	44 62 00 05 	be r3,r2,148c <int32_to_float32+0x30>
    zSign = ( a < 0 );
    147c:	00 61 00 1f 	srui r1,r3,31
    return normalizeRoundAndPackFloat32( zSign, 0x9C, zSign ? - a : a );
    1480:	5c 20 00 06 	bne r1,r0,1498 <int32_to_float32+0x3c>
    1484:	34 02 00 9c 	mvi r2,156
    1488:	fb ff fe bf 	calli f84 <normalizeRoundAndPackFloat32>

}
    148c:	2b 9d 00 04 	lw ra,(sp+4)
    1490:	37 9c 00 04 	addi sp,sp,4
    1494:	c3 a0 00 00 	ret
    flag zSign;

    if ( a == 0 ) return 0;
    if ( a == 0x80000000 ) return packFloat32( 1, 0x9E, 0 );
    zSign = ( a < 0 );
    return normalizeRoundAndPackFloat32( zSign, 0x9C, zSign ? - a : a );
    1498:	c8 03 18 00 	sub r3,r0,r3
    149c:	e3 ff ff fa 	bi 1484 <int32_to_float32+0x28>

000014a0 <float32_to_int32>:
positive integer is returned.  Otherwise, if the conversion overflows, the
largest integer with the same sign as `a' is returned.
-------------------------------------------------------------------------------
*/
int32 float32_to_int32( float32 a )
{
    14a0:	b8 20 10 00 	mv r2,r1
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    14a4:	00 23 00 17 	srui r3,r1,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    14a8:	78 01 00 00 	mvhi r1,0x0
    14ac:	38 21 28 24 	ori r1,r1,0x2824
    14b0:	28 26 00 00 	lw r6,(r1+0)
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    14b4:	20 63 00 ff 	andi r3,r3,0xff
    int8 roundingMode;

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    shiftCount = aExp - 0x96;
    14b8:	34 64 ff 6a 	addi r4,r3,-150
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    14bc:	a0 46 30 00 	and r6,r2,r6
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    14c0:	00 45 00 1f 	srui r5,r2,31

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    shiftCount = aExp - 0x96;
    if ( 0 <= shiftCount ) {
    14c4:	48 04 00 20 	bg r0,r4,1544 <float32_to_int32+0xa4>
        if ( 0x9E <= aExp ) {
    14c8:	34 01 00 9d 	mvi r1,157
    14cc:	4c 23 00 14 	bge r1,r3,151c <float32_to_int32+0x7c>
            if ( a == 0xCF000000 ) return 0x80000000;
    14d0:	78 04 cf 00 	mvhi r4,0xcf00
    14d4:	78 01 80 00 	mvhi r1,0x8000
    14d8:	44 44 00 1a 	be r2,r4,1540 <float32_to_int32+0xa0>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    14dc:	78 02 00 00 	mvhi r2,0x0
    14e0:	38 42 2c a8 	ori r2,r2,0x2ca8
    14e4:	28 44 00 00 	lw r4,(r2+0)
            float_raise( float_flag_invalid );
            if ( ! aSign || ( ( aExp == 0xFF ) && aSig ) ) return 0x7FFFFFFF;
    14e8:	78 07 00 00 	mvhi r7,0x0
    14ec:	38 e7 28 28 	ori r7,r7,0x2828
    14f0:	38 84 00 10 	ori r4,r4,0x10
    14f4:	58 44 00 00 	sw (r2+0),r4
    14f8:	28 e1 00 00 	lw r1,(r7+0)
    14fc:	44 a0 00 11 	be r5,r0,1540 <float32_to_int32+0xa0>
    1500:	64 61 00 ff 	cmpei r1,r3,255
    1504:	7c c6 00 00 	cmpnei r6,r6,0
    1508:	28 e2 00 00 	lw r2,(r7+0)
    150c:	a0 26 08 00 	and r1,r1,r6
    1510:	64 21 00 00 	cmpei r1,r1,0
    1514:	b4 22 08 00 	add r1,r1,r2
    1518:	c3 a0 00 00 	ret
            return 0x80000000;
        }
        z = ( aSig | 0x00800000 )<<shiftCount;
    151c:	78 01 00 80 	mvhi r1,0x80
    1520:	b8 c1 08 00 	or r1,r6,r1
    1524:	bc 24 08 00 	sl r1,r1,r4
        if ( aSign ) z = - z;
    1528:	44 a0 00 06 	be r5,r0,1540 <float32_to_int32+0xa0>
        }
        else {
            zExtra = ( zExtra != 0 );
            if ( aSign ) {
                z += ( roundingMode == float_round_down ) & zExtra;
                z = - z;
    152c:	c8 01 08 00 	sub r1,r0,r1
    1530:	c3 a0 00 00 	ret
            }
            else {
                z += ( roundingMode == float_round_up ) & zExtra;
    1534:	64 42 00 02 	cmpei r2,r2,2
    1538:	a0 62 18 00 	and r3,r3,r2
    153c:	b4 61 08 00 	add r1,r3,r1
            }
        }
    }
    return z;

}
    1540:	c3 a0 00 00 	ret
        }
        z = ( aSig | 0x00800000 )<<shiftCount;
        if ( aSign ) z = - z;
    }
    else {
        if ( aExp < 0x7E ) {
    1544:	34 01 00 7d 	mvi r1,125
    1548:	48 61 00 15 	bg r3,r1,159c <float32_to_int32+0xfc>
            zExtra = aExp | aSig;
    154c:	b8 66 18 00 	or r3,r3,r6
            z = 0;
    1550:	34 01 00 00 	mvi r1,0
        else {
            aSig |= 0x00800000;
            zExtra = aSig<<( shiftCount & 31 );
            z = aSig>>( - shiftCount );
        }
        if ( zExtra ) float_exception_flags |= float_flag_inexact;
    1554:	44 60 00 06 	be r3,r0,156c <float32_to_int32+0xcc>
    1558:	78 02 00 00 	mvhi r2,0x0
    155c:	38 42 2c a8 	ori r2,r2,0x2ca8
    1560:	28 44 00 00 	lw r4,(r2+0)
    1564:	38 84 00 01 	ori r4,r4,0x1
    1568:	58 44 00 00 	sw (r2+0),r4
        roundingMode = float_rounding_mode;
    156c:	78 02 00 00 	mvhi r2,0x0
    1570:	38 42 2c a4 	ori r2,r2,0x2ca4
    1574:	28 42 00 00 	lw r2,(r2+0)
        if ( roundingMode == float_round_nearest_even ) {
    1578:	5c 40 00 0f 	bne r2,r0,15b4 <float32_to_int32+0x114>
            if ( (sbits32) zExtra < 0 ) {
    157c:	4c 62 00 06 	bge r3,r2,1594 <float32_to_int32+0xf4>
                ++z;
                if ( (bits32) ( zExtra<<1 ) == 0 ) z &= ~1;
    1580:	3c 63 00 01 	sli r3,r3,1
        }
        if ( zExtra ) float_exception_flags |= float_flag_inexact;
        roundingMode = float_rounding_mode;
        if ( roundingMode == float_round_nearest_even ) {
            if ( (sbits32) zExtra < 0 ) {
                ++z;
    1584:	34 21 00 01 	addi r1,r1,1
                if ( (bits32) ( zExtra<<1 ) == 0 ) z &= ~1;
    1588:	5c 60 00 03 	bne r3,r0,1594 <float32_to_int32+0xf4>
    158c:	34 02 ff fe 	mvi r2,-2
    1590:	a0 22 08 00 	and r1,r1,r2
            }
            if ( aSign ) z = - z;
    1594:	44 a0 ff eb 	be r5,r0,1540 <float32_to_int32+0xa0>
    1598:	e3 ff ff e5 	bi 152c <float32_to_int32+0x8c>
        if ( aExp < 0x7E ) {
            zExtra = aExp | aSig;
            z = 0;
        }
        else {
            aSig |= 0x00800000;
    159c:	78 01 00 80 	mvhi r1,0x80
    15a0:	b8 c1 30 00 	or r6,r6,r1
            zExtra = aSig<<( shiftCount & 31 );
            z = aSig>>( - shiftCount );
    15a4:	c8 04 08 00 	sub r1,r0,r4
            zExtra = aExp | aSig;
            z = 0;
        }
        else {
            aSig |= 0x00800000;
            zExtra = aSig<<( shiftCount & 31 );
    15a8:	bc c4 18 00 	sl r3,r6,r4
            z = aSig>>( - shiftCount );
    15ac:	80 c1 08 00 	sru r1,r6,r1
    15b0:	e3 ff ff e9 	bi 1554 <float32_to_int32+0xb4>
                if ( (bits32) ( zExtra<<1 ) == 0 ) z &= ~1;
            }
            if ( aSign ) z = - z;
        }
        else {
            zExtra = ( zExtra != 0 );
    15b4:	7c 63 00 00 	cmpnei r3,r3,0
            if ( aSign ) {
    15b8:	44 a0 ff df 	be r5,r0,1534 <float32_to_int32+0x94>
                z += ( roundingMode == float_round_down ) & zExtra;
    15bc:	64 42 00 03 	cmpei r2,r2,3
    15c0:	a0 62 18 00 	and r3,r3,r2
    15c4:	b4 61 08 00 	add r1,r3,r1
    15c8:	e3 ff ff d9 	bi 152c <float32_to_int32+0x8c>

000015cc <float32_to_int32_round_to_zero>:
conversion overflows, the largest integer with the same sign as `a' is
returned.
-------------------------------------------------------------------------------
*/
int32 float32_to_int32_round_to_zero( float32 a )
{
    15cc:	b8 20 10 00 	mv r2,r1
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    15d0:	00 23 00 17 	srui r3,r1,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    15d4:	78 01 00 00 	mvhi r1,0x0
    15d8:	38 21 28 24 	ori r1,r1,0x2824
    15dc:	28 25 00 00 	lw r5,(r1+0)
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    15e0:	20 63 00 ff 	andi r3,r3,0xff
    int32 z;

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    shiftCount = aExp - 0x9E;
    15e4:	34 64 ff 62 	addi r4,r3,-158
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    15e8:	a0 45 28 00 	and r5,r2,r5
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    15ec:	00 46 00 1f 	srui r6,r2,31

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    shiftCount = aExp - 0x9E;
    if ( 0 <= shiftCount ) {
    15f0:	48 04 00 14 	bg r0,r4,1640 <float32_to_int32_round_to_zero+0x74>
        if ( a == 0xCF000000 ) return 0x80000000;
    15f4:	78 04 cf 00 	mvhi r4,0xcf00
    15f8:	78 01 80 00 	mvhi r1,0x8000
    15fc:	44 44 00 2a 	be r2,r4,16a4 <float32_to_int32_round_to_zero+0xd8>
    1600:	78 02 00 00 	mvhi r2,0x0
    1604:	38 42 2c a8 	ori r2,r2,0x2ca8
    1608:	28 44 00 00 	lw r4,(r2+0)
        float_raise( float_flag_invalid );
        if ( ! aSign || ( ( aExp == 0xFF ) && aSig ) ) return 0x7FFFFFFF;
    160c:	78 07 00 00 	mvhi r7,0x0
    1610:	38 e7 28 28 	ori r7,r7,0x2828
    1614:	38 84 00 10 	ori r4,r4,0x10
    1618:	58 44 00 00 	sw (r2+0),r4
    161c:	28 e1 00 00 	lw r1,(r7+0)
    1620:	44 c0 00 21 	be r6,r0,16a4 <float32_to_int32_round_to_zero+0xd8>
    1624:	64 61 00 ff 	cmpei r1,r3,255
    1628:	7c a5 00 00 	cmpnei r5,r5,0
    162c:	28 e2 00 00 	lw r2,(r7+0)
    1630:	a0 25 08 00 	and r1,r1,r5
    1634:	64 21 00 00 	cmpei r1,r1,0
    1638:	b4 22 08 00 	add r1,r1,r2
    163c:	c3 a0 00 00 	ret
        return 0x80000000;
    }
    else if ( aExp <= 0x7E ) {
    1640:	34 01 00 7e 	mvi r1,126
    1644:	48 61 00 0a 	bg r3,r1,166c <float32_to_int32_round_to_zero+0xa0>
        if ( aExp | aSig ) float_exception_flags |= float_flag_inexact;
    1648:	b8 65 18 00 	or r3,r3,r5
        return 0;
    164c:	34 01 00 00 	mvi r1,0
        float_raise( float_flag_invalid );
        if ( ! aSign || ( ( aExp == 0xFF ) && aSig ) ) return 0x7FFFFFFF;
        return 0x80000000;
    }
    else if ( aExp <= 0x7E ) {
        if ( aExp | aSig ) float_exception_flags |= float_flag_inexact;
    1650:	44 60 00 15 	be r3,r0,16a4 <float32_to_int32_round_to_zero+0xd8>
    1654:	78 02 00 00 	mvhi r2,0x0
    1658:	38 42 2c a8 	ori r2,r2,0x2ca8
    165c:	28 43 00 00 	lw r3,(r2+0)
    1660:	38 63 00 01 	ori r3,r3,0x1
    1664:	58 43 00 00 	sw (r2+0),r3
    1668:	c3 a0 00 00 	ret
        return 0;
    }
    aSig = ( aSig | 0x00800000 )<<8;
    166c:	78 01 00 80 	mvhi r1,0x80
    1670:	b8 a1 28 00 	or r5,r5,r1
    1674:	3c a5 00 08 	sli r5,r5,8
    z = aSig>>( - shiftCount );
    1678:	c8 04 08 00 	sub r1,r0,r4
    if ( (bits32) ( aSig<<( shiftCount & 31 ) ) ) {
    167c:	bc a4 20 00 	sl r4,r5,r4
    else if ( aExp <= 0x7E ) {
        if ( aExp | aSig ) float_exception_flags |= float_flag_inexact;
        return 0;
    }
    aSig = ( aSig | 0x00800000 )<<8;
    z = aSig>>( - shiftCount );
    1680:	80 a1 08 00 	sru r1,r5,r1
    if ( (bits32) ( aSig<<( shiftCount & 31 ) ) ) {
    1684:	44 80 00 06 	be r4,r0,169c <float32_to_int32_round_to_zero+0xd0>
        float_exception_flags |= float_flag_inexact;
    1688:	78 02 00 00 	mvhi r2,0x0
    168c:	38 42 2c a8 	ori r2,r2,0x2ca8
    1690:	28 43 00 00 	lw r3,(r2+0)
    1694:	38 63 00 01 	ori r3,r3,0x1
    1698:	58 43 00 00 	sw (r2+0),r3
    }
    return aSign ? - z : z;
    169c:	44 c0 00 02 	be r6,r0,16a4 <float32_to_int32_round_to_zero+0xd8>
    16a0:	c8 01 08 00 	sub r1,r0,r1

}
    16a4:	c3 a0 00 00 	ret

000016a8 <float32_round_to_int>:
operation is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_round_to_int( float32 a )
{
    16a8:	37 9c ff fc 	addi sp,sp,-4
    16ac:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    16b0:	00 23 00 17 	srui r3,r1,23
    bits32 lastBitMask, roundBitsMask;
    int8 roundingMode;
    float32 z;

    aExp = extractFloat32Exp( a );
    if ( 0x96 <= aExp ) {
    16b4:	34 04 00 95 	mvi r4,149
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    16b8:	20 63 00 ff 	andi r3,r3,0xff
operation is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_round_to_int( float32 a )
{
    16bc:	b8 20 10 00 	mv r2,r1
    bits32 lastBitMask, roundBitsMask;
    int8 roundingMode;
    float32 z;

    aExp = extractFloat32Exp( a );
    if ( 0x96 <= aExp ) {
    16c0:	4c 83 00 07 	bge r4,r3,16dc <float32_round_to_int+0x34>
        if ( ( aExp == 0xFF ) && extractFloat32Frac( a ) ) {
    16c4:	34 04 00 ff 	mvi r4,255
    16c8:	44 64 00 35 	be r3,r4,179c <float32_round_to_int+0xf4>
    }
    z &= ~ roundBitsMask;
    if ( z != a ) float_exception_flags |= float_flag_inexact;
    return z;

}
    16cc:	b8 40 08 00 	mv r1,r2
    16d0:	2b 9d 00 04 	lw ra,(sp+4)
    16d4:	37 9c 00 04 	addi sp,sp,4
    16d8:	c3 a0 00 00 	ret
        if ( ( aExp == 0xFF ) && extractFloat32Frac( a ) ) {
            return propagateFloat32NaN( a, a );
        }
        return a;
    }
    if ( aExp <= 0x7E ) {
    16dc:	34 04 00 7e 	mvi r4,126
    16e0:	48 64 00 13 	bg r3,r4,172c <float32_round_to_int+0x84>
        if ( (bits32) ( a<<1 ) == 0 ) return a;
    16e4:	3c 21 00 01 	sli r1,r1,1
    16e8:	44 20 ff f9 	be r1,r0,16cc <float32_round_to_int+0x24>
        float_exception_flags |= float_flag_inexact;
    16ec:	78 01 00 00 	mvhi r1,0x0
    16f0:	38 21 2c a8 	ori r1,r1,0x2ca8
    16f4:	28 26 00 00 	lw r6,(r1+0)
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
    16f8:	78 05 00 00 	mvhi r5,0x0
    16fc:	38 a5 2c a4 	ori r5,r5,0x2ca4
    1700:	28 a5 00 00 	lw r5,(r5+0)
        }
        return a;
    }
    if ( aExp <= 0x7E ) {
        if ( (bits32) ( a<<1 ) == 0 ) return a;
        float_exception_flags |= float_flag_inexact;
    1704:	38 c6 00 01 	ori r6,r6,0x1
    1708:	58 26 00 00 	sw (r1+0),r6
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
    170c:	34 06 00 02 	mvi r6,2
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    1710:	00 41 00 1f 	srui r1,r2,31
    }
    if ( aExp <= 0x7E ) {
        if ( (bits32) ( a<<1 ) == 0 ) return a;
        float_exception_flags |= float_flag_inexact;
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
    1714:	44 a6 00 41 	be r5,r6,1818 <float32_round_to_int+0x170>
    1718:	34 06 00 03 	mvi r6,3
    171c:	44 a6 00 39 	be r5,r6,1800 <float32_round_to_int+0x158>
    1720:	44 a0 00 2e 	be r5,r0,17d8 <float32_round_to_int+0x130>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1724:	3c 22 00 1f 	sli r2,r1,31
         case float_round_down:
            return aSign ? 0xBF800000 : 0;
         case float_round_up:
            return aSign ? 0x80000000 : 0x3F800000;
        }
        return packFloat32( aSign, 0, 0 );
    1728:	e3 ff ff e9 	bi 16cc <float32_round_to_int+0x24>
    }
    lastBitMask = 1;
    lastBitMask <<= 0x96 - aExp;
    roundBitsMask = lastBitMask - 1;
    z = a;
    roundingMode = float_rounding_mode;
    172c:	78 01 00 00 	mvhi r1,0x0
            return aSign ? 0x80000000 : 0x3F800000;
        }
        return packFloat32( aSign, 0, 0 );
    }
    lastBitMask = 1;
    lastBitMask <<= 0x96 - aExp;
    1730:	34 04 00 96 	mvi r4,150
    roundBitsMask = lastBitMask - 1;
    z = a;
    roundingMode = float_rounding_mode;
    1734:	38 21 2c a4 	ori r1,r1,0x2ca4
            return aSign ? 0x80000000 : 0x3F800000;
        }
        return packFloat32( aSign, 0, 0 );
    }
    lastBitMask = 1;
    lastBitMask <<= 0x96 - aExp;
    1738:	c8 83 18 00 	sub r3,r4,r3
    173c:	34 06 00 01 	mvi r6,1
    roundBitsMask = lastBitMask - 1;
    z = a;
    roundingMode = float_rounding_mode;
    1740:	28 24 00 00 	lw r4,(r1+0)
            return aSign ? 0x80000000 : 0x3F800000;
        }
        return packFloat32( aSign, 0, 0 );
    }
    lastBitMask = 1;
    lastBitMask <<= 0x96 - aExp;
    1744:	bc c3 18 00 	sl r3,r6,r3
    roundBitsMask = lastBitMask - 1;
    1748:	34 65 ff ff 	addi r5,r3,-1
    z = a;
    roundingMode = float_rounding_mode;
    if ( roundingMode == float_round_nearest_even ) {
    174c:	44 80 00 1c 	be r4,r0,17bc <float32_round_to_int+0x114>
        z += lastBitMask>>1;
        if ( ( z & roundBitsMask ) == 0 ) z &= ~ lastBitMask;
    }
    else if ( roundingMode != float_round_to_zero ) {
    1750:	b8 40 08 00 	mv r1,r2
    1754:	44 86 00 05 	be r4,r6,1768 <float32_round_to_int+0xc0>
        if ( extractFloat32Sign( z ) ^ ( roundingMode == float_round_up ) ) {
    1758:	64 84 00 02 	cmpei r4,r4,2
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    175c:	00 43 00 1f 	srui r3,r2,31
    if ( roundingMode == float_round_nearest_even ) {
        z += lastBitMask>>1;
        if ( ( z & roundBitsMask ) == 0 ) z &= ~ lastBitMask;
    }
    else if ( roundingMode != float_round_to_zero ) {
        if ( extractFloat32Sign( z ) ^ ( roundingMode == float_round_up ) ) {
    1760:	44 83 00 02 	be r4,r3,1768 <float32_round_to_int+0xc0>
            z += roundBitsMask;
    1764:	b4 a2 08 00 	add r1,r5,r2
        }
    }
    z &= ~ roundBitsMask;
    1768:	a4 a0 28 00 	not r5,r5
    176c:	a0 25 08 00 	and r1,r1,r5
    if ( z != a ) float_exception_flags |= float_flag_inexact;
    1770:	44 22 ff d7 	be r1,r2,16cc <float32_round_to_int+0x24>
    1774:	78 03 00 00 	mvhi r3,0x0
    1778:	38 63 2c a8 	ori r3,r3,0x2ca8
    177c:	28 64 00 00 	lw r4,(r3+0)
    1780:	b8 20 10 00 	mv r2,r1
    1784:	38 81 00 01 	ori r1,r4,0x1
    1788:	58 61 00 00 	sw (r3+0),r1
    return z;

}
    178c:	b8 40 08 00 	mv r1,r2
    1790:	2b 9d 00 04 	lw ra,(sp+4)
    1794:	37 9c 00 04 	addi sp,sp,4
    1798:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    179c:	78 04 00 00 	mvhi r4,0x0
    17a0:	38 84 28 24 	ori r4,r4,0x2824
    17a4:	28 83 00 00 	lw r3,(r4+0)
    17a8:	a0 23 18 00 	and r3,r1,r3
    int8 roundingMode;
    float32 z;

    aExp = extractFloat32Exp( a );
    if ( 0x96 <= aExp ) {
        if ( ( aExp == 0xFF ) && extractFloat32Frac( a ) ) {
    17ac:	44 60 ff c8 	be r3,r0,16cc <float32_round_to_int+0x24>
            return propagateFloat32NaN( a, a );
    17b0:	fb ff fd 4b 	calli cdc <propagateFloat32NaN>
    17b4:	b8 20 10 00 	mv r2,r1
    17b8:	e3 ff ff c5 	bi 16cc <float32_round_to_int+0x24>
    lastBitMask <<= 0x96 - aExp;
    roundBitsMask = lastBitMask - 1;
    z = a;
    roundingMode = float_rounding_mode;
    if ( roundingMode == float_round_nearest_even ) {
        z += lastBitMask>>1;
    17bc:	00 61 00 01 	srui r1,r3,1
    17c0:	b4 22 08 00 	add r1,r1,r2
        if ( ( z & roundBitsMask ) == 0 ) z &= ~ lastBitMask;
    17c4:	a0 25 30 00 	and r6,r1,r5
    17c8:	5c c4 ff e8 	bne r6,r4,1768 <float32_round_to_int+0xc0>
    17cc:	a4 60 18 00 	not r3,r3
    17d0:	a0 23 08 00 	and r1,r1,r3
    17d4:	e3 ff ff e5 	bi 1768 <float32_round_to_int+0xc0>
        if ( (bits32) ( a<<1 ) == 0 ) return a;
        float_exception_flags |= float_flag_inexact;
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
         case float_round_nearest_even:
            if ( ( aExp == 0x7E ) && extractFloat32Frac( a ) ) {
    17d8:	5c 64 ff d3 	bne r3,r4,1724 <float32_round_to_int+0x7c>
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    17dc:	78 04 00 00 	mvhi r4,0x0
    17e0:	38 84 28 24 	ori r4,r4,0x2824
    17e4:	28 83 00 00 	lw r3,(r4+0)
    17e8:	a0 43 10 00 	and r2,r2,r3
        if ( (bits32) ( a<<1 ) == 0 ) return a;
        float_exception_flags |= float_flag_inexact;
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
         case float_round_nearest_even:
            if ( ( aExp == 0x7E ) && extractFloat32Frac( a ) ) {
    17ec:	44 40 ff ce 	be r2,r0,1724 <float32_round_to_int+0x7c>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    17f0:	3c 21 00 1f 	sli r1,r1,31
    17f4:	78 02 3f 80 	mvhi r2,0x3f80
    17f8:	b4 22 10 00 	add r2,r1,r2
        float_exception_flags |= float_flag_inexact;
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
         case float_round_nearest_even:
            if ( ( aExp == 0x7E ) && extractFloat32Frac( a ) ) {
                return packFloat32( aSign, 0x7F, 0 );
    17fc:	e3 ff ff b4 	bi 16cc <float32_round_to_int+0x24>
            }
            break;
         case float_round_down:
            return aSign ? 0xBF800000 : 0;
    1800:	64 22 00 00 	cmpei r2,r1,0
    1804:	78 03 40 80 	mvhi r3,0x4080
    1808:	c8 02 10 00 	sub r2,r0,r2
    180c:	a0 43 10 00 	and r2,r2,r3
    1810:	c8 43 10 00 	sub r2,r2,r3
    1814:	e3 ff ff ae 	bi 16cc <float32_round_to_int+0x24>
         case float_round_up:
            return aSign ? 0x80000000 : 0x3F800000;
    1818:	64 21 00 00 	cmpei r1,r1,0
    181c:	78 02 bf 80 	mvhi r2,0xbf80
    1820:	c8 01 08 00 	sub r1,r0,r1
    1824:	a0 22 10 00 	and r2,r1,r2
    1828:	78 01 80 00 	mvhi r1,0x8000
    182c:	b4 41 10 00 	add r2,r2,r1
    1830:	e3 ff ff a7 	bi 16cc <float32_round_to_int+0x24>

00001834 <float32_add>:
and `b'.  The operation is performed according to the IEC/IEEE Standard for
Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_add( float32 a, float32 b )
{
    1834:	37 9c ff fc 	addi sp,sp,-4
    1838:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    183c:	00 23 00 1f 	srui r3,r1,31
    1840:	00 44 00 1f 	srui r4,r2,31
{
    flag aSign, bSign;

    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign == bSign ) {
    1844:	44 64 00 05 	be r3,r4,1858 <float32_add+0x24>
        return addFloat32Sigs( a, b, aSign );
    }
    else {
        return subFloat32Sigs( a, b, aSign );
    1848:	fb ff fe 4c 	calli 1178 <subFloat32Sigs>
    }

}
    184c:	2b 9d 00 04 	lw ra,(sp+4)
    1850:	37 9c 00 04 	addi sp,sp,4
    1854:	c3 a0 00 00 	ret
    flag aSign, bSign;

    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign == bSign ) {
        return addFloat32Sigs( a, b, aSign );
    1858:	fb ff fd e7 	calli ff4 <addFloat32Sigs>
    }
    else {
        return subFloat32Sigs( a, b, aSign );
    }

}
    185c:	2b 9d 00 04 	lw ra,(sp+4)
    1860:	37 9c 00 04 	addi sp,sp,4
    1864:	c3 a0 00 00 	ret

00001868 <float32_sub>:
`a' and `b'.  The operation is performed according to the IEC/IEEE Standard
for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_sub( float32 a, float32 b )
{
    1868:	37 9c ff fc 	addi sp,sp,-4
    186c:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    1870:	00 23 00 1f 	srui r3,r1,31
    1874:	00 44 00 1f 	srui r4,r2,31
{
    flag aSign, bSign;

    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign == bSign ) {
    1878:	44 64 00 05 	be r3,r4,188c <float32_sub+0x24>
        return subFloat32Sigs( a, b, aSign );
    }
    else {
        return addFloat32Sigs( a, b, aSign );
    187c:	fb ff fd de 	calli ff4 <addFloat32Sigs>
    }

}
    1880:	2b 9d 00 04 	lw ra,(sp+4)
    1884:	37 9c 00 04 	addi sp,sp,4
    1888:	c3 a0 00 00 	ret
    flag aSign, bSign;

    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign == bSign ) {
        return subFloat32Sigs( a, b, aSign );
    188c:	fb ff fe 3b 	calli 1178 <subFloat32Sigs>
    }
    else {
        return addFloat32Sigs( a, b, aSign );
    }

}
    1890:	2b 9d 00 04 	lw ra,(sp+4)
    1894:	37 9c 00 04 	addi sp,sp,4
    1898:	c3 a0 00 00 	ret

0000189c <float32_mul>:
`a' and `b'.  The operation is performed according to the IEC/IEEE Standard
for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_mul( float32 a, float32 b )
{
    189c:	37 9c ff e8 	addi sp,sp,-24
    18a0:	5b 8b 00 08 	sw (sp+8),r11
    18a4:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    18a8:	78 04 00 00 	mvhi r4,0x0
    18ac:	38 84 28 24 	ori r4,r4,0x2824
    18b0:	28 86 00 00 	lw r6,(r4+0)
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    18b4:	00 27 00 17 	srui r7,r1,23
    18b8:	00 44 00 17 	srui r4,r2,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    18bc:	a0 26 40 00 	and r8,r1,r6
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    18c0:	20 e7 00 ff 	andi r7,r7,0xff
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    18c4:	a0 46 30 00 	and r6,r2,r6
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    18c8:	20 84 00 ff 	andi r4,r4,0xff
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    18cc:	98 22 58 00 	xor r11,r1,r2
{
    flag aSign, bSign, zSign;
    int16 aExp, bExp, zExp;
    bits32 aSig, bSig, zSig0, zSig1;

    aSig = extractFloat32Frac( a );
    18d0:	5b 88 00 10 	sw (sp+16),r8
    aExp = extractFloat32Exp( a );
    18d4:	5b 87 00 18 	sw (sp+24),r7
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    18d8:	5b 86 00 0c 	sw (sp+12),r6
    bExp = extractFloat32Exp( b );
    18dc:	5b 84 00 14 	sw (sp+20),r4
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
    18e0:	34 09 00 ff 	mvi r9,255
`a' and `b'.  The operation is performed according to the IEC/IEEE Standard
for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_mul( float32 a, float32 b )
{
    18e4:	b8 20 28 00 	mv r5,r1
    18e8:	b8 40 18 00 	mv r3,r2
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    18ec:	01 6b 00 1f 	srui r11,r11,31
    if ( aExp == 0xFF ) {
    18f0:	44 e9 00 3f 	be r7,r9,19ec <float32_mul+0x150>
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
    18f4:	44 89 00 49 	be r4,r9,1a18 <float32_mul+0x17c>
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( aExp == 0 ) {
    18f8:	5c e0 00 0d 	bne r7,r0,192c <float32_mul+0x90>
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
    18fc:	5d 07 00 06 	bne r8,r7,1914 <float32_mul+0x78>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1900:	3d 61 00 1f 	sli r1,r11,31
        zSig0 <<= 1;
        --zExp;
    }
    return roundAndPackFloat32( zSign, zExp, zSig0 );

}
    1904:	2b 9d 00 04 	lw ra,(sp+4)
    1908:	2b 8b 00 08 	lw r11,(sp+8)
    190c:	37 9c 00 18 	addi sp,sp,24
    1910:	c3 a0 00 00 	ret
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    1914:	b9 00 08 00 	mv r1,r8
    1918:	37 82 00 18 	addi r2,sp,24
    191c:	37 83 00 10 	addi r3,sp,16
    1920:	fb ff fd 1a 	calli d88 <normalizeFloat32Subnormal>
    1924:	2b 84 00 14 	lw r4,(sp+20)
    1928:	2b 86 00 0c 	lw r6,(sp+12)
    }
    if ( bExp == 0 ) {
    192c:	5c 80 00 08 	bne r4,r0,194c <float32_mul+0xb0>
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
    1930:	44 c4 ff f4 	be r6,r4,1900 <float32_mul+0x64>
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    1934:	b8 c0 08 00 	mv r1,r6
    1938:	37 82 00 14 	addi r2,sp,20
    193c:	37 83 00 0c 	addi r3,sp,12
    1940:	fb ff fd 12 	calli d88 <normalizeFloat32Subnormal>
    1944:	2b 84 00 14 	lw r4,(sp+20)
    1948:	2b 86 00 0c 	lw r6,(sp+12)
    }
    zExp = aExp + bExp - 0x7F;
    aSig = ( aSig | 0x00800000 )<<7;
    194c:	2b 82 00 10 	lw r2,(sp+16)
    1950:	78 01 00 80 	mvhi r1,0x80
    bSig = ( bSig | 0x00800000 )<<8;
    1954:	b8 c1 30 00 	or r6,r6,r1
    if ( bExp == 0 ) {
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    zExp = aExp + bExp - 0x7F;
    aSig = ( aSig | 0x00800000 )<<7;
    1958:	b8 41 08 00 	or r1,r2,r1
    195c:	3c 21 00 07 	sli r1,r1,7
    bSig = ( bSig | 0x00800000 )<<8;
    1960:	3c c6 00 08 	sli r6,r6,8
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    1964:	00 25 00 10 	srui r5,r1,16
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    1968:	00 c8 00 10 	srui r8,r6,16

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    196c:	20 c9 ff ff 	andi r9,r6,0xffff
    1970:	20 23 ff ff 	andi r3,r1,0xffff
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    1974:	89 25 38 00 	mul r7,r9,r5
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    1978:	89 03 10 00 	mul r2,r8,r3

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    197c:	89 23 18 00 	mul r3,r9,r3
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    1980:	89 05 40 00 	mul r8,r8,r5
    zMiddleA += zMiddleB;
    1984:	b4 47 10 00 	add r2,r2,r7
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    zMiddleA <<= 16;
    1988:	3c 45 00 10 	sli r5,r2,16
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    198c:	f4 e2 38 00 	cmpgu r7,r7,r2
    zMiddleA <<= 16;
    z1 += zMiddleA;
    1990:	b4 a3 18 00 	add r3,r5,r3
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1994:	00 42 00 10 	srui r2,r2,16
    zMiddleA <<= 16;
    z1 += zMiddleA;
    z0 += ( z1 < zMiddleA );
    1998:	f4 a3 48 00 	cmpgu r9,r5,r3
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    199c:	3c e7 00 10 	sli r7,r7,16
    19a0:	b4 48 28 00 	add r5,r2,r8
    mul32To64( aSig, bSig, &zSig0, &zSig1 );
    zSig0 |= ( zSig1 != 0 );
    19a4:	7c 63 00 00 	cmpnei r3,r3,0
    19a8:	b4 a9 28 00 	add r5,r5,r9
    zMiddleA <<= 16;
    z1 += zMiddleA;
    z0 += ( z1 < zMiddleA );
    19ac:	b4 a7 28 00 	add r5,r5,r7
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    zExp = aExp + bExp - 0x7F;
    19b0:	2b 82 00 18 	lw r2,(sp+24)
    aSig = ( aSig | 0x00800000 )<<7;
    bSig = ( bSig | 0x00800000 )<<8;
    mul32To64( aSig, bSig, &zSig0, &zSig1 );
    zSig0 |= ( zSig1 != 0 );
    19b4:	b8 a3 28 00 	or r5,r5,r3
    if ( 0 <= (sbits32) ( zSig0<<1 ) ) {
    19b8:	3c a3 00 01 	sli r3,r5,1
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    zExp = aExp + bExp - 0x7F;
    19bc:	34 42 ff 81 	addi r2,r2,-127
    aSig = ( aSig | 0x00800000 )<<7;
    19c0:	5b 81 00 10 	sw (sp+16),r1
    bSig = ( bSig | 0x00800000 )<<8;
    19c4:	5b 86 00 0c 	sw (sp+12),r6
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    zExp = aExp + bExp - 0x7F;
    19c8:	b4 44 10 00 	add r2,r2,r4
    aSig = ( aSig | 0x00800000 )<<7;
    bSig = ( bSig | 0x00800000 )<<8;
    mul32To64( aSig, bSig, &zSig0, &zSig1 );
    zSig0 |= ( zSig1 != 0 );
    if ( 0 <= (sbits32) ( zSig0<<1 ) ) {
    19cc:	48 03 00 27 	bg r0,r3,1a68 <float32_mul+0x1cc>
        zSig0 <<= 1;
        --zExp;
    19d0:	34 42 ff ff 	addi r2,r2,-1
    }
    return roundAndPackFloat32( zSign, zExp, zSig0 );
    19d4:	b9 60 08 00 	mv r1,r11
    19d8:	fb ff fd 06 	calli df0 <roundAndPackFloat32>

}
    19dc:	2b 9d 00 04 	lw ra,(sp+4)
    19e0:	2b 8b 00 08 	lw r11,(sp+8)
    19e4:	37 9c 00 18 	addi sp,sp,24
    19e8:	c3 a0 00 00 	ret
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
        if ( aSig || ( ( bExp == 0xFF ) && bSig ) ) {
    19ec:	5d 00 00 18 	bne r8,r0,1a4c <float32_mul+0x1b0>
    19f0:	64 82 00 ff 	cmpei r2,r4,255
    19f4:	7c c1 00 00 	cmpnei r1,r6,0
    19f8:	a0 41 08 00 	and r1,r2,r1
    19fc:	5c 28 00 14 	bne r1,r8,1a4c <float32_mul+0x1b0>
            return propagateFloat32NaN( a, b );
        }
        if ( ( bExp | bSig ) == 0 ) {
    1a00:	b8 86 20 00 	or r4,r4,r6
    1a04:	44 81 00 08 	be r4,r1,1a24 <float32_mul+0x188>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1a08:	3d 61 00 1f 	sli r1,r11,31
    1a0c:	78 02 7f 80 	mvhi r2,0x7f80
    1a10:	b4 22 08 00 	add r1,r1,r2
        if ( bSig ) return propagateFloat32NaN( a, b );
        if ( ( aExp | aSig ) == 0 ) {
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    1a14:	e3 ff ff bc 	bi 1904 <float32_mul+0x68>
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    1a18:	5c c0 00 16 	bne r6,r0,1a70 <float32_mul+0x1d4>
        if ( ( aExp | aSig ) == 0 ) {
    1a1c:	b8 e8 38 00 	or r7,r7,r8
    1a20:	5c e6 ff fa 	bne r7,r6,1a08 <float32_mul+0x16c>
    1a24:	78 02 00 00 	mvhi r2,0x0
    1a28:	38 42 2c a8 	ori r2,r2,0x2ca8
    1a2c:	28 43 00 00 	lw r3,(r2+0)
            float_raise( float_flag_invalid );
            return float32_default_nan;
    1a30:	34 01 ff ff 	mvi r1,-1
    1a34:	38 63 00 10 	ori r3,r3,0x10
    1a38:	58 43 00 00 	sw (r2+0),r3
        zSig0 <<= 1;
        --zExp;
    }
    return roundAndPackFloat32( zSign, zExp, zSig0 );

}
    1a3c:	2b 9d 00 04 	lw ra,(sp+4)
    1a40:	2b 8b 00 08 	lw r11,(sp+8)
    1a44:	37 9c 00 18 	addi sp,sp,24
    1a48:	c3 a0 00 00 	ret
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
        if ( aSig || ( ( bExp == 0xFF ) && bSig ) ) {
            return propagateFloat32NaN( a, b );
    1a4c:	b8 a0 08 00 	mv r1,r5
    1a50:	b8 60 10 00 	mv r2,r3
    1a54:	fb ff fc a2 	calli cdc <propagateFloat32NaN>
        zSig0 <<= 1;
        --zExp;
    }
    return roundAndPackFloat32( zSign, zExp, zSig0 );

}
    1a58:	2b 9d 00 04 	lw ra,(sp+4)
    1a5c:	2b 8b 00 08 	lw r11,(sp+8)
    1a60:	37 9c 00 18 	addi sp,sp,24
    1a64:	c3 a0 00 00 	ret
    }
    zExp = aExp + bExp - 0x7F;
    aSig = ( aSig | 0x00800000 )<<7;
    bSig = ( bSig | 0x00800000 )<<8;
    mul32To64( aSig, bSig, &zSig0, &zSig1 );
    zSig0 |= ( zSig1 != 0 );
    1a68:	b8 a0 18 00 	mv r3,r5
    1a6c:	e3 ff ff da 	bi 19d4 <float32_mul+0x138>
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    1a70:	fb ff fc 9b 	calli cdc <propagateFloat32NaN>
    1a74:	e3 ff ff a4 	bi 1904 <float32_mul+0x68>

00001a78 <float32_div>:
by the corresponding value `b'.  The operation is performed according to
the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_div( float32 a, float32 b )
{
    1a78:	37 9c ff dc 	addi sp,sp,-36
    1a7c:	5b 8b 00 14 	sw (sp+20),r11
    1a80:	5b 8c 00 10 	sw (sp+16),r12
    1a84:	5b 8d 00 0c 	sw (sp+12),r13
    1a88:	5b 8e 00 08 	sw (sp+8),r14
    1a8c:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1a90:	78 03 00 00 	mvhi r3,0x0
    1a94:	38 63 28 24 	ori r3,r3,0x2824
    1a98:	28 68 00 00 	lw r8,(r3+0)
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1a9c:	00 47 00 17 	srui r7,r2,23
    1aa0:	00 23 00 17 	srui r3,r1,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1aa4:	a0 28 30 00 	and r6,r1,r8
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1aa8:	20 63 00 ff 	andi r3,r3,0xff
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1aac:	a0 48 40 00 	and r8,r2,r8
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1ab0:	20 e7 00 ff 	andi r7,r7,0xff
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    1ab4:	98 22 20 00 	xor r4,r1,r2
    int16 aExp, bExp, zExp;
    bits32 aSig, bSig, zSig;
    bits32 rem0, rem1;
    bits32 term0, term1;

    aSig = extractFloat32Frac( a );
    1ab8:	5b 86 00 1c 	sw (sp+28),r6
    aExp = extractFloat32Exp( a );
    1abc:	5b 83 00 24 	sw (sp+36),r3
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    1ac0:	5b 88 00 18 	sw (sp+24),r8
    bExp = extractFloat32Exp( b );
    1ac4:	5b 87 00 20 	sw (sp+32),r7
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
    1ac8:	34 09 00 ff 	mvi r9,255
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    1acc:	00 8c 00 1f 	srui r12,r4,31
    if ( aExp == 0xFF ) {
    1ad0:	44 69 00 6d 	be r3,r9,1c84 <float32_div+0x20c>
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
    1ad4:	44 e9 00 79 	be r7,r9,1cb8 <float32_div+0x240>
        if ( bSig ) return propagateFloat32NaN( a, b );
        return packFloat32( zSign, 0, 0 );
    }
    if ( bExp == 0 ) {
    1ad8:	5c e0 00 18 	bne r7,r0,1b38 <float32_div+0xc0>
        if ( bSig == 0 ) {
    1adc:	5d 07 00 11 	bne r8,r7,1b20 <float32_div+0xa8>
            if ( ( aExp | aSig ) == 0 ) {
    1ae0:	b8 66 18 00 	or r3,r3,r6
    1ae4:	5c 68 00 85 	bne r3,r8,1cf8 <float32_div+0x280>
    1ae8:	78 01 00 00 	mvhi r1,0x0
    1aec:	38 21 2c a8 	ori r1,r1,0x2ca8
    1af0:	28 22 00 00 	lw r2,(r1+0)
                float_raise( float_flag_invalid );
                return float32_default_nan;
    1af4:	34 03 ff ff 	mvi r3,-1
    1af8:	38 42 00 10 	ori r2,r2,0x10
    1afc:	58 22 00 00 	sw (r1+0),r2
        }
        zSig |= ( rem1 != 0 );
    }
    return roundAndPackFloat32( zSign, zExp, zSig );

}
    1b00:	b8 60 08 00 	mv r1,r3
    1b04:	2b 9d 00 04 	lw ra,(sp+4)
    1b08:	2b 8b 00 14 	lw r11,(sp+20)
    1b0c:	2b 8c 00 10 	lw r12,(sp+16)
    1b10:	2b 8d 00 0c 	lw r13,(sp+12)
    1b14:	2b 8e 00 08 	lw r14,(sp+8)
    1b18:	37 9c 00 24 	addi sp,sp,36
    1b1c:	c3 a0 00 00 	ret
                return float32_default_nan;
            }
            float_raise( float_flag_divbyzero );
            return packFloat32( zSign, 0xFF, 0 );
        }
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    1b20:	37 83 00 18 	addi r3,sp,24
    1b24:	b9 00 08 00 	mv r1,r8
    1b28:	37 82 00 20 	addi r2,sp,32
    1b2c:	fb ff fc 97 	calli d88 <normalizeFloat32Subnormal>
    1b30:	2b 83 00 24 	lw r3,(sp+36)
    1b34:	2b 86 00 1c 	lw r6,(sp+28)
    }
    if ( aExp == 0 ) {
    1b38:	5c 60 00 11 	bne r3,r0,1b7c <float32_div+0x104>
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
    1b3c:	5c c3 00 0a 	bne r6,r3,1b64 <float32_div+0xec>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1b40:	3d 83 00 1f 	sli r3,r12,31
        }
        zSig |= ( rem1 != 0 );
    }
    return roundAndPackFloat32( zSign, zExp, zSig );

}
    1b44:	b8 60 08 00 	mv r1,r3
    1b48:	2b 9d 00 04 	lw ra,(sp+4)
    1b4c:	2b 8b 00 14 	lw r11,(sp+20)
    1b50:	2b 8c 00 10 	lw r12,(sp+16)
    1b54:	2b 8d 00 0c 	lw r13,(sp+12)
    1b58:	2b 8e 00 08 	lw r14,(sp+8)
    1b5c:	37 9c 00 24 	addi sp,sp,36
    1b60:	c3 a0 00 00 	ret
        }
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    1b64:	b8 c0 08 00 	mv r1,r6
    1b68:	37 83 00 1c 	addi r3,sp,28
    1b6c:	37 82 00 24 	addi r2,sp,36
    1b70:	fb ff fc 86 	calli d88 <normalizeFloat32Subnormal>
    1b74:	2b 83 00 24 	lw r3,(sp+36)
    1b78:	2b 86 00 1c 	lw r6,(sp+28)
    }
    zExp = aExp - bExp + 0x7D;
    aSig = ( aSig | 0x00800000 )<<7;
    bSig = ( bSig | 0x00800000 )<<8;
    1b7c:	2b 8b 00 18 	lw r11,(sp+24)
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = aExp - bExp + 0x7D;
    aSig = ( aSig | 0x00800000 )<<7;
    1b80:	78 01 00 80 	mvhi r1,0x80
    1b84:	b8 c1 30 00 	or r6,r6,r1
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = aExp - bExp + 0x7D;
    1b88:	2b 8e 00 20 	lw r14,(sp+32)
    aSig = ( aSig | 0x00800000 )<<7;
    bSig = ( bSig | 0x00800000 )<<8;
    1b8c:	b9 61 58 00 	or r11,r11,r1
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = aExp - bExp + 0x7D;
    aSig = ( aSig | 0x00800000 )<<7;
    1b90:	3c cd 00 07 	sli r13,r6,7
    bSig = ( bSig | 0x00800000 )<<8;
    1b94:	3d 6b 00 08 	sli r11,r11,8
    if ( bSig <= ( aSig + aSig ) ) {
    1b98:	3c c6 00 08 	sli r6,r6,8
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = aExp - bExp + 0x7D;
    1b9c:	c8 6e 18 00 	sub r3,r3,r14
    aSig = ( aSig | 0x00800000 )<<7;
    1ba0:	5b 8d 00 1c 	sw (sp+28),r13
    bSig = ( bSig | 0x00800000 )<<8;
    1ba4:	5b 8b 00 18 	sw (sp+24),r11
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = aExp - bExp + 0x7D;
    1ba8:	34 6e 00 7d 	addi r14,r3,125
    aSig = ( aSig | 0x00800000 )<<7;
    bSig = ( bSig | 0x00800000 )<<8;
    if ( bSig <= ( aSig + aSig ) ) {
    1bac:	55 66 00 04 	bgu r11,r6,1bbc <float32_div+0x144>
        aSig >>= 1;
    1bb0:	01 ad 00 01 	srui r13,r13,1
        ++zExp;
    1bb4:	35 ce 00 01 	addi r14,r14,1
    }
    zExp = aExp - bExp + 0x7D;
    aSig = ( aSig | 0x00800000 )<<7;
    bSig = ( bSig | 0x00800000 )<<8;
    if ( bSig <= ( aSig + aSig ) ) {
        aSig >>= 1;
    1bb8:	5b 8d 00 1c 	sw (sp+28),r13
        ++zExp;
    }
    zSig = estimateDiv64To32( aSig, 0, bSig );
    1bbc:	b9 60 10 00 	mv r2,r11
    1bc0:	b9 a0 08 00 	mv r1,r13
    1bc4:	fb ff fd d2 	calli 130c <estimateDiv64To32.clone.0>
    1bc8:	b8 20 18 00 	mv r3,r1
    if ( ( zSig & 0x3F ) <= 2 ) {
    1bcc:	20 22 00 3f 	andi r2,r1,0x3f
    1bd0:	34 01 00 02 	mvi r1,2
    1bd4:	54 41 00 20 	bgu r2,r1,1c54 <float32_div+0x1dc>
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    1bd8:	01 62 00 10 	srui r2,r11,16
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    1bdc:	00 64 00 10 	srui r4,r3,16

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    1be0:	21 65 ff ff 	andi r5,r11,0xffff
    1be4:	20 68 ff ff 	andi r8,r3,0xffff
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    1be8:	89 02 30 00 	mul r6,r8,r2
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    1bec:	88 85 08 00 	mul r1,r4,r5

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    1bf0:	89 05 40 00 	mul r8,r8,r5
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    1bf4:	88 82 20 00 	mul r4,r4,r2
    zMiddleA += zMiddleB;
    1bf8:	b4 26 08 00 	add r1,r1,r6
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    zMiddleA <<= 16;
    1bfc:	3c 22 00 10 	sli r2,r1,16
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1c00:	00 27 00 10 	srui r7,r1,16
    zMiddleA <<= 16;
    z1 += zMiddleA;
    1c04:	b4 48 40 00 	add r8,r2,r8
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1c08:	f4 c1 08 00 	cmpgu r1,r6,r1
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    1c0c:	7d 05 00 00 	cmpnei r5,r8,0
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1c10:	c9 a4 68 00 	sub r13,r13,r4
    1c14:	c9 a7 68 00 	sub r13,r13,r7
    zMiddleA <<= 16;
    z1 += zMiddleA;
    z0 += ( z1 < zMiddleA );
    1c18:	f4 48 10 00 	cmpgu r2,r2,r8
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1c1c:	3c 21 00 10 	sli r1,r1,16
    zMiddleA <<= 16;
    z1 += zMiddleA;
    z0 += ( z1 < zMiddleA );
    1c20:	c9 a5 30 00 	sub r6,r13,r5
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    1c24:	c8 c2 30 00 	sub r6,r6,r2
INLINE void
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    1c28:	c8 08 40 00 	sub r8,r0,r8
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    1c2c:	c8 c1 30 00 	sub r6,r6,r1
INLINE void
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    1c30:	b9 00 38 00 	mv r7,r8
        mul32To64( bSig, zSig, &term0, &term1 );
        sub64( aSig, 0, term0, term1, &rem0, &rem1 );
        while ( (sbits32) rem0 < 0 ) {
    1c34:	4c c0 00 06 	bge r6,r0,1c4c <float32_div+0x1d4>
 add64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{
    bits32 z1;

    z1 = a1 + b1;
    1c38:	b5 0b 38 00 	add r7,r8,r11
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
    1c3c:	f5 07 40 00 	cmpgu r8,r8,r7
            --zSig;
    1c40:	34 63 ff ff 	addi r3,r3,-1
    1c44:	b4 c8 30 00 	add r6,r6,r8
    }
    zSig = estimateDiv64To32( aSig, 0, bSig );
    if ( ( zSig & 0x3F ) <= 2 ) {
        mul32To64( bSig, zSig, &term0, &term1 );
        sub64( aSig, 0, term0, term1, &rem0, &rem1 );
        while ( (sbits32) rem0 < 0 ) {
    1c48:	48 06 00 28 	bg r0,r6,1ce8 <float32_div+0x270>
            --zSig;
            add64( rem0, rem1, 0, bSig, &rem0, &rem1 );
        }
        zSig |= ( rem1 != 0 );
    1c4c:	7c e7 00 00 	cmpnei r7,r7,0
    1c50:	b8 67 18 00 	or r3,r3,r7
    }
    return roundAndPackFloat32( zSign, zExp, zSig );
    1c54:	b9 80 08 00 	mv r1,r12
    1c58:	b9 c0 10 00 	mv r2,r14
    1c5c:	fb ff fc 65 	calli df0 <roundAndPackFloat32>
    1c60:	b8 20 18 00 	mv r3,r1

}
    1c64:	b8 60 08 00 	mv r1,r3
    1c68:	2b 9d 00 04 	lw ra,(sp+4)
    1c6c:	2b 8b 00 14 	lw r11,(sp+20)
    1c70:	2b 8c 00 10 	lw r12,(sp+16)
    1c74:	2b 8d 00 0c 	lw r13,(sp+12)
    1c78:	2b 8e 00 08 	lw r14,(sp+8)
    1c7c:	37 9c 00 24 	addi sp,sp,36
    1c80:	c3 a0 00 00 	ret
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, b );
    1c84:	5c c0 00 0f 	bne r6,r0,1cc0 <float32_div+0x248>
        if ( bExp == 0xFF ) {
    1c88:	44 e3 00 1a 	be r7,r3,1cf0 <float32_div+0x278>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1c8c:	3d 83 00 1f 	sli r3,r12,31
    1c90:	78 01 7f 80 	mvhi r1,0x7f80
    1c94:	b4 61 18 00 	add r3,r3,r1
        }
        zSig |= ( rem1 != 0 );
    }
    return roundAndPackFloat32( zSign, zExp, zSig );

}
    1c98:	b8 60 08 00 	mv r1,r3
    1c9c:	2b 9d 00 04 	lw ra,(sp+4)
    1ca0:	2b 8b 00 14 	lw r11,(sp+20)
    1ca4:	2b 8c 00 10 	lw r12,(sp+16)
    1ca8:	2b 8d 00 0c 	lw r13,(sp+12)
    1cac:	2b 8e 00 08 	lw r14,(sp+8)
    1cb0:	37 9c 00 24 	addi sp,sp,36
    1cb4:	c3 a0 00 00 	ret
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1cb8:	3d 83 00 1f 	sli r3,r12,31
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    1cbc:	45 00 ff ea 	be r8,r0,1c64 <float32_div+0x1ec>
    1cc0:	fb ff fc 07 	calli cdc <propagateFloat32NaN>
    1cc4:	b8 20 18 00 	mv r3,r1
        }
        zSig |= ( rem1 != 0 );
    }
    return roundAndPackFloat32( zSign, zExp, zSig );

}
    1cc8:	b8 60 08 00 	mv r1,r3
    1ccc:	2b 9d 00 04 	lw ra,(sp+4)
    1cd0:	2b 8b 00 14 	lw r11,(sp+20)
    1cd4:	2b 8c 00 10 	lw r12,(sp+16)
    1cd8:	2b 8d 00 0c 	lw r13,(sp+12)
    1cdc:	2b 8e 00 08 	lw r14,(sp+8)
    1ce0:	37 9c 00 24 	addi sp,sp,36
    1ce4:	c3 a0 00 00 	ret
 add64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{
    bits32 z1;

    z1 = a1 + b1;
    1ce8:	b8 e0 40 00 	mv r8,r7
    1cec:	e3 ff ff d3 	bi 1c38 <float32_div+0x1c0>
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, b );
        if ( bExp == 0xFF ) {
            if ( bSig ) return propagateFloat32NaN( a, b );
    1cf0:	45 00 ff 7e 	be r8,r0,1ae8 <float32_div+0x70>
    1cf4:	e3 ff ff f3 	bi 1cc0 <float32_div+0x248>
    1cf8:	78 01 00 00 	mvhi r1,0x0
    1cfc:	38 21 2c a8 	ori r1,r1,0x2ca8
    1d00:	28 22 00 00 	lw r2,(r1+0)
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1d04:	3d 83 00 1f 	sli r3,r12,31
    1d08:	38 42 00 02 	ori r2,r2,0x2
    1d0c:	58 22 00 00 	sw (r1+0),r2
    1d10:	78 01 7f 80 	mvhi r1,0x7f80
    1d14:	b4 61 18 00 	add r3,r3,r1
            if ( ( aExp | aSig ) == 0 ) {
                float_raise( float_flag_invalid );
                return float32_default_nan;
            }
            float_raise( float_flag_divbyzero );
            return packFloat32( zSign, 0xFF, 0 );
    1d18:	e3 ff ff d3 	bi 1c64 <float32_div+0x1ec>

00001d1c <float32_rem>:
with respect to the corresponding value `b'.  The operation is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_rem( float32 a, float32 b )
{
    1d1c:	37 9c ff d0 	addi sp,sp,-48
    1d20:	5b 8b 00 20 	sw (sp+32),r11
    1d24:	5b 8c 00 1c 	sw (sp+28),r12
    1d28:	5b 8d 00 18 	sw (sp+24),r13
    1d2c:	5b 8e 00 14 	sw (sp+20),r14
    1d30:	5b 8f 00 10 	sw (sp+16),r15
    1d34:	5b 90 00 0c 	sw (sp+12),r16
    1d38:	5b 91 00 08 	sw (sp+8),r17
    1d3c:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1d40:	78 04 00 00 	mvhi r4,0x0
    1d44:	38 84 28 24 	ori r4,r4,0x2824
    1d48:	28 85 00 00 	lw r5,(r4+0)
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1d4c:	00 2d 00 17 	srui r13,r1,23
    1d50:	00 44 00 17 	srui r4,r2,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1d54:	a0 25 58 00 	and r11,r1,r5
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1d58:	21 ad 00 ff 	andi r13,r13,0xff
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1d5c:	a0 45 28 00 	and r5,r2,r5
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1d60:	20 84 00 ff 	andi r4,r4,0xff
    int16 aExp, bExp, expDiff;
    bits32 aSig, bSig;
    bits32 q, alternateASig;
    sbits32 sigMean;

    aSig = extractFloat32Frac( a );
    1d64:	5b 8b 00 28 	sw (sp+40),r11
    aExp = extractFloat32Exp( a );
    1d68:	5b 8d 00 30 	sw (sp+48),r13
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    1d6c:	5b 85 00 24 	sw (sp+36),r5
    bExp = extractFloat32Exp( b );
    1d70:	5b 84 00 2c 	sw (sp+44),r4
    bSign = extractFloat32Sign( b );
    if ( aExp == 0xFF ) {
    1d74:	34 06 00 ff 	mvi r6,255
with respect to the corresponding value `b'.  The operation is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_rem( float32 a, float32 b )
{
    1d78:	b8 20 60 00 	mv r12,r1
    1d7c:	b8 40 18 00 	mv r3,r2
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    if ( aExp == 0xFF ) {
    1d80:	45 a6 00 60 	be r13,r6,1f00 <float32_rem+0x1e4>
            return propagateFloat32NaN( a, b );
        }
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( bExp == 0xFF ) {
    1d84:	44 86 00 69 	be r4,r6,1f28 <float32_rem+0x20c>
        if ( bSig ) return propagateFloat32NaN( a, b );
        return a;
    }
    if ( bExp == 0 ) {
    1d88:	5c 80 00 19 	bne r4,r0,1dec <float32_rem+0xd0>
        if ( bSig == 0 ) {
    1d8c:	5c a4 00 12 	bne r5,r4,1dd4 <float32_rem+0xb8>
    1d90:	78 01 00 00 	mvhi r1,0x0
    1d94:	38 21 2c a8 	ori r1,r1,0x2ca8
    1d98:	28 22 00 00 	lw r2,(r1+0)
            float_raise( float_flag_invalid );
            return float32_default_nan;
    1d9c:	34 0c ff ff 	mvi r12,-1
    1da0:	38 42 00 10 	ori r2,r2,0x10
    1da4:	58 22 00 00 	sw (r1+0),r2
    }
    zSign = ( (sbits32) aSig < 0 );
    if ( zSign ) aSig = - aSig;
    return normalizeRoundAndPackFloat32( aSign ^ zSign, bExp, aSig );

}
    1da8:	b9 80 08 00 	mv r1,r12
    1dac:	2b 9d 00 04 	lw ra,(sp+4)
    1db0:	2b 8b 00 20 	lw r11,(sp+32)
    1db4:	2b 8c 00 1c 	lw r12,(sp+28)
    1db8:	2b 8d 00 18 	lw r13,(sp+24)
    1dbc:	2b 8e 00 14 	lw r14,(sp+20)
    1dc0:	2b 8f 00 10 	lw r15,(sp+16)
    1dc4:	2b 90 00 0c 	lw r16,(sp+12)
    1dc8:	2b 91 00 08 	lw r17,(sp+8)
    1dcc:	37 9c 00 30 	addi sp,sp,48
    1dd0:	c3 a0 00 00 	ret
    if ( bExp == 0 ) {
        if ( bSig == 0 ) {
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    1dd4:	b8 a0 08 00 	mv r1,r5
    1dd8:	37 82 00 2c 	addi r2,sp,44
    1ddc:	37 83 00 24 	addi r3,sp,36
    1de0:	fb ff fb ea 	calli d88 <normalizeFloat32Subnormal>
    1de4:	2b 8d 00 30 	lw r13,(sp+48)
    1de8:	2b 8b 00 28 	lw r11,(sp+40)
    }
    if ( aExp == 0 ) {
    1dec:	5d a0 00 08 	bne r13,r0,1e0c <float32_rem+0xf0>
        if ( aSig == 0 ) return a;
    1df0:	45 6d ff ee 	be r11,r13,1da8 <float32_rem+0x8c>
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    1df4:	b9 60 08 00 	mv r1,r11
    1df8:	37 82 00 30 	addi r2,sp,48
    1dfc:	37 83 00 28 	addi r3,sp,40
    1e00:	fb ff fb e2 	calli d88 <normalizeFloat32Subnormal>
    1e04:	2b 8d 00 30 	lw r13,(sp+48)
    1e08:	2b 8b 00 28 	lw r11,(sp+40)
    }
    expDiff = aExp - bExp;
    1e0c:	2b 91 00 2c 	lw r17,(sp+44)
    aSig = ( aSig | 0x00800000 )<<8;
    bSig = ( bSig | 0x00800000 )<<8;
    1e10:	2b 8f 00 24 	lw r15,(sp+36)
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return a;
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    expDiff = aExp - bExp;
    aSig = ( aSig | 0x00800000 )<<8;
    1e14:	78 01 00 80 	mvhi r1,0x80
    1e18:	b9 61 58 00 	or r11,r11,r1
    bSig = ( bSig | 0x00800000 )<<8;
    1e1c:	b9 e1 78 00 	or r15,r15,r1
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return a;
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    expDiff = aExp - bExp;
    1e20:	c9 b1 68 00 	sub r13,r13,r17
    aSig = ( aSig | 0x00800000 )<<8;
    1e24:	3d 6b 00 08 	sli r11,r11,8
    bSig = ( bSig | 0x00800000 )<<8;
    1e28:	3d ef 00 08 	sli r15,r15,8
    if ( expDiff < 0 ) {
    1e2c:	4d a0 00 04 	bge r13,r0,1e3c <float32_rem+0x120>
        if ( expDiff < -1 ) return a;
    1e30:	34 01 ff ff 	mvi r1,-1
    1e34:	5d a1 ff dd 	bne r13,r1,1da8 <float32_rem+0x8c>
        aSig >>= 1;
    1e38:	01 6b 00 01 	srui r11,r11,1
    }
    q = ( bSig <= aSig );
    1e3c:	f1 6f 20 00 	cmpgeu r4,r11,r15
    if ( q ) aSig -= bSig;
    1e40:	44 80 00 02 	be r4,r0,1e48 <float32_rem+0x12c>
    1e44:	c9 6f 58 00 	sub r11,r11,r15
    expDiff -= 32;
    1e48:	35 ad ff e0 	addi r13,r13,-32
    while ( 0 < expDiff ) {
    1e4c:	01 ee 00 02 	srui r14,r15,2
        q = estimateDiv64To32( aSig, 0, bSig );
        q = ( 2 < q ) ? q - 2 : 0;
    1e50:	34 10 00 02 	mvi r16,2
        aSig >>= 1;
    }
    q = ( bSig <= aSig );
    if ( q ) aSig -= bSig;
    expDiff -= 32;
    while ( 0 < expDiff ) {
    1e54:	49 a0 00 39 	bg r13,r0,1f38 <float32_rem+0x21c>
        q = estimateDiv64To32( aSig, 0, bSig );
        q = ( 2 < q ) ? q - 2 : 0;
        aSig = - ( ( bSig>>2 ) * q );
        expDiff -= 30;
    }
    expDiff += 32;
    1e58:	35 ad 00 20 	addi r13,r13,32
    if ( 0 < expDiff ) {
    1e5c:	4c 0d 00 49 	bge r0,r13,1f80 <float32_rem+0x264>
        q = estimateDiv64To32( aSig, 0, bSig );
    1e60:	b9 e0 10 00 	mv r2,r15
    1e64:	b9 60 08 00 	mv r1,r11
    1e68:	fb ff fd 29 	calli 130c <estimateDiv64To32.clone.0>
        q = ( 2 < q ) ? q - 2 : 0;
    1e6c:	34 03 00 02 	mvi r3,2
    1e70:	34 02 00 00 	mvi r2,0
    1e74:	34 04 00 00 	mvi r4,0
    1e78:	50 61 00 05 	bgeu r3,r1,1e8c <float32_rem+0x170>
    1e7c:	c8 0d 10 00 	sub r2,r0,r13
    1e80:	34 21 ff fe 	addi r1,r1,-2
    1e84:	80 22 20 00 	sru r4,r1,r2
    1e88:	88 8e 10 00 	mul r2,r4,r14
        q >>= 32 - expDiff;
        bSig >>= 2;
        aSig = ( ( aSig>>1 )<<( expDiff - 1 ) ) - bSig * q;
    1e8c:	01 63 00 01 	srui r3,r11,1
    1e90:	35 ad ff ff 	addi r13,r13,-1
    1e94:	bc 6d 18 00 	sl r3,r3,r13
    expDiff += 32;
    if ( 0 < expDiff ) {
        q = estimateDiv64To32( aSig, 0, bSig );
        q = ( 2 < q ) ? q - 2 : 0;
        q >>= 32 - expDiff;
        bSig >>= 2;
    1e98:	5b 8e 00 24 	sw (sp+36),r14
        aSig = ( ( aSig>>1 )<<( expDiff - 1 ) ) - bSig * q;
    1e9c:	c8 62 18 00 	sub r3,r3,r2
Returns the remainder of the single-precision floating-point value `a'
with respect to the corresponding value `b'.  The operation is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_rem( float32 a, float32 b )
    1ea0:	c8 0e 40 00 	sub r8,r0,r14
    1ea4:	c8 6e 18 00 	sub r3,r3,r14
        aSig >>= 2;
        bSig >>= 2;
    }
    do {
        alternateASig = aSig;
        ++q;
    1ea8:	b4 68 08 00 	add r1,r3,r8
Returns the remainder of the single-precision floating-point value `a'
with respect to the corresponding value `b'.  The operation is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_rem( float32 a, float32 b )
    1eac:	b4 2e 28 00 	add r5,r1,r14
    1eb0:	b4 6e 38 00 	add r7,r3,r14
        aSig >>= 2;
        bSig >>= 2;
    }
    do {
        alternateASig = aSig;
        ++q;
    1eb4:	b8 60 30 00 	mv r6,r3
    1eb8:	34 84 00 01 	addi r4,r4,1
        aSig -= bSig;
    } while ( 0 <= (sbits32) aSig );
    1ebc:	4c a0 00 2f 	bge r5,r0,1f78 <float32_rem+0x25c>
    1ec0:	5b 83 00 28 	sw (sp+40),r3
    sigMean = aSig + alternateASig;
    1ec4:	b4 e3 08 00 	add r1,r7,r3
    if ( ( sigMean < 0 ) || ( ( sigMean == 0 ) && ( q & 1 ) ) ) {
    1ec8:	48 01 00 28 	bg r0,r1,1f68 <float32_rem+0x24c>
    1ecc:	5c 20 00 03 	bne r1,r0,1ed8 <float32_rem+0x1bc>
    1ed0:	20 84 00 01 	andi r4,r4,0x1
    1ed4:	5c 81 00 25 	bne r4,r1,1f68 <float32_rem+0x24c>
        aSig = alternateASig;
    }
    zSign = ( (sbits32) aSig < 0 );
    1ed8:	00 c6 00 1f 	srui r6,r6,31
    if ( zSign ) aSig = - aSig;
    1edc:	44 c0 00 03 	be r6,r0,1ee8 <float32_rem+0x1cc>
    1ee0:	c8 03 18 00 	sub r3,r0,r3
    1ee4:	5b 83 00 28 	sw (sp+40),r3
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    1ee8:	01 81 00 1f 	srui r1,r12,31
    if ( ( sigMean < 0 ) || ( ( sigMean == 0 ) && ( q & 1 ) ) ) {
        aSig = alternateASig;
    }
    zSign = ( (sbits32) aSig < 0 );
    if ( zSign ) aSig = - aSig;
    return normalizeRoundAndPackFloat32( aSign ^ zSign, bExp, aSig );
    1eec:	ba 20 10 00 	mv r2,r17
    1ef0:	98 c1 08 00 	xor r1,r6,r1
    1ef4:	fb ff fc 24 	calli f84 <normalizeRoundAndPackFloat32>
    1ef8:	b8 20 60 00 	mv r12,r1
    1efc:	e3 ff ff ab 	bi 1da8 <float32_rem+0x8c>
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    if ( aExp == 0xFF ) {
        if ( aSig || ( ( bExp == 0xFF ) && bSig ) ) {
    1f00:	5d 60 00 05 	bne r11,r0,1f14 <float32_rem+0x1f8>
    1f04:	64 84 00 ff 	cmpei r4,r4,255
    1f08:	7c a5 00 00 	cmpnei r5,r5,0
    1f0c:	a0 85 20 00 	and r4,r4,r5
    1f10:	44 8b ff a0 	be r4,r11,1d90 <float32_rem+0x74>
            return propagateFloat32NaN( a, b );
    1f14:	b9 80 08 00 	mv r1,r12
    1f18:	b8 60 10 00 	mv r2,r3
    1f1c:	fb ff fb 70 	calli cdc <propagateFloat32NaN>
    1f20:	b8 20 60 00 	mv r12,r1
    1f24:	e3 ff ff a1 	bi 1da8 <float32_rem+0x8c>
        }
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    1f28:	44 a0 ff a0 	be r5,r0,1da8 <float32_rem+0x8c>
    1f2c:	fb ff fb 6c 	calli cdc <propagateFloat32NaN>
    1f30:	b8 20 60 00 	mv r12,r1
    1f34:	e3 ff ff 9d 	bi 1da8 <float32_rem+0x8c>
    }
    q = ( bSig <= aSig );
    if ( q ) aSig -= bSig;
    expDiff -= 32;
    while ( 0 < expDiff ) {
        q = estimateDiv64To32( aSig, 0, bSig );
    1f38:	b9 60 08 00 	mv r1,r11
    1f3c:	b9 e0 10 00 	mv r2,r15
    1f40:	fb ff fc f3 	calli 130c <estimateDiv64To32.clone.0>
        q = ( 2 < q ) ? q - 2 : 0;
        aSig = - ( ( bSig>>2 ) * q );
        expDiff -= 30;
    1f44:	35 ad ff e2 	addi r13,r13,-30
    q = ( bSig <= aSig );
    if ( q ) aSig -= bSig;
    expDiff -= 32;
    while ( 0 < expDiff ) {
        q = estimateDiv64To32( aSig, 0, bSig );
        q = ( 2 < q ) ? q - 2 : 0;
    1f48:	34 0b 00 00 	mvi r11,0
    1f4c:	34 04 00 00 	mvi r4,0
    1f50:	52 01 00 04 	bgeu r16,r1,1f60 <float32_rem+0x244>
    1f54:	34 24 ff fe 	addi r4,r1,-2
    1f58:	88 8e 58 00 	mul r11,r4,r14
    1f5c:	c8 0b 58 00 	sub r11,r0,r11
        aSig >>= 1;
    }
    q = ( bSig <= aSig );
    if ( q ) aSig -= bSig;
    expDiff -= 32;
    while ( 0 < expDiff ) {
    1f60:	49 a0 ff f6 	bg r13,r0,1f38 <float32_rem+0x21c>
    1f64:	e3 ff ff bd 	bi 1e58 <float32_rem+0x13c>
        ++q;
        aSig -= bSig;
    } while ( 0 <= (sbits32) aSig );
    sigMean = aSig + alternateASig;
    if ( ( sigMean < 0 ) || ( ( sigMean == 0 ) && ( q & 1 ) ) ) {
        aSig = alternateASig;
    1f68:	b8 e0 30 00 	mv r6,r7
    1f6c:	5b 87 00 28 	sw (sp+40),r7
    else {
        aSig >>= 2;
        bSig >>= 2;
    }
    do {
        alternateASig = aSig;
    1f70:	b8 e0 18 00 	mv r3,r7
    1f74:	e3 ff ff d9 	bi 1ed8 <float32_rem+0x1bc>
        ++q;
        aSig -= bSig;
    } while ( 0 <= (sbits32) aSig );
    1f78:	b8 20 18 00 	mv r3,r1
    1f7c:	e3 ff ff cb 	bi 1ea8 <float32_rem+0x18c>
        q >>= 32 - expDiff;
        bSig >>= 2;
        aSig = ( ( aSig>>1 )<<( expDiff - 1 ) ) - bSig * q;
    }
    else {
        aSig >>= 2;
    1f80:	01 63 00 02 	srui r3,r11,2
        bSig >>= 2;
    1f84:	5b 8e 00 24 	sw (sp+36),r14
    1f88:	e3 ff ff c6 	bi 1ea0 <float32_rem+0x184>

00001f8c <float32_sqrt>:
The operation is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_sqrt( float32 a )
{
    1f8c:	37 9c ff e4 	addi sp,sp,-28
    1f90:	5b 8b 00 14 	sw (sp+20),r11
    1f94:	5b 8c 00 10 	sw (sp+16),r12
    1f98:	5b 8d 00 0c 	sw (sp+12),r13
    1f9c:	5b 8e 00 08 	sw (sp+8),r14
    1fa0:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1fa4:	78 05 00 00 	mvhi r5,0x0
    1fa8:	38 a5 28 24 	ori r5,r5,0x2824
    1fac:	28 a4 00 00 	lw r4,(r5+0)
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1fb0:	00 23 00 17 	srui r3,r1,23
    bits32 term0, term1;

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    if ( aExp == 0xFF ) {
    1fb4:	34 06 00 ff 	mvi r6,255
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1fb8:	a0 24 20 00 	and r4,r1,r4
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1fbc:	20 63 00 ff 	andi r3,r3,0xff
    int16 aExp, zExp;
    bits32 aSig, zSig;
    bits32 rem0, rem1;
    bits32 term0, term1;

    aSig = extractFloat32Frac( a );
    1fc0:	5b 84 00 18 	sw (sp+24),r4
    aExp = extractFloat32Exp( a );
    1fc4:	5b 83 00 1c 	sw (sp+28),r3
The operation is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_sqrt( float32 a )
{
    1fc8:	b8 20 10 00 	mv r2,r1
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    1fcc:	00 25 00 1f 	srui r5,r1,31
    bits32 term0, term1;

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    if ( aExp == 0xFF ) {
    1fd0:	44 66 00 4d 	be r3,r6,2104 <float32_sqrt+0x178>
        if ( aSig ) return propagateFloat32NaN( a, 0 );
        if ( ! aSign ) return a;
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( aSign ) {
    1fd4:	44 a0 00 11 	be r5,r0,2018 <float32_sqrt+0x8c>
        if ( ( aExp | aSig ) == 0 ) return a;
    1fd8:	b8 64 18 00 	or r3,r3,r4
    1fdc:	44 60 00 07 	be r3,r0,1ff8 <float32_sqrt+0x6c>
    1fe0:	78 01 00 00 	mvhi r1,0x0
    1fe4:	38 21 2c a8 	ori r1,r1,0x2ca8
    1fe8:	28 23 00 00 	lw r3,(r1+0)
        float_raise( float_flag_invalid );
        return float32_default_nan;
    1fec:	34 02 ff ff 	mvi r2,-1
    1ff0:	38 63 00 10 	ori r3,r3,0x10
    1ff4:	58 23 00 00 	sw (r1+0),r3
        }
    }
    shift32RightJamming( zSig, 1, &zSig );
    return roundAndPackFloat32( 0, zExp, zSig );

}
    1ff8:	b8 40 08 00 	mv r1,r2
    1ffc:	2b 9d 00 04 	lw ra,(sp+4)
    2000:	2b 8b 00 14 	lw r11,(sp+20)
    2004:	2b 8c 00 10 	lw r12,(sp+16)
    2008:	2b 8d 00 0c 	lw r13,(sp+12)
    200c:	2b 8e 00 08 	lw r14,(sp+8)
    2010:	37 9c 00 1c 	addi sp,sp,28
    2014:	c3 a0 00 00 	ret
    if ( aSign ) {
        if ( ( aExp | aSig ) == 0 ) return a;
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( aExp == 0 ) {
    2018:	5c 65 00 09 	bne r3,r5,203c <float32_sqrt+0xb0>
        if ( aSig == 0 ) return 0;
    201c:	34 02 00 00 	mvi r2,0
    2020:	44 83 ff f6 	be r4,r3,1ff8 <float32_sqrt+0x6c>
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    2024:	b8 80 08 00 	mv r1,r4
    2028:	37 83 00 18 	addi r3,sp,24
    202c:	37 82 00 1c 	addi r2,sp,28
    2030:	fb ff fb 56 	calli d88 <normalizeFloat32Subnormal>
    2034:	2b 83 00 1c 	lw r3,(sp+28)
    2038:	2b 84 00 18 	lw r4,(sp+24)
    }
    zExp = ( ( aExp - 0x7F )>>1 ) + 0x7E;
    aSig = ( aSig | 0x00800000 )<<8;
    203c:	78 0b 00 80 	mvhi r11,0x80
    2040:	b8 8b 20 00 	or r4,r4,r11
    2044:	3c 8b 00 08 	sli r11,r4,8
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return 0;
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = ( ( aExp - 0x7F )>>1 ) + 0x7E;
    2048:	34 6e ff 81 	addi r14,r3,-127
    204c:	15 ce 00 01 	sri r14,r14,1
        0x0200, 0x0179, 0x0109, 0x00AF, 0x0068, 0x0034, 0x0012, 0x0002
    };
    int8 index;
    bits32 z;

    index = ( a>>27 ) & 15;
    2050:	01 62 00 1b 	srui r2,r11,27
    aSig = ( aSig | 0x00800000 )<<8;
    2054:	5b 8b 00 18 	sw (sp+24),r11
    if ( aExp & 1 ) {
    2058:	20 6d 00 01 	andi r13,r3,0x1
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return 0;
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = ( ( aExp - 0x7F )>>1 ) + 0x7E;
    205c:	35 ce 00 7e 	addi r14,r14,126
        0x0200, 0x0179, 0x0109, 0x00AF, 0x0068, 0x0034, 0x0012, 0x0002
    };
    int8 index;
    bits32 z;

    index = ( a>>27 ) & 15;
    2060:	20 42 00 0f 	andi r2,r2,0xf
    if ( aExp & 1 ) {
    2064:	5d a0 00 2b 	bne r13,r0,2110 <float32_sqrt+0x184>
        z = 0x4000 + ( a>>17 ) - sqrtOddAdjustments[ index ];
        z = ( ( a / z )<<14 ) + ( z<<15 );
        a >>= 1;
    }
    else {
        z = 0x8000 + ( a>>17 ) - sqrtEvenAdjustments[ index ];
    2068:	3c 42 00 01 	sli r2,r2,1
    206c:	78 01 00 00 	mvhi r1,0x0
    2070:	38 21 2c 3c 	ori r1,r1,0x2c3c
    2074:	b4 22 08 00 	add r1,r1,r2
    2078:	2c 22 00 00 	lhu r2,(r1+0)
    207c:	01 63 00 11 	srui r3,r11,17
    2080:	38 01 80 00 	mvu r1,0x8000
    2084:	b4 61 08 00 	add r1,r3,r1
    2088:	c8 22 08 00 	sub r1,r1,r2
        z = a / z + z;
    208c:	8d 61 10 00 	divu r2,r11,r1
        z = ( 0x20000 <= z ) ? 0xFFFF8000 : ( z<<15 );
    2090:	78 03 00 00 	mvhi r3,0x0
    2094:	38 63 28 2c 	ori r3,r3,0x282c
        z = ( ( a / z )<<14 ) + ( z<<15 );
        a >>= 1;
    }
    else {
        z = 0x8000 + ( a>>17 ) - sqrtEvenAdjustments[ index ];
        z = a / z + z;
    2098:	b4 41 08 00 	add r1,r2,r1
        z = ( 0x20000 <= z ) ? 0xFFFF8000 : ( z<<15 );
    209c:	28 62 00 00 	lw r2,(r3+0)
    20a0:	34 0c 80 00 	mvi r12,-32768
    20a4:	54 22 00 02 	bgu r1,r2,20ac <float32_sqrt+0x120>
    20a8:	3c 2c 00 0f 	sli r12,r1,15
        if ( z <= a ) return (bits32) ( ( (sbits32) a )>>1 );
    20ac:	b9 60 08 00 	mv r1,r11
    20b0:	55 8b 00 25 	bgu r12,r11,2144 <float32_sqrt+0x1b8>
    20b4:	15 61 00 01 	sri r1,r11,1
    aSig = ( aSig | 0x00800000 )<<8;
    zSig = estimateSqrt32( aExp, aSig ) + 2;
    20b8:	34 21 00 02 	addi r1,r1,2
    if ( ( zSig & 0x7F ) <= 5 ) {
    20bc:	20 22 00 7f 	andi r2,r1,0x7f
    20c0:	34 03 00 05 	mvi r3,5
    20c4:	50 62 00 26 	bgeu r3,r2,215c <float32_sqrt+0x1d0>
                --zSig;
                shortShift64Left( 0, zSig, 1, &term0, &term1 );
                term1 |= 1;
                add64( rem0, rem1, term0, term1, &rem0, &rem1 );
            }
            zSig |= ( ( rem0 | rem1 ) != 0 );
    20c8:	00 22 00 01 	srui r2,r1,1
    20cc:	20 21 00 01 	andi r1,r1,0x1
    20d0:	b8 22 18 00 	or r3,r1,r2
        }
    }
    shift32RightJamming( zSig, 1, &zSig );
    return roundAndPackFloat32( 0, zExp, zSig );
    20d4:	b9 c0 10 00 	mv r2,r14
    20d8:	34 01 00 00 	mvi r1,0
    20dc:	fb ff fb 45 	calli df0 <roundAndPackFloat32>
    20e0:	b8 20 10 00 	mv r2,r1

}
    20e4:	b8 40 08 00 	mv r1,r2
    20e8:	2b 9d 00 04 	lw ra,(sp+4)
    20ec:	2b 8b 00 14 	lw r11,(sp+20)
    20f0:	2b 8c 00 10 	lw r12,(sp+16)
    20f4:	2b 8d 00 0c 	lw r13,(sp+12)
    20f8:	2b 8e 00 08 	lw r14,(sp+8)
    20fc:	37 9c 00 1c 	addi sp,sp,28
    2100:	c3 a0 00 00 	ret

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, 0 );
    2104:	5c 80 00 40 	bne r4,r0,2204 <float32_sqrt+0x278>
        if ( ! aSign ) return a;
    2108:	5c a4 ff b6 	bne r5,r4,1fe0 <float32_sqrt+0x54>
    210c:	e3 ff ff bb 	bi 1ff8 <float32_sqrt+0x6c>
    int8 index;
    bits32 z;

    index = ( a>>27 ) & 15;
    if ( aExp & 1 ) {
        z = 0x4000 + ( a>>17 ) - sqrtOddAdjustments[ index ];
    2110:	3c 42 00 01 	sli r2,r2,1
    2114:	78 04 00 00 	mvhi r4,0x0
    2118:	38 84 2c 5c 	ori r4,r4,0x2c5c
    211c:	b4 82 20 00 	add r4,r4,r2
    2120:	2c 83 00 00 	lhu r3,(r4+0)
    2124:	01 62 00 11 	srui r2,r11,17
        z = ( ( a / z )<<14 ) + ( z<<15 );
        a >>= 1;
    2128:	01 61 00 01 	srui r1,r11,1
    int8 index;
    bits32 z;

    index = ( a>>27 ) & 15;
    if ( aExp & 1 ) {
        z = 0x4000 + ( a>>17 ) - sqrtOddAdjustments[ index ];
    212c:	34 42 40 00 	addi r2,r2,16384
    2130:	c8 43 10 00 	sub r2,r2,r3
        z = ( ( a / z )<<14 ) + ( z<<15 );
    2134:	8d 62 60 00 	divu r12,r11,r2
    2138:	3c 42 00 0f 	sli r2,r2,15
    213c:	3d 8c 00 0e 	sli r12,r12,14
    2140:	b5 82 60 00 	add r12,r12,r2
        z = 0x8000 + ( a>>17 ) - sqrtEvenAdjustments[ index ];
        z = a / z + z;
        z = ( 0x20000 <= z ) ? 0xFFFF8000 : ( z<<15 );
        if ( z <= a ) return (bits32) ( ( (sbits32) a )>>1 );
    }
    return ( ( estimateDiv64To32( a, 0, z ) )>>1 ) + ( z>>1 );
    2144:	b9 80 10 00 	mv r2,r12
    2148:	fb ff fc 71 	calli 130c <estimateDiv64To32.clone.0>
    214c:	00 21 00 01 	srui r1,r1,1
    2150:	01 8c 00 01 	srui r12,r12,1
    2154:	b5 81 08 00 	add r1,r12,r1
    2158:	e3 ff ff d8 	bi 20b8 <float32_sqrt+0x12c>
    }
    zExp = ( ( aExp - 0x7F )>>1 ) + 0x7E;
    aSig = ( aSig | 0x00800000 )<<8;
    zSig = estimateSqrt32( aExp, aSig ) + 2;
    if ( ( zSig & 0x7F ) <= 5 ) {
        if ( zSig < 2 ) {
    215c:	78 05 00 00 	mvhi r5,0x0
    2160:	38 a5 28 28 	ori r5,r5,0x2828
    2164:	34 02 00 01 	mvi r2,1
    2168:	28 a3 00 00 	lw r3,(r5+0)
    216c:	50 41 ff da 	bgeu r2,r1,20d4 <float32_sqrt+0x148>
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    2170:	00 23 00 10 	srui r3,r1,16

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    2174:	20 25 ff ff 	andi r5,r1,0xffff
    zMiddleA = ( (bits32) aLow ) * bHigh;
    2178:	88 65 30 00 	mul r6,r3,r5

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    217c:	88 a5 28 00 	mul r5,r5,r5
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    2180:	88 63 18 00 	mul r3,r3,r3
    zMiddleA += zMiddleB;
    2184:	3c c4 00 01 	sli r4,r6,1
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    zMiddleA <<= 16;
    2188:	3c c2 00 11 	sli r2,r6,17
            zSig = 0xFFFFFFFF;
        }
        else {
            aSig >>= aExp & 1;
    218c:	81 6d 58 00 	sru r11,r11,r13
    z1 += zMiddleA;
    2190:	b4 45 28 00 	add r5,r2,r5
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    2194:	00 88 00 10 	srui r8,r4,16
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    2198:	7c a7 00 00 	cmpnei r7,r5,0
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    219c:	f4 c4 20 00 	cmpgu r4,r6,r4
    21a0:	c9 63 18 00 	sub r3,r11,r3
    zMiddleA <<= 16;
    z1 += zMiddleA;
    z0 += ( z1 < zMiddleA );
    21a4:	f4 45 10 00 	cmpgu r2,r2,r5
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    21a8:	c8 68 18 00 	sub r3,r3,r8
    21ac:	3c 84 00 10 	sli r4,r4,16
    zMiddleA <<= 16;
    z1 += zMiddleA;
    z0 += ( z1 < zMiddleA );
    21b0:	c8 67 18 00 	sub r3,r3,r7
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    21b4:	c8 62 18 00 	sub r3,r3,r2
INLINE void
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    21b8:	c8 05 28 00 	sub r5,r0,r5
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    21bc:	c8 64 18 00 	sub r3,r3,r4
    21c0:	5b 8b 00 18 	sw (sp+24),r11
INLINE void
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    21c4:	b8 a0 20 00 	mv r4,r5
            mul32To64( zSig, zSig, &term0, &term1 );
            sub64( aSig, 0, term0, term1, &rem0, &rem1 );
            while ( (sbits32) rem0 < 0 ) {
    21c8:	4c 60 00 0b 	bge r3,r0,21f4 <float32_sqrt+0x268>
                --zSig;
    21cc:	34 21 ff ff 	addi r1,r1,-1
INLINE void
 shortShift64Left(
     bits32 a0, bits32 a1, int16 count, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1<<count;
    21d0:	3c 24 00 01 	sli r4,r1,1
    *z0Ptr =
        ( count == 0 ) ? a0 : ( a0<<count ) | ( a1>>( ( - count ) & 31 ) );
    21d4:	00 27 00 1f 	srui r7,r1,31
                shortShift64Left( 0, zSig, 1, &term0, &term1 );
                term1 |= 1;
    21d8:	38 84 00 01 	ori r4,r4,0x1
 add64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{
    bits32 z1;

    z1 = a1 + b1;
    21dc:	b4 85 20 00 	add r4,r4,r5
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
    21e0:	f4 a4 30 00 	cmpgu r6,r5,r4
 add64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{
    bits32 z1;

    z1 = a1 + b1;
    21e4:	b8 80 28 00 	mv r5,r4
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
    21e8:	b4 e6 30 00 	add r6,r7,r6
    21ec:	b4 66 18 00 	add r3,r3,r6
        }
        else {
            aSig >>= aExp & 1;
            mul32To64( zSig, zSig, &term0, &term1 );
            sub64( aSig, 0, term0, term1, &rem0, &rem1 );
            while ( (sbits32) rem0 < 0 ) {
    21f0:	48 03 ff f7 	bg r0,r3,21cc <float32_sqrt+0x240>
                --zSig;
                shortShift64Left( 0, zSig, 1, &term0, &term1 );
                term1 |= 1;
                add64( rem0, rem1, term0, term1, &rem0, &rem1 );
            }
            zSig |= ( ( rem0 | rem1 ) != 0 );
    21f4:	b8 64 18 00 	or r3,r3,r4
    21f8:	7c 63 00 00 	cmpnei r3,r3,0
    21fc:	b8 61 08 00 	or r1,r3,r1
    2200:	e3 ff ff b2 	bi 20c8 <float32_sqrt+0x13c>

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, 0 );
    2204:	34 02 00 00 	mvi r2,0
    2208:	fb ff fa b5 	calli cdc <propagateFloat32NaN>
    220c:	b8 20 10 00 	mv r2,r1
    2210:	e3 ff ff 7a 	bi 1ff8 <float32_sqrt+0x6c>

00002214 <float32_eq>:
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    2214:	00 24 00 17 	srui r4,r1,23
corresponding value `b', and 0 otherwise.  The comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_eq( float32 a, float32 b )
{
    2218:	b8 20 18 00 	mv r3,r1
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    221c:	20 84 00 ff 	andi r4,r4,0xff
-------------------------------------------------------------------------------
*/
flag float32_eq( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2220:	34 01 00 ff 	mvi r1,255
    2224:	44 81 00 0b 	be r4,r1,2250 <float32_eq+0x3c>
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    2228:	00 44 00 17 	srui r4,r2,23
*/
flag float32_eq( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    222c:	34 01 00 ff 	mvi r1,255
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    2230:	20 84 00 ff 	andi r4,r4,0xff
*/
flag float32_eq( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    2234:	44 81 00 16 	be r4,r1,228c <float32_eq+0x78>
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );
    2238:	34 01 00 01 	mvi r1,1
    223c:	44 62 00 04 	be r3,r2,224c <float32_eq+0x38>
    2240:	b8 43 08 00 	or r1,r2,r3
    2244:	3c 21 00 01 	sli r1,r1,1
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
       ) {
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    2248:	64 21 00 00 	cmpei r1,r1,0
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );

}
    224c:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    2250:	78 04 00 00 	mvhi r4,0x0
    2254:	38 84 28 24 	ori r4,r4,0x2824
    2258:	28 81 00 00 	lw r1,(r4+0)
    225c:	a0 61 08 00 	and r1,r3,r1
-------------------------------------------------------------------------------
*/
flag float32_eq( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2260:	44 20 ff f2 	be r1,r0,2228 <float32_eq+0x14>
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    2264:	00 64 00 16 	srui r4,r3,22
    2268:	34 01 01 fe 	mvi r1,510
    226c:	20 84 01 ff 	andi r4,r4,0x1ff
    2270:	44 81 00 10 	be r4,r1,22b0 <float32_eq+0x9c>
    2274:	00 43 00 16 	srui r3,r2,22
    2278:	34 01 01 fe 	mvi r1,510
    227c:	20 63 01 ff 	andi r3,r3,0x1ff
    2280:	44 61 00 18 	be r3,r1,22e0 <float32_eq+0xcc>
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
       ) {
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    2284:	34 01 00 00 	mvi r1,0
    2288:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    228c:	78 04 00 00 	mvhi r4,0x0
    2290:	38 84 28 24 	ori r4,r4,0x2824
    2294:	28 81 00 00 	lw r1,(r4+0)
    2298:	a0 41 08 00 	and r1,r2,r1
*/
flag float32_eq( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    229c:	44 20 ff e7 	be r1,r0,2238 <float32_eq+0x24>
    22a0:	00 64 00 16 	srui r4,r3,22
    22a4:	34 01 01 fe 	mvi r1,510
    22a8:	20 84 01 ff 	andi r4,r4,0x1ff
    22ac:	5c 81 ff f2 	bne r4,r1,2274 <float32_eq+0x60>
    22b0:	78 04 00 00 	mvhi r4,0x0
    22b4:	38 84 28 1c 	ori r4,r4,0x281c
    22b8:	28 81 00 00 	lw r1,(r4+0)
    22bc:	a0 61 18 00 	and r3,r3,r1
    22c0:	44 60 ff ed 	be r3,r0,2274 <float32_eq+0x60>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    22c4:	78 02 00 00 	mvhi r2,0x0
    22c8:	38 42 2c a8 	ori r2,r2,0x2ca8
    22cc:	28 43 00 00 	lw r3,(r2+0)
       ) {
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    22d0:	34 01 00 00 	mvi r1,0
    22d4:	38 63 00 10 	ori r3,r3,0x10
    22d8:	58 43 00 00 	sw (r2+0),r3
    22dc:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    22e0:	78 04 00 00 	mvhi r4,0x0
    22e4:	38 84 28 1c 	ori r4,r4,0x281c
    22e8:	28 83 00 00 	lw r3,(r4+0)
    22ec:	34 01 00 00 	mvi r1,0
    22f0:	a0 43 10 00 	and r2,r2,r3
    22f4:	44 40 ff d6 	be r2,r0,224c <float32_eq+0x38>
    22f8:	e3 ff ff f3 	bi 22c4 <float32_eq+0xb0>

000022fc <float32_le>:
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    22fc:	00 24 00 17 	srui r4,r1,23
performed according to the IEC/IEEE Standard for Binary Floating-point
Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_le( float32 a, float32 b )
{
    2300:	b8 20 18 00 	mv r3,r1
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    2304:	20 84 00 ff 	andi r4,r4,0xff
*/
flag float32_le( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2308:	34 01 00 ff 	mvi r1,255
    230c:	44 81 00 13 	be r4,r1,2358 <float32_le+0x5c>
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    2310:	00 44 00 17 	srui r4,r2,23
flag float32_le( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    2314:	34 01 00 ff 	mvi r1,255
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    2318:	20 84 00 ff 	andi r4,r4,0xff
flag float32_le( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    231c:	44 81 00 1b 	be r4,r1,2388 <float32_le+0x8c>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    2320:	00 64 00 1f 	srui r4,r3,31
    2324:	00 41 00 1f 	srui r1,r2,31
        float_raise( float_flag_invalid );
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    2328:	44 81 00 07 	be r4,r1,2344 <float32_le+0x48>
    232c:	34 01 00 01 	mvi r1,1
    2330:	5c 80 00 09 	bne r4,r0,2354 <float32_le+0x58>
    2334:	b8 43 08 00 	or r1,r2,r3
    2338:	3c 21 00 01 	sli r1,r1,1

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
       ) {
        float_raise( float_flag_invalid );
        return 0;
    233c:	64 21 00 00 	cmpei r1,r1,0
    2340:	c3 a0 00 00 	ret
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );
    2344:	34 01 00 01 	mvi r1,1
    2348:	44 62 00 03 	be r3,r2,2354 <float32_le+0x58>
    234c:	f4 43 18 00 	cmpgu r3,r2,r3

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
       ) {
        float_raise( float_flag_invalid );
        return 0;
    2350:	fc 64 08 00 	cmpne r1,r3,r4
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );

}
    2354:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    2358:	78 04 00 00 	mvhi r4,0x0
    235c:	38 84 28 24 	ori r4,r4,0x2824
    2360:	28 81 00 00 	lw r1,(r4+0)
    2364:	a0 61 08 00 	and r1,r3,r1
*/
flag float32_le( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2368:	44 20 ff ea 	be r1,r0,2310 <float32_le+0x14>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    236c:	78 02 00 00 	mvhi r2,0x0
    2370:	38 42 2c a8 	ori r2,r2,0x2ca8
    2374:	28 43 00 00 	lw r3,(r2+0)
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
       ) {
        float_raise( float_flag_invalid );
        return 0;
    2378:	34 01 00 00 	mvi r1,0
    237c:	38 63 00 10 	ori r3,r3,0x10
    2380:	58 43 00 00 	sw (r2+0),r3
    2384:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    2388:	78 04 00 00 	mvhi r4,0x0
    238c:	38 84 28 24 	ori r4,r4,0x2824
    2390:	28 81 00 00 	lw r1,(r4+0)
    2394:	a0 41 08 00 	and r1,r2,r1
flag float32_le( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    2398:	44 20 ff e2 	be r1,r0,2320 <float32_le+0x24>
    239c:	e3 ff ff f4 	bi 236c <float32_le+0x70>

000023a0 <float32_lt>:
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    23a0:	00 24 00 17 	srui r4,r1,23
the corresponding value `b', and 0 otherwise.  The comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt( float32 a, float32 b )
{
    23a4:	b8 20 18 00 	mv r3,r1
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    23a8:	20 84 00 ff 	andi r4,r4,0xff
*/
flag float32_lt( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    23ac:	34 01 00 ff 	mvi r1,255
    23b0:	44 81 00 13 	be r4,r1,23fc <float32_lt+0x5c>
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    23b4:	00 44 00 17 	srui r4,r2,23
flag float32_lt( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    23b8:	34 01 00 ff 	mvi r1,255
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    23bc:	20 84 00 ff 	andi r4,r4,0xff
flag float32_lt( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    23c0:	44 81 00 1b 	be r4,r1,242c <float32_lt+0x8c>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    23c4:	00 64 00 1f 	srui r4,r3,31
    23c8:	00 41 00 1f 	srui r1,r2,31
        float_raise( float_flag_invalid );
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    23cc:	44 81 00 07 	be r4,r1,23e8 <float32_lt+0x48>
    23d0:	34 01 00 00 	mvi r1,0
    23d4:	44 80 00 09 	be r4,r0,23f8 <float32_lt+0x58>
    23d8:	b8 43 08 00 	or r1,r2,r3
    23dc:	3c 21 00 01 	sli r1,r1,1
Returns 1 if the single-precision floating-point value `a' is less than
the corresponding value `b', and 0 otherwise.  The comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt( float32 a, float32 b )
    23e0:	7c 21 00 00 	cmpnei r1,r1,0
    23e4:	c3 a0 00 00 	ret
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    return ( a != b ) && ( aSign ^ ( a < b ) );
    23e8:	34 01 00 00 	mvi r1,0
    23ec:	44 62 00 03 	be r3,r2,23f8 <float32_lt+0x58>
    23f0:	f4 43 18 00 	cmpgu r3,r2,r3
Returns 1 if the single-precision floating-point value `a' is less than
the corresponding value `b', and 0 otherwise.  The comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt( float32 a, float32 b )
    23f4:	fc 64 08 00 	cmpne r1,r3,r4
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    return ( a != b ) && ( aSign ^ ( a < b ) );

}
    23f8:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    23fc:	78 04 00 00 	mvhi r4,0x0
    2400:	38 84 28 24 	ori r4,r4,0x2824
    2404:	28 81 00 00 	lw r1,(r4+0)
    2408:	a0 61 08 00 	and r1,r3,r1
*/
flag float32_lt( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    240c:	44 20 ff ea 	be r1,r0,23b4 <float32_lt+0x14>
    2410:	78 02 00 00 	mvhi r2,0x0
    2414:	38 42 2c a8 	ori r2,r2,0x2ca8
    2418:	28 43 00 00 	lw r3,(r2+0)
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
       ) {
        float_raise( float_flag_invalid );
        return 0;
    241c:	34 01 00 00 	mvi r1,0
    2420:	38 63 00 10 	ori r3,r3,0x10
    2424:	58 43 00 00 	sw (r2+0),r3
    2428:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    242c:	78 04 00 00 	mvhi r4,0x0
    2430:	38 84 28 24 	ori r4,r4,0x2824
    2434:	28 81 00 00 	lw r1,(r4+0)
    2438:	a0 41 08 00 	and r1,r2,r1
flag float32_lt( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    243c:	44 20 ff e2 	be r1,r0,23c4 <float32_lt+0x24>
    2440:	e3 ff ff f4 	bi 2410 <float32_lt+0x70>

00002444 <float32_eq_signaling>:
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    2444:	00 24 00 17 	srui r4,r1,23
if either operand is a NaN.  Otherwise, the comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_eq_signaling( float32 a, float32 b )
{
    2448:	b8 20 18 00 	mv r3,r1
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    244c:	20 84 00 ff 	andi r4,r4,0xff
-------------------------------------------------------------------------------
*/
flag float32_eq_signaling( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2450:	34 01 00 ff 	mvi r1,255
    2454:	44 81 00 0b 	be r4,r1,2480 <float32_eq_signaling+0x3c>
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    2458:	00 44 00 17 	srui r4,r2,23
*/
flag float32_eq_signaling( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    245c:	34 01 00 ff 	mvi r1,255
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    2460:	20 84 00 ff 	andi r4,r4,0xff
*/
flag float32_eq_signaling( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    2464:	44 81 00 13 	be r4,r1,24b0 <float32_eq_signaling+0x6c>
       ) {
        float_raise( float_flag_invalid );
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );
    2468:	34 01 00 01 	mvi r1,1
    246c:	44 62 00 04 	be r3,r2,247c <float32_eq_signaling+0x38>
    2470:	b8 43 08 00 	or r1,r2,r3
    2474:	3c 21 00 01 	sli r1,r1,1

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
       ) {
        float_raise( float_flag_invalid );
        return 0;
    2478:	64 21 00 00 	cmpei r1,r1,0
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );

}
    247c:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    2480:	78 04 00 00 	mvhi r4,0x0
    2484:	38 84 28 24 	ori r4,r4,0x2824
    2488:	28 81 00 00 	lw r1,(r4+0)
    248c:	a0 61 08 00 	and r1,r3,r1
-------------------------------------------------------------------------------
*/
flag float32_eq_signaling( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2490:	44 20 ff f2 	be r1,r0,2458 <float32_eq_signaling+0x14>
    2494:	78 02 00 00 	mvhi r2,0x0
    2498:	38 42 2c a8 	ori r2,r2,0x2ca8
    249c:	28 43 00 00 	lw r3,(r2+0)
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
       ) {
        float_raise( float_flag_invalid );
        return 0;
    24a0:	34 01 00 00 	mvi r1,0
    24a4:	38 63 00 10 	ori r3,r3,0x10
    24a8:	58 43 00 00 	sw (r2+0),r3
    24ac:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    24b0:	78 04 00 00 	mvhi r4,0x0
    24b4:	38 84 28 24 	ori r4,r4,0x2824
    24b8:	28 81 00 00 	lw r1,(r4+0)
    24bc:	a0 41 08 00 	and r1,r2,r1
*/
flag float32_eq_signaling( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    24c0:	44 20 ff ea 	be r1,r0,2468 <float32_eq_signaling+0x24>
    24c4:	e3 ff ff f4 	bi 2494 <float32_eq_signaling+0x50>

000024c8 <float32_le_quiet>:
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    24c8:	00 24 00 17 	srui r4,r1,23
cause an exception.  Otherwise, the comparison is performed according to the
IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_le_quiet( float32 a, float32 b )
{
    24cc:	b8 20 18 00 	mv r3,r1
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    24d0:	20 84 00 ff 	andi r4,r4,0xff
*/
flag float32_le_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    24d4:	34 01 00 ff 	mvi r1,255
    24d8:	44 81 00 13 	be r4,r1,2524 <float32_le_quiet+0x5c>
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    24dc:	00 44 00 17 	srui r4,r2,23
flag float32_le_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    24e0:	34 01 00 ff 	mvi r1,255
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    24e4:	20 84 00 ff 	andi r4,r4,0xff
flag float32_le_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    24e8:	44 81 00 1e 	be r4,r1,2560 <float32_le_quiet+0x98>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    24ec:	00 64 00 1f 	srui r4,r3,31
    24f0:	00 41 00 1f 	srui r1,r2,31
        }
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    24f4:	44 81 00 07 	be r4,r1,2510 <float32_le_quiet+0x48>
    24f8:	34 01 00 01 	mvi r1,1
    24fc:	5c 80 00 09 	bne r4,r0,2520 <float32_le_quiet+0x58>
    2500:	b8 43 08 00 	or r1,r2,r3
    2504:	3c 21 00 01 	sli r1,r1,1
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
       ) {
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    2508:	64 21 00 00 	cmpei r1,r1,0
    250c:	c3 a0 00 00 	ret
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );
    2510:	34 01 00 01 	mvi r1,1
    2514:	44 62 00 03 	be r3,r2,2520 <float32_le_quiet+0x58>
    2518:	f4 43 18 00 	cmpgu r3,r2,r3
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
       ) {
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    251c:	fc 64 08 00 	cmpne r1,r3,r4
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );

}
    2520:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    2524:	78 04 00 00 	mvhi r4,0x0
    2528:	38 84 28 24 	ori r4,r4,0x2824
    252c:	28 81 00 00 	lw r1,(r4+0)
    2530:	a0 61 08 00 	and r1,r3,r1
*/
flag float32_le_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2534:	44 20 ff ea 	be r1,r0,24dc <float32_le_quiet+0x14>
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    2538:	00 64 00 16 	srui r4,r3,22
    253c:	34 01 01 fe 	mvi r1,510
    2540:	20 84 01 ff 	andi r4,r4,0x1ff
    2544:	44 81 00 10 	be r4,r1,2584 <float32_le_quiet+0xbc>
    2548:	00 43 00 16 	srui r3,r2,22
    254c:	34 01 01 fe 	mvi r1,510
    2550:	20 63 01 ff 	andi r3,r3,0x1ff
    2554:	44 61 00 18 	be r3,r1,25b4 <float32_le_quiet+0xec>
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
       ) {
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    2558:	34 01 00 00 	mvi r1,0
    255c:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    2560:	78 04 00 00 	mvhi r4,0x0
    2564:	38 84 28 24 	ori r4,r4,0x2824
    2568:	28 81 00 00 	lw r1,(r4+0)
    256c:	a0 41 08 00 	and r1,r2,r1
flag float32_le_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    2570:	44 20 ff df 	be r1,r0,24ec <float32_le_quiet+0x24>
    2574:	00 64 00 16 	srui r4,r3,22
    2578:	34 01 01 fe 	mvi r1,510
    257c:	20 84 01 ff 	andi r4,r4,0x1ff
    2580:	5c 81 ff f2 	bne r4,r1,2548 <float32_le_quiet+0x80>
    2584:	78 04 00 00 	mvhi r4,0x0
    2588:	38 84 28 1c 	ori r4,r4,0x281c
    258c:	28 81 00 00 	lw r1,(r4+0)
    2590:	a0 61 18 00 	and r3,r3,r1
    2594:	44 60 ff ed 	be r3,r0,2548 <float32_le_quiet+0x80>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    2598:	78 02 00 00 	mvhi r2,0x0
    259c:	38 42 2c a8 	ori r2,r2,0x2ca8
    25a0:	28 43 00 00 	lw r3,(r2+0)
       ) {
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    25a4:	34 01 00 00 	mvi r1,0
    25a8:	38 63 00 10 	ori r3,r3,0x10
    25ac:	58 43 00 00 	sw (r2+0),r3
    25b0:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    25b4:	78 04 00 00 	mvhi r4,0x0
    25b8:	38 84 28 1c 	ori r4,r4,0x281c
    25bc:	28 83 00 00 	lw r3,(r4+0)
    25c0:	34 01 00 00 	mvi r1,0
    25c4:	a0 43 10 00 	and r2,r2,r3
    25c8:	44 40 ff d6 	be r2,r0,2520 <float32_le_quiet+0x58>
    25cc:	e3 ff ff f3 	bi 2598 <float32_le_quiet+0xd0>

000025d0 <float32_lt_quiet>:
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    25d0:	00 24 00 17 	srui r4,r1,23
exception.  Otherwise, the comparison is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt_quiet( float32 a, float32 b )
{
    25d4:	b8 20 18 00 	mv r3,r1
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    25d8:	20 84 00 ff 	andi r4,r4,0xff
*/
flag float32_lt_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    25dc:	34 01 00 ff 	mvi r1,255
    25e0:	44 81 00 13 	be r4,r1,262c <float32_lt_quiet+0x5c>
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    25e4:	00 44 00 17 	srui r4,r2,23
flag float32_lt_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    25e8:	34 01 00 ff 	mvi r1,255
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    25ec:	20 84 00 ff 	andi r4,r4,0xff
flag float32_lt_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    25f0:	44 81 00 1e 	be r4,r1,2668 <float32_lt_quiet+0x98>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    25f4:	00 64 00 1f 	srui r4,r3,31
    25f8:	00 41 00 1f 	srui r1,r2,31
        }
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    25fc:	44 81 00 07 	be r4,r1,2618 <float32_lt_quiet+0x48>
    2600:	34 01 00 00 	mvi r1,0
    2604:	44 80 00 09 	be r4,r0,2628 <float32_lt_quiet+0x58>
    2608:	b8 43 08 00 	or r1,r2,r3
    260c:	3c 21 00 01 	sli r1,r1,1
the corresponding value `b', and 0 otherwise.  Quiet NaNs do not cause an
exception.  Otherwise, the comparison is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt_quiet( float32 a, float32 b )
    2610:	7c 21 00 00 	cmpnei r1,r1,0
    2614:	c3 a0 00 00 	ret
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    return ( a != b ) && ( aSign ^ ( a < b ) );
    2618:	34 01 00 00 	mvi r1,0
    261c:	44 62 00 03 	be r3,r2,2628 <float32_lt_quiet+0x58>
    2620:	f4 43 18 00 	cmpgu r3,r2,r3
the corresponding value `b', and 0 otherwise.  Quiet NaNs do not cause an
exception.  Otherwise, the comparison is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt_quiet( float32 a, float32 b )
    2624:	fc 64 08 00 	cmpne r1,r3,r4
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    return ( a != b ) && ( aSign ^ ( a < b ) );

}
    2628:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    262c:	78 04 00 00 	mvhi r4,0x0
    2630:	38 84 28 24 	ori r4,r4,0x2824
    2634:	28 81 00 00 	lw r1,(r4+0)
    2638:	a0 61 08 00 	and r1,r3,r1
*/
flag float32_lt_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    263c:	44 20 ff ea 	be r1,r0,25e4 <float32_lt_quiet+0x14>
    2640:	00 64 00 16 	srui r4,r3,22
    2644:	34 01 01 fe 	mvi r1,510
    2648:	20 84 01 ff 	andi r4,r4,0x1ff
    264c:	44 81 00 10 	be r4,r1,268c <float32_lt_quiet+0xbc>
    2650:	00 43 00 16 	srui r3,r2,22
    2654:	34 01 01 fe 	mvi r1,510
    2658:	20 63 01 ff 	andi r3,r3,0x1ff
    265c:	44 61 00 18 	be r3,r1,26bc <float32_lt_quiet+0xec>
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
       ) {
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    2660:	34 01 00 00 	mvi r1,0
    2664:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    2668:	78 04 00 00 	mvhi r4,0x0
    266c:	38 84 28 24 	ori r4,r4,0x2824
    2670:	28 81 00 00 	lw r1,(r4+0)
    2674:	a0 41 08 00 	and r1,r2,r1
flag float32_lt_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    2678:	44 20 ff df 	be r1,r0,25f4 <float32_lt_quiet+0x24>
    267c:	00 64 00 16 	srui r4,r3,22
    2680:	34 01 01 fe 	mvi r1,510
    2684:	20 84 01 ff 	andi r4,r4,0x1ff
    2688:	5c 81 ff f2 	bne r4,r1,2650 <float32_lt_quiet+0x80>
    268c:	78 04 00 00 	mvhi r4,0x0
    2690:	38 84 28 1c 	ori r4,r4,0x281c
    2694:	28 81 00 00 	lw r1,(r4+0)
    2698:	a0 61 18 00 	and r3,r3,r1
    269c:	44 60 ff ed 	be r3,r0,2650 <float32_lt_quiet+0x80>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    26a0:	78 02 00 00 	mvhi r2,0x0
    26a4:	38 42 2c a8 	ori r2,r2,0x2ca8
    26a8:	28 43 00 00 	lw r3,(r2+0)
       ) {
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    26ac:	34 01 00 00 	mvi r1,0
    26b0:	38 63 00 10 	ori r3,r3,0x10
    26b4:	58 43 00 00 	sw (r2+0),r3
    26b8:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    26bc:	78 04 00 00 	mvhi r4,0x0
    26c0:	38 84 28 1c 	ori r4,r4,0x281c
    26c4:	28 83 00 00 	lw r3,(r4+0)
    26c8:	34 01 00 00 	mvi r1,0
    26cc:	a0 43 10 00 	and r2,r2,r3
    26d0:	44 40 ff d6 	be r2,r0,2628 <float32_lt_quiet+0x58>
    26d4:	e3 ff ff f3 	bi 26a0 <float32_lt_quiet+0xd0>

000026d8 <float32_abs>:
-------------------------------------------------------------------------------
This is an abs function
-------------------------------------------------------------------------------
*/
float32 float32_abs(float32 a)
{
    26d8:	37 9c ff fc 	addi sp,sp,-4
    26dc:	5b 9d 00 04 	sw (sp+4),ra
    26e0:	b8 20 10 00 	mv r2,r1
	if ( extractFloat32Sign( a )){
    26e4:	4c 20 00 04 	bge r1,r0,26f4 <float32_abs+0x1c>
	return float32_mul( a, 0xBF800000 ) ;
    26e8:	78 02 bf 80 	mvhi r2,0xbf80
    26ec:	fb ff fc 6c 	calli 189c <float32_mul>
    26f0:	b8 20 10 00 	mv r2,r1
	}
	else {
	return a;
	}
}
    26f4:	b8 40 08 00 	mv r1,r2
    26f8:	2b 9d 00 04 	lw ra,(sp+4)
    26fc:	37 9c 00 04 	addi sp,sp,4
    2700:	c3 a0 00 00 	ret

00002704 <float32_artan>:
This is an approximation of an arctan function, for values in the range [-1,1] 
Pi_4=0x3F490FD8,0.2447=0x3E7A92A3 , 0.0663=0x3D87C84B
-------------------------------------------------------------------------------
*/
float32 float32_artan( float32 a)
{
    2704:	37 9c ff f0 	addi sp,sp,-16
    2708:	5b 8b 00 10 	sw (sp+16),r11
    270c:	5b 8c 00 0c 	sw (sp+12),r12
    2710:	5b 8d 00 08 	sw (sp+8),r13
    2714:	5b 9d 00 04 	sw (sp+4),ra
	float32 b = float32_mul(0x3F490FD8,a);
    2718:	78 02 00 00 	mvhi r2,0x0
    271c:	38 42 28 30 	ori r2,r2,0x2830
This is an approximation of an arctan function, for values in the range [-1,1] 
Pi_4=0x3F490FD8,0.2447=0x3E7A92A3 , 0.0663=0x3D87C84B
-------------------------------------------------------------------------------
*/
float32 float32_artan( float32 a)
{
    2720:	b8 20 58 00 	mv r11,r1
	float32 b = float32_mul(0x3F490FD8,a);
    2724:	28 41 00 00 	lw r1,(r2+0)
    2728:	b9 60 10 00 	mv r2,r11
    272c:	fb ff fc 5c 	calli 189c <float32_mul>
    2730:	b8 20 60 00 	mv r12,r1
	float32 i = float32_abs(a);
    2734:	b9 60 08 00 	mv r1,r11
    2738:	fb ff ff e8 	calli 26d8 <float32_abs>
	float32 c = float32_add(i,0xBF800000);
    273c:	78 02 bf 80 	mvhi r2,0xbf80
-------------------------------------------------------------------------------
*/
float32 float32_artan( float32 a)
{
	float32 b = float32_mul(0x3F490FD8,a);
	float32 i = float32_abs(a);
    2740:	b8 20 68 00 	mv r13,r1
	float32 c = float32_add(i,0xBF800000);
    2744:	fb ff fc 3c 	calli 1834 <float32_add>
    2748:	b8 20 10 00 	mv r2,r1
	float32 d = float32_mul(a,c);
    274c:	b9 60 08 00 	mv r1,r11
    2750:	fb ff fc 53 	calli 189c <float32_mul>
	float32 e = float32_mul(i,0x3D87C84B);
    2754:	78 03 00 00 	mvhi r3,0x0
    2758:	38 63 28 34 	ori r3,r3,0x2834
    275c:	28 62 00 00 	lw r2,(r3+0)
float32 float32_artan( float32 a)
{
	float32 b = float32_mul(0x3F490FD8,a);
	float32 i = float32_abs(a);
	float32 c = float32_add(i,0xBF800000);
	float32 d = float32_mul(a,c);
    2760:	b8 20 58 00 	mv r11,r1
	float32 e = float32_mul(i,0x3D87C84B);
    2764:	b9 a0 08 00 	mv r1,r13
    2768:	fb ff fc 4d 	calli 189c <float32_mul>
	float32 f = float32_add(0x3E7A92A3,e);
    276c:	78 03 00 00 	mvhi r3,0x0
    2770:	38 63 28 38 	ori r3,r3,0x2838
{
	float32 b = float32_mul(0x3F490FD8,a);
	float32 i = float32_abs(a);
	float32 c = float32_add(i,0xBF800000);
	float32 d = float32_mul(a,c);
	float32 e = float32_mul(i,0x3D87C84B);
    2774:	b8 20 10 00 	mv r2,r1
	float32 f = float32_add(0x3E7A92A3,e);
    2778:	28 61 00 00 	lw r1,(r3+0)
    277c:	fb ff fc 2e 	calli 1834 <float32_add>
	float32 g = float32_mul(f,d);
    2780:	b9 60 10 00 	mv r2,r11
    2784:	fb ff fc 46 	calli 189c <float32_mul>
    2788:	b8 20 10 00 	mv r2,r1
	//float32 j = float32_mul(g,0xBF800000);
	float32 h = float32_sub(b,g);
    278c:	b9 80 08 00 	mv r1,r12
    2790:	fb ff fc 36 	calli 1868 <float32_sub>
	return h;
}
    2794:	2b 9d 00 04 	lw ra,(sp+4)
    2798:	2b 8b 00 10 	lw r11,(sp+16)
    279c:	2b 8c 00 0c 	lw r12,(sp+12)
    27a0:	2b 8d 00 08 	lw r13,(sp+8)
    27a4:	37 9c 00 10 	addi sp,sp,16
    27a8:	c3 a0 00 00 	ret

000027ac <float32_pow2>:
-------------------------------------------------------------------------------
This is the square function
-------------------------------------------------------------------------------
*/
float32 float32_pow2( float32 a)
{
    27ac:	37 9c ff fc 	addi sp,sp,-4
    27b0:	5b 9d 00 04 	sw (sp+4),ra
	return float32_mul(a,a);
    27b4:	b8 20 10 00 	mv r2,r1
    27b8:	fb ff fc 39 	calli 189c <float32_mul>
}
    27bc:	2b 9d 00 04 	lw ra,(sp+4)
    27c0:	37 9c 00 04 	addi sp,sp,4
    27c4:	c3 a0 00 00 	ret
