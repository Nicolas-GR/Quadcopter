
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         00000c24  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000054  00000c24  00000c24  00000c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000028  00000c78  00000c78  00000ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000ca0  00000ca0  00000cf4  2**2
                  ALLOC
  4 .debug_abbrev 00000456  00000000  00000000  00000cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f6e  00000000  00000000  0000114a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000a44  00000000  00000000  000020b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000002f0  00000000  00000000  00002afc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000044a  00000000  00000000  00002dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 0000031e  00000000  00000000  00003236  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000097  00000000  00000000  00003554  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  000035eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000003d9  00000000  00000000  0000362b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  00003a04  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 000000a8  00000000  00000000  00003a15  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 97 	calli 328 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 2f fc 	ori sp,sp,0x2ffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 0c a0 	ori gp,gp,0xca0
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 0c a0 	ori r1,r1,0xca0
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0d 24 	ori r3,r3,0xd24

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 5f 	calli 2b8 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <printdec2hex>:
#define G_R 131.0

//Conversion de radianes a grados 180/PI
#define RAD_TO_DEG = 57.295779

void printdec2hex(char l){
 208:	37 9c ff f8 	addi sp,sp,-8
 20c:	5b 8b 00 08 	sw (sp+8),r11
 210:	5b 9d 00 04 	sw (sp+4),ra
 214:	20 2b 00 ff 	andi r11,r1,0xff

        char t = ((l & 0xf0 )>>4)+0x30;
 218:	01 61 00 04 	srui r1,r11,4
	if (t > 0x39)
 21c:	34 02 00 39 	mvi r2,57
//Conversion de radianes a grados 180/PI
#define RAD_TO_DEG = 57.295779

void printdec2hex(char l){

        char t = ((l & 0xf0 )>>4)+0x30;
 220:	34 21 00 30 	addi r1,r1,48
	if (t > 0x39)
 224:	50 41 00 02 	bgeu r2,r1,22c <printdec2hex+0x24>
		t+=0x07;
 228:	34 21 00 07 	addi r1,r1,7
	uart_putchar1(t);
 22c:	f8 00 01 2b 	calli 6d8 <uart_putchar1>
	t = (l & 0x0f)+0x30;
 230:	21 61 00 0f 	andi r1,r11,0xf
 234:	34 21 00 30 	addi r1,r1,48
	if (t > 0x39)
 238:	34 02 00 39 	mvi r2,57
 23c:	50 41 00 02 	bgeu r2,r1,244 <printdec2hex+0x3c>
		t+=0x07;
 240:	34 21 00 07 	addi r1,r1,7
	uart_putchar1(t);
 244:	f8 00 01 25 	calli 6d8 <uart_putchar1>

}
 248:	2b 9d 00 04 	lw ra,(sp+4)
 24c:	2b 8b 00 08 	lw r11,(sp+8)
 250:	37 9c 00 08 	addi sp,sp,8
 254:	c3 a0 00 00 	ret

00000258 <printxyz>:
void printxyz(int8_t AcH, char AcL){
 258:	37 9c ff f4 	addi sp,sp,-12
 25c:	5b 8b 00 0c 	sw (sp+12),r11
 260:	5b 8c 00 08 	sw (sp+8),r12
 264:	5b 9d 00 04 	sw (sp+4),ra
 268:	b0 20 58 00 	sextb r11,r1
 26c:	20 4c 00 ff 	andi r12,r2,0xff
		if(AcH<0){
 270:	4d 60 00 06 	bge r11,r0,288 <printxyz+0x30>
			uart_putchar1('-');
 274:	34 01 00 2d 	mvi r1,45
 278:	f8 00 01 18 	calli 6d8 <uart_putchar1>
			printdec2hex(AcH & 0X7F);
 27c:	21 61 00 7f 	andi r1,r11,0x7f
 280:	fb ff ff e2 	calli 208 <printdec2hex>
 284:	e0 00 00 03 	bi 290 <printxyz+0x38>
		}
		else		
			printdec2hex(AcH);
 288:	21 61 00 ff 	andi r1,r11,0xff
 28c:	fb ff ff df 	calli 208 <printdec2hex>
		
		printdec2hex(AcL);
 290:	b9 80 08 00 	mv r1,r12
 294:	fb ff ff dd 	calli 208 <printdec2hex>
		uart_putstr1(" ");
 298:	78 01 00 00 	mvhi r1,0x0
 29c:	38 21 0c 24 	ori r1,r1,0xc24
 2a0:	f8 00 01 17 	calli 6fc <uart_putstr1>
}
 2a4:	2b 9d 00 04 	lw ra,(sp+4)
 2a8:	2b 8b 00 0c 	lw r11,(sp+12)
 2ac:	2b 8c 00 08 	lw r12,(sp+8)
 2b0:	37 9c 00 0c 	addi sp,sp,12
 2b4:	c3 a0 00 00 	ret

000002b8 <main>:

int main(){
 2b8:	37 9c ff fc 	addi sp,sp,-4
 2bc:	5b 9d 00 04 	sw (sp+4),ra

	int32_t AcX;
	int32_t AcY;
	int32_t AcZ;
	
	setMotors();
 2c0:	f8 00 01 47 	calli 7dc <setMotors>
	msleep(50);	
 2c4:	34 01 00 32 	mvi r1,50
 2c8:	f8 00 00 48 	calli 3e8 <msleep>
	initImu();
 2cc:	f8 00 01 c5 	calli 9e0 <initImu>
	msleep(50);
 2d0:	34 01 00 32 	mvi r1,50
 2d4:	f8 00 00 45 	calli 3e8 <msleep>
	//init_wifi()
	//msleep(50);
	testMotos();
 2d8:	f8 00 01 56 	calli 830 <testMotos>
	uart_putchar(0);
 2dc:	34 01 00 00 	mvi r1,0
 2e0:	f8 00 00 ac 	calli 590 <uart_putchar>
	uart_putchar1(0);	
 2e4:	34 01 00 00 	mvi r1,0
 2e8:	f8 00 00 fc 	calli 6d8 <uart_putchar1>
			set_motor2(0xEA60);
			set_motor3(0xEA60);
			set_motor4(0xEA60);
		}
	}*/
}
 2ec:	2b 9d 00 04 	lw ra,(sp+4)
 2f0:	37 9c 00 04 	addi sp,sp,4
 2f4:	c3 a0 00 00 	ret

000002f8 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 2f8:	c3 a0 00 00 	ret

000002fc <tic_isr>:
}
uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 2fc:	78 01 00 00 	mvhi r1,0x0
 300:	38 21 0d 20 	ori r1,r1,0xd20
 304:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 308:	78 02 00 00 	mvhi r2,0x0
 30c:	38 42 0c 7c 	ori r2,r2,0xc7c
 310:	28 42 00 00 	lw r2,(r2+0)
}
uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 314:	34 63 00 01 	addi r3,r3,1
 318:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 31c:	34 01 00 0e 	mvi r1,14
 320:	58 41 00 00 	sw (r2+0),r1
}
 324:	c3 a0 00 00 	ret

00000328 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 328:	37 9c ff f0 	addi sp,sp,-16
 32c:	5b 8b 00 10 	sw (sp+16),r11
 330:	5b 8c 00 0c 	sw (sp+12),r12
 334:	5b 8d 00 08 	sw (sp+8),r13
 338:	5b 9d 00 04 	sw (sp+4),ra
 33c:	78 0b 00 00 	mvhi r11,0x0
 340:	39 6b 0c a0 	ori r11,r11,0xca0
 344:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 348:	35 6d 00 80 	addi r13,r11,128
 34c:	e0 00 00 04 	bi 35c <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 350:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 354:	45 6d 00 08 	be r11,r13,374 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 358:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 35c:	21 81 00 01 	andi r1,r12,0x1
 360:	44 20 ff fc 	be r1,r0,350 <irq_handler+0x28>
 364:	29 61 00 00 	lw r1,(r11+0)
 368:	35 6b 00 04 	addi r11,r11,4
 36c:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 370:	5d 6d ff fa 	bne r11,r13,358 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 374:	2b 9d 00 04 	lw ra,(sp+4)
 378:	2b 8b 00 10 	lw r11,(sp+16)
 37c:	2b 8c 00 0c 	lw r12,(sp+12)
 380:	2b 8d 00 08 	lw r13,(sp+8)
 384:	37 9c 00 10 	addi sp,sp,16
 388:	c3 a0 00 00 	ret

0000038c <isr_init>:

void isr_init()
{
 38c:	78 01 00 00 	mvhi r1,0x0
 390:	78 02 00 00 	mvhi r2,0x0
 394:	38 21 0c a0 	ori r1,r1,0xca0
 398:	38 42 02 f8 	ori r2,r2,0x2f8
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 39c:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 3a0:	58 22 00 00 	sw (r1+0),r2
 3a4:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 3a8:	5c 23 ff fe 	bne r1,r3,3a0 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 3ac:	c3 a0 00 00 	ret

000003b0 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 3b0:	78 03 00 00 	mvhi r3,0x0
 3b4:	3c 21 00 02 	sli r1,r1,2
 3b8:	38 63 0c a0 	ori r3,r3,0xca0
 3bc:	b4 61 18 00 	add r3,r3,r1
 3c0:	58 62 00 00 	sw (r3+0),r2
}
 3c4:	c3 a0 00 00 	ret

000003c8 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 3c8:	78 03 00 00 	mvhi r3,0x0
 3cc:	3c 21 00 02 	sli r1,r1,2
 3d0:	38 63 0c a0 	ori r3,r3,0xca0
 3d4:	78 02 00 00 	mvhi r2,0x0
 3d8:	b4 61 18 00 	add r3,r3,r1
 3dc:	38 42 02 f8 	ori r2,r2,0x2f8
 3e0:	58 62 00 00 	sw (r3+0),r2
}
 3e4:	c3 a0 00 00 	ret

000003e8 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 3e8:	78 02 00 00 	mvhi r2,0x0
 3ec:	38 42 0c 7c 	ori r2,r2,0xc7c
 3f0:	38 03 c3 50 	mvu r3,0xc350
 3f4:	28 42 00 00 	lw r2,(r2+0)
 3f8:	88 23 08 00 	mul r1,r1,r3
 3fc:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 400:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 404:	34 01 00 08 	mvi r1,8
 408:	58 41 00 0c 	sw (r2+12),r1
	// | TIMER_IRQEN;
	do {
		//halt();
		tcr = timer0->tcr1;
 40c:	28 41 00 0c 	lw r1,(r2+12)
	} while ( ! (tcr & TIMER_TRIG) );
 410:	20 21 00 01 	andi r1,r1,0x1
 414:	44 20 ff fe 	be r1,r0,40c <msleep+0x24>
}
 418:	c3 a0 00 00 	ret

0000041c <sleep>:
void sleep(int msec){

	uint32_t tcr;

	// Use timer0.1      
	timer0->compare1 = (100000*msec);
 41c:	78 04 00 00 	mvhi r4,0x0
 420:	38 84 0c 28 	ori r4,r4,0xc28
 424:	28 83 00 00 	lw r3,(r4+0)
 428:	78 02 00 00 	mvhi r2,0x0
 42c:	38 42 0c 7c 	ori r2,r2,0xc7c
 430:	28 42 00 00 	lw r2,(r2+0)
 434:	88 23 08 00 	mul r1,r1,r3
 438:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 43c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN | TIMER_IRQEN;
 440:	34 01 00 0a 	mvi r1,10
 444:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
		tcr = timer0->tcr1;
 448:	28 41 00 0c 	lw r1,(r2+12)
	} while ( ! (tcr & TIMER_TRIG) );
 44c:	20 21 00 01 	andi r1,r1,0x1
 450:	44 20 ff fe 	be r1,r0,448 <sleep+0x2c>
}
 454:	c3 a0 00 00 	ret

00000458 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000000)*nsec;
 458:	78 01 00 00 	mvhi r1,0x0
 45c:	38 21 0c 7c 	ori r1,r1,0xc7c
 460:	28 21 00 00 	lw r1,(r1+0)
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN| TIMER_IRQEN;
 464:	34 02 00 0a 	mvi r2,10
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000000)*nsec;
 468:	58 20 00 10 	sw (r1+16),r0
	timer0->counter1 = 0;
 46c:	58 20 00 14 	sw (r1+20),r0
	timer0->tcr1 = TIMER_EN| TIMER_IRQEN;
 470:	58 22 00 0c 	sw (r1+12),r2

	do {
		//halt();
		tcr = timer0->tcr1;
 474:	28 22 00 0c 	lw r2,(r1+12)
	} while ( ! (tcr & TIMER_TRIG) );
 478:	20 42 00 01 	andi r2,r2,0x1
 47c:	44 40 ff fe 	be r2,r0,474 <nsleep+0x1c>
}
 480:	c3 a0 00 00 	ret

00000484 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 484:	78 01 00 00 	mvhi r1,0x0
 488:	38 21 0c 7c 	ori r1,r1,0xc7c
 48c:	28 23 00 00 	lw r3,(r1+0)
 490:	34 02 13 88 	mvi r2,5000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 494:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 498:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 49c:	38 21 0d 20 	ori r1,r1,0xd20

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 4a0:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 4a4:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 4a8:	78 02 00 00 	mvhi r2,0x0
 4ac:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 4b0:	34 04 00 0e 	mvi r4,14
 4b4:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 4b8:	38 21 0c a0 	ori r1,r1,0xca0
 4bc:	38 42 02 fc 	ori r2,r2,0x2fc
 4c0:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 4c4:	c3 a0 00 00 	ret

000004c8 <wifi_getchar>:
			c = uart_getchar();
			return c;
			break;
		}
	}
	return '\n';
 4c8:	78 01 00 00 	mvhi r1,0x0
 4cc:	38 21 0c 78 	ori r1,r1,0xc78
 4d0:	28 22 00 00 	lw r2,(r1+0)
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 4d4:	34 03 00 00 	mvi r3,0
		c = uart_getchar();
		if (c ==':'){
 4d8:	34 04 00 3a 	mvi r4,58
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 4dc:	34 05 00 14 	mvi r5,20
	//uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 4e0:	28 41 00 00 	lw r1,(r2+0)
 4e4:	20 21 00 01 	andi r1,r1,0x1
 4e8:	44 20 ff fe 	be r1,r0,4e0 <wifi_getchar+0x18>
	return uart0->rxtx;
 4ec:	28 41 00 04 	lw r1,(r2+4)
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 4f0:	34 63 00 01 	addi r3,r3,1
		c = uart_getchar();
		if (c ==':'){
 4f4:	20 21 00 ff 	andi r1,r1,0xff
 4f8:	44 24 00 04 	be r1,r4,508 <wifi_getchar+0x40>
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 4fc:	5c 65 ff f9 	bne r3,r5,4e0 <wifi_getchar+0x18>
			c = uart_getchar();
			return c;
			break;
		}
	}
	return '\n';
 500:	34 01 00 0a 	mvi r1,10

}
 504:	c3 a0 00 00 	ret
	//uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 508:	28 41 00 00 	lw r1,(r2+0)
 50c:	20 21 00 01 	andi r1,r1,0x1
 510:	44 20 ff fe 	be r1,r0,508 <wifi_getchar+0x40>
	return uart0->rxtx;
 514:	28 41 00 04 	lw r1,(r2+4)
 518:	20 21 00 ff 	andi r1,r1,0xff
	int i=0;
	for(i=0;i<20;i++){
		c = uart_getchar();
		if (c ==':'){
			c = uart_getchar();
			return c;
 51c:	c3 a0 00 00 	ret

00000520 <ok>:
		a=uart_getchar();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
 520:	78 01 00 00 	mvhi r1,0x0
 524:	38 21 0c 78 	ori r1,r1,0xc78
 528:	28 22 00 00 	lw r2,(r1+0)
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 52c:	34 03 00 00 	mvi r3,0
		a=uart_getchar();
		if(a=='K'){
 530:	34 04 00 4b 	mvi r4,75
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 534:	34 05 00 1e 	mvi r5,30
	//uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 538:	28 41 00 00 	lw r1,(r2+0)
 53c:	20 21 00 01 	andi r1,r1,0x1
 540:	44 20 ff fe 	be r1,r0,538 <ok+0x18>
	return uart0->rxtx;
 544:	28 41 00 04 	lw r1,(r2+4)
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 548:	34 63 00 01 	addi r3,r3,1
		a=uart_getchar();
		if(a=='K'){
 54c:	20 21 00 ff 	andi r1,r1,0xff
 550:	44 24 00 04 	be r1,r4,560 <ok+0x40>
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 554:	5c 65 ff f9 	bne r3,r5,538 <ok+0x18>
		a=uart_getchar();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
 558:	34 01 00 00 	mvi r1,0
 55c:	c3 a0 00 00 	ret
	int i=0;
	char a;
	for(i=0;i<30;i++){
		a=uart_getchar();
		if(a=='K'){
			return 1;
 560:	34 01 00 01 	mvi r1,1
		}
	}
	return 0;

}
 564:	c3 a0 00 00 	ret

00000568 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 568:	c3 a0 00 00 	ret

0000056c <uart_getchar>:

char uart_getchar()
{   
 56c:	78 01 00 00 	mvhi r1,0x0
 570:	38 21 0c 78 	ori r1,r1,0xc78
 574:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 578:	28 41 00 00 	lw r1,(r2+0)
 57c:	20 21 00 01 	andi r1,r1,0x1
 580:	44 20 ff fe 	be r1,r0,578 <uart_getchar+0xc>
	return uart0->rxtx;
 584:	28 41 00 04 	lw r1,(r2+4)
}
 588:	20 21 00 ff 	andi r1,r1,0xff
 58c:	c3 a0 00 00 	ret

00000590 <uart_putchar>:

void uart_putchar(char c)
{
 590:	78 02 00 00 	mvhi r2,0x0
 594:	38 42 0c 78 	ori r2,r2,0xc78
 598:	28 43 00 00 	lw r3,(r2+0)
 59c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 5a0:	28 62 00 00 	lw r2,(r3+0)
 5a4:	20 42 00 10 	andi r2,r2,0x10
 5a8:	5c 40 ff fe 	bne r2,r0,5a0 <uart_putchar+0x10>
	uart0->rxtx = c;
 5ac:	58 61 00 04 	sw (r3+4),r1
}
 5b0:	c3 a0 00 00 	ret

000005b4 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 5b4:	40 24 00 00 	lbu r4,(r1+0)
 5b8:	44 80 00 0b 	be r4,r0,5e4 <uart_putstr+0x30>
 5bc:	78 02 00 00 	mvhi r2,0x0
 5c0:	38 42 0c 78 	ori r2,r2,0xc78
 5c4:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 5c8:	28 62 00 00 	lw r2,(r3+0)
 5cc:	20 42 00 10 	andi r2,r2,0x10
 5d0:	5c 40 ff fe 	bne r2,r0,5c8 <uart_putstr+0x14>
	uart0->rxtx = c;
 5d4:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 5d8:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 5dc:	40 24 00 00 	lbu r4,(r1+0)
 5e0:	5c 82 ff fa 	bne r4,r2,5c8 <uart_putstr+0x14>
 5e4:	c3 a0 00 00 	ret

000005e8 <wifi_putchar>:
		uart_putstr("AT+CIPSERVER=1,80\r\n");
		c = ok();
	}
}

void wifi_putchar(char a){
 5e8:	37 9c ff ec 	addi sp,sp,-20
 5ec:	5b 8b 00 14 	sw (sp+20),r11
 5f0:	5b 8c 00 10 	sw (sp+16),r12
 5f4:	5b 8d 00 0c 	sw (sp+12),r13
 5f8:	5b 8e 00 08 	sw (sp+8),r14
 5fc:	5b 9d 00 04 	sw (sp+4),ra
 600:	78 0d 00 00 	mvhi r13,0x0
 604:	78 0c 00 00 	mvhi r12,0x0
 608:	20 2e 00 ff 	andi r14,r1,0xff
 60c:	39 ad 0c 34 	ori r13,r13,0xc34
 610:	39 8c 0c 78 	ori r12,r12,0xc78
	int c = 0; 	  
	while(c == 0){
		uart_putstr("AT+CIPSEND=0,1\r\n");
 614:	b9 a0 08 00 	mv r1,r13
 618:	fb ff ff e7 	calli 5b4 <uart_putstr>
 61c:	29 82 00 00 	lw r2,(r12+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 620:	28 4b 00 00 	lw r11,(r2+0)
 624:	21 6b 00 10 	andi r11,r11,0x10
 628:	5d 60 ff fe 	bne r11,r0,620 <wifi_putchar+0x38>
	uart0->rxtx = c;
 62c:	58 4e 00 04 	sw (r2+4),r14
void wifi_putchar(char a){
	int c = 0; 	  
	while(c == 0){
		uart_putstr("AT+CIPSEND=0,1\r\n");
		uart_putchar(a);
		c = ok();
 630:	fb ff ff bc 	calli 520 <ok>
	}
}

void wifi_putchar(char a){
	int c = 0; 	  
	while(c == 0){
 634:	44 2b ff f8 	be r1,r11,614 <wifi_putchar+0x2c>
		uart_putstr("AT+CIPSEND=0,1\r\n");
		uart_putchar(a);
		c = ok();
	}
}
 638:	2b 9d 00 04 	lw ra,(sp+4)
 63c:	2b 8b 00 14 	lw r11,(sp+20)
 640:	2b 8c 00 10 	lw r12,(sp+16)
 644:	2b 8d 00 0c 	lw r13,(sp+12)
 648:	2b 8e 00 08 	lw r14,(sp+8)
 64c:	37 9c 00 14 	addi sp,sp,20
 650:	c3 a0 00 00 	ret

00000654 <init_wifi>:
}
/***************************************************************************
 * WIFI ESP8266 Functions
 */

void init_wifi(){ //configurar el modulo como estación con puerto 80
 654:	37 9c ff f8 	addi sp,sp,-8
 658:	5b 8b 00 08 	sw (sp+8),r11
 65c:	5b 9d 00 04 	sw (sp+4),ra
	uart_putstr("AT+RST\r\n");
 660:	78 01 00 00 	mvhi r1,0x0
 664:	38 21 0c 48 	ori r1,r1,0xc48
 668:	fb ff ff d3 	calli 5b4 <uart_putstr>
	msleep(200);
 66c:	34 01 00 c8 	mvi r1,200
 670:	78 0b 00 00 	mvhi r11,0x0
 674:	fb ff ff 5d 	calli 3e8 <msleep>
 678:	39 6b 0c 54 	ori r11,r11,0xc54
	int c = 0;
	while(c==0){
		uart_putstr("AT+CIPMUX=1\r\n");
 67c:	b9 60 08 00 	mv r1,r11
 680:	fb ff ff cd 	calli 5b4 <uart_putstr>
		c = ok();
 684:	fb ff ff a7 	calli 520 <ok>

void init_wifi(){ //configurar el modulo como estación con puerto 80
	uart_putstr("AT+RST\r\n");
	msleep(200);
	int c = 0;
	while(c==0){
 688:	44 20 ff fd 	be r1,r0,67c <init_wifi+0x28>
 68c:	78 0b 00 00 	mvhi r11,0x0
 690:	39 6b 0c 64 	ori r11,r11,0xc64
		uart_putstr("AT+CIPMUX=1\r\n");
		c = ok();
	}
	c = 0;
	while (c==0){
		uart_putstr("AT+CIPSERVER=1,80\r\n");
 694:	b9 60 08 00 	mv r1,r11
 698:	fb ff ff c7 	calli 5b4 <uart_putstr>
		c = ok();
 69c:	fb ff ff a1 	calli 520 <ok>
	while(c==0){
		uart_putstr("AT+CIPMUX=1\r\n");
		c = ok();
	}
	c = 0;
	while (c==0){
 6a0:	44 20 ff fd 	be r1,r0,694 <init_wifi+0x40>
		uart_putstr("AT+CIPSERVER=1,80\r\n");
		c = ok();
	}
}
 6a4:	2b 9d 00 04 	lw ra,(sp+4)
 6a8:	2b 8b 00 08 	lw r11,(sp+8)
 6ac:	37 9c 00 08 	addi sp,sp,8
 6b0:	c3 a0 00 00 	ret

000006b4 <uart_getchar1>:
	}
}
//uart1

char uart_getchar1()
{   
 6b4:	78 01 00 00 	mvhi r1,0x0
 6b8:	38 21 0c 88 	ori r1,r1,0xc88
 6bc:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;
 6c0:	28 41 00 00 	lw r1,(r2+0)
 6c4:	20 21 00 01 	andi r1,r1,0x1
 6c8:	44 20 ff fe 	be r1,r0,6c0 <uart_getchar1+0xc>
	return uart1->rxtx;
 6cc:	28 41 00 04 	lw r1,(r2+4)
}
 6d0:	20 21 00 ff 	andi r1,r1,0xff
 6d4:	c3 a0 00 00 	ret

000006d8 <uart_putchar1>:

void uart_putchar1(char c)
{
 6d8:	78 02 00 00 	mvhi r2,0x0
 6dc:	38 42 0c 88 	ori r2,r2,0xc88
 6e0:	28 43 00 00 	lw r3,(r2+0)
 6e4:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
 6e8:	28 62 00 00 	lw r2,(r3+0)
 6ec:	20 42 00 10 	andi r2,r2,0x10
 6f0:	5c 40 ff fe 	bne r2,r0,6e8 <uart_putchar1+0x10>
	uart1->rxtx = c;
 6f4:	58 61 00 04 	sw (r3+4),r1
}
 6f8:	c3 a0 00 00 	ret

000006fc <uart_putstr1>:

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 6fc:	40 24 00 00 	lbu r4,(r1+0)
 700:	44 80 00 0b 	be r4,r0,72c <uart_putstr1+0x30>
 704:	78 02 00 00 	mvhi r2,0x0
 708:	38 42 0c 88 	ori r2,r2,0xc88
 70c:	28 43 00 00 	lw r3,(r2+0)
	return uart1->rxtx;
}

void uart_putchar1(char c)
{
	while (uart1->ucr & UART_BUSY) ;
 710:	28 62 00 00 	lw r2,(r3+0)
 714:	20 42 00 10 	andi r2,r2,0x10
 718:	5c 40 ff fe 	bne r2,r0,710 <uart_putstr1+0x14>
	uart1->rxtx = c;
 71c:	58 64 00 04 	sw (r3+4),r4
void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar1(*c);
		c++;
 720:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 724:	40 24 00 00 	lbu r4,(r1+0)
 728:	5c 82 ff fa 	bne r4,r2,710 <uart_putstr1+0x14>
 72c:	c3 a0 00 00 	ret

00000730 <write_dir>:
 */


void write_dir(char dir)
{
	gpio0->gpio_dir=dir;
 730:	78 02 00 00 	mvhi r2,0x0
 734:	38 42 0c 80 	ori r2,r2,0xc80
 738:	28 42 00 00 	lw r2,(r2+0)
 * GPIO Functions
 */


void write_dir(char dir)
{
 73c:	20 21 00 ff 	andi r1,r1,0xff
	gpio0->gpio_dir=dir;
 740:	58 41 00 08 	sw (r2+8),r1

}
 744:	c3 a0 00 00 	ret

00000748 <write_data>:


void write_data(char data)
{
	gpio0->gpio_o=data; 
 748:	78 02 00 00 	mvhi r2,0x0
 74c:	38 42 0c 80 	ori r2,r2,0xc80
 750:	28 42 00 00 	lw r2,(r2+0)

}


void write_data(char data)
{
 754:	20 21 00 ff 	andi r1,r1,0xff
	gpio0->gpio_o=data; 
 758:	58 41 00 04 	sw (r2+4),r1

}
 75c:	c3 a0 00 00 	ret

00000760 <read_data>:


char read_data()
{
	return gpio0->gpio_i;
 760:	78 01 00 00 	mvhi r1,0x0
 764:	38 21 0c 80 	ori r1,r1,0xc80
 768:	28 21 00 00 	lw r1,(r1+0)
 76c:	28 21 00 00 	lw r1,(r1+0)

}
 770:	20 21 00 ff 	andi r1,r1,0xff
 774:	c3 a0 00 00 	ret

00000778 <set_period>:
/***************************************************************************
 * Functions PWM //FUNCIONES PRIMITIVAS
 */

void set_period(int p){
	pwm0->period=p;
 778:	78 02 00 00 	mvhi r2,0x0
 77c:	38 42 0c 8c 	ori r2,r2,0xc8c
 780:	28 42 00 00 	lw r2,(r2+0)
 784:	58 41 00 00 	sw (r2+0),r1
}
 788:	c3 a0 00 00 	ret

0000078c <set_motor1>:
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
 78c:	78 02 00 00 	mvhi r2,0x0
 790:	38 42 0c 8c 	ori r2,r2,0xc8c
 794:	28 42 00 00 	lw r2,(r2+0)
 798:	58 41 00 04 	sw (r2+4),r1
}
 79c:	c3 a0 00 00 	ret

000007a0 <set_motor2>:
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
 7a0:	78 02 00 00 	mvhi r2,0x0
 7a4:	38 42 0c 8c 	ori r2,r2,0xc8c
 7a8:	28 42 00 00 	lw r2,(r2+0)
 7ac:	58 41 00 08 	sw (r2+8),r1
}
 7b0:	c3 a0 00 00 	ret

000007b4 <set_motor3>:
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
 7b4:	78 02 00 00 	mvhi r2,0x0
 7b8:	38 42 0c 8c 	ori r2,r2,0xc8c
 7bc:	28 42 00 00 	lw r2,(r2+0)
 7c0:	58 41 00 0c 	sw (r2+12),r1
}
 7c4:	c3 a0 00 00 	ret

000007c8 <set_motor4>:
void set_motor4(int wk){
	pwm0-> duty_m4=wk;
 7c8:	78 02 00 00 	mvhi r2,0x0
 7cc:	38 42 0c 8c 	ori r2,r2,0xc8c
 7d0:	28 42 00 00 	lw r2,(r2+0)
 7d4:	58 41 00 10 	sw (r2+16),r1
}
 7d8:	c3 a0 00 00 	ret

000007dc <setMotors>:
int velM1=0xEA60;
int velM2=0xEA60;
int velM3=0xEA60;
int velM4=0xEA60;

void setMotors(){
 7dc:	37 9c ff fc 	addi sp,sp,-4
 7e0:	5b 9d 00 04 	sw (sp+4),ra
/***************************************************************************
 * Functions PWM //FUNCIONES PRIMITIVAS
 */

void set_period(int p){
	pwm0->period=p;
 7e4:	78 01 00 00 	mvhi r1,0x0
 7e8:	78 05 00 00 	mvhi r5,0x0
 7ec:	38 a5 0c 2c 	ori r5,r5,0xc2c
 7f0:	38 21 0c 8c 	ori r1,r1,0xc8c
 7f4:	28 22 00 00 	lw r2,(r1+0)
 7f8:	28 a4 00 00 	lw r4,(r5+0)
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
 7fc:	38 03 ea 60 	mvu r3,0xea60
	set_period(0x1E8480); //F=50Hz
	set_motor1(0xEA60);
	set_motor2(0xEA60);
	set_motor3(0xEA60);
	set_motor4(0xEA60);
	msleep(0x5E8);
 800:	34 01 05 e8 	mvi r1,1512
/***************************************************************************
 * Functions PWM //FUNCIONES PRIMITIVAS
 */

void set_period(int p){
	pwm0->period=p;
 804:	58 44 00 00 	sw (r2+0),r4
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
 808:	58 43 00 04 	sw (r2+4),r3
}
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
 80c:	58 43 00 08 	sw (r2+8),r3
}
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
 810:	58 43 00 0c 	sw (r2+12),r3
}
void set_motor4(int wk){
	pwm0-> duty_m4=wk;
 814:	58 43 00 10 	sw (r2+16),r3
	set_period(0x1E8480); //F=50Hz
	set_motor1(0xEA60);
	set_motor2(0xEA60);
	set_motor3(0xEA60);
	set_motor4(0xEA60);
	msleep(0x5E8);
 818:	fb ff fe f4 	calli 3e8 <msleep>
}
 81c:	2b 9d 00 04 	lw ra,(sp+4)
 820:	37 9c 00 04 	addi sp,sp,4
 824:	c3 a0 00 00 	ret

00000828 <forward_backward>:

void forward_backward(){}
 828:	c3 a0 00 00 	ret

0000082c <rght_lft>:
void rght_lft(){}
 82c:	c3 a0 00 00 	ret

00000830 <testMotos>:
	
void testMotos(){
 830:	37 9c ff f8 	addi sp,sp,-8
 834:	5b 8b 00 08 	sw (sp+8),r11
 838:	5b 9d 00 04 	sw (sp+4),ra

void set_period(int p){
	pwm0->period=p;
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
 83c:	78 0b 00 00 	mvhi r11,0x0
 840:	78 01 00 00 	mvhi r1,0x0
 844:	39 6b 0c 8c 	ori r11,r11,0xc8c
 848:	38 21 0c 30 	ori r1,r1,0xc30
 84c:	28 22 00 00 	lw r2,(r1+0)
 850:	29 63 00 00 	lw r3,(r11+0)
void testMotos(){
	set_motor1(0X5DC+0xFD20); //0x10FC=0X5DC+0xFD20
	set_motor2(0X5DC+0xFD20);
	set_motor3(0X5DC+0xFD20);
	set_motor4(0X5DC+0xFD20);
	msleep(3000);
 854:	34 01 0b b8 	mvi r1,3000

void set_period(int p){
	pwm0->period=p;
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
 858:	58 62 00 04 	sw (r3+4),r2
}
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
 85c:	58 62 00 08 	sw (r3+8),r2
}
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
 860:	58 62 00 0c 	sw (r3+12),r2
}
void set_motor4(int wk){
	pwm0-> duty_m4=wk;
 864:	58 62 00 10 	sw (r3+16),r2
void testMotos(){
	set_motor1(0X5DC+0xFD20); //0x10FC=0X5DC+0xFD20
	set_motor2(0X5DC+0xFD20);
	set_motor3(0X5DC+0xFD20);
	set_motor4(0X5DC+0xFD20);
	msleep(3000);
 868:	fb ff fe e0 	calli 3e8 <msleep>

void set_period(int p){
	pwm0->period=p;
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
 86c:	29 61 00 00 	lw r1,(r11+0)
 870:	38 02 ea 60 	mvu r2,0xea60
 874:	58 22 00 04 	sw (r1+4),r2
}
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
 878:	58 22 00 08 	sw (r1+8),r2
}
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
 87c:	58 22 00 0c 	sw (r1+12),r2
}
void set_motor4(int wk){
	pwm0-> duty_m4=wk;
 880:	58 22 00 10 	sw (r1+16),r2
	msleep(3000);
	set_motor1(0xEA60); 
	set_motor2(0xEA60);
	set_motor3(0xEA60);
	set_motor4(0xEA60);
}
 884:	2b 9d 00 04 	lw ra,(sp+4)
 888:	2b 8b 00 08 	lw r11,(sp+8)
 88c:	37 9c 00 08 	addi sp,sp,8
 890:	c3 a0 00 00 	ret

00000894 <start_Read>:

/******************************************************************************
 * i2c Functons
 */
void start_Read (int r)
{  i2c0->startRead = r;
 894:	78 02 00 00 	mvhi r2,0x0
 898:	38 42 0c 84 	ori r2,r2,0xc84
 89c:	28 42 00 00 	lw r2,(r2+0)
 8a0:	58 41 00 14 	sw (r2+20),r1
}
 8a4:	c3 a0 00 00 	ret

000008a8 <start_Write>:
void start_Write (int w)
{  i2c0->startWrite = w;
 8a8:	78 02 00 00 	mvhi r2,0x0
 8ac:	38 42 0c 84 	ori r2,r2,0xc84
 8b0:	28 42 00 00 	lw r2,(r2+0)
 8b4:	58 41 00 18 	sw (r2+24),r1
}
 8b8:	c3 a0 00 00 	ret

000008bc <rw>:
void rw(int data_rw){
	i2c0->rw = data_rw;
 8bc:	78 02 00 00 	mvhi r2,0x0
 8c0:	38 42 0c 84 	ori r2,r2,0xc84
 8c4:	28 42 00 00 	lw r2,(r2+0)
 8c8:	58 41 00 0c 	sw (r2+12),r1
}
 8cc:	c3 a0 00 00 	ret

000008d0 <i2c_write>:

void i2c_write (int dirI2C, int dirIntern, int data)
{		
 8d0:	37 9c ff ec 	addi sp,sp,-20
 8d4:	5b 8b 00 14 	sw (sp+20),r11
 8d8:	5b 8c 00 10 	sw (sp+16),r12
 8dc:	5b 8d 00 0c 	sw (sp+12),r13
 8e0:	5b 8e 00 08 	sw (sp+8),r14
 8e4:	5b 9d 00 04 	sw (sp+4),ra
 */
void start_Read (int r)
{  i2c0->startRead = r;
}
void start_Write (int w)
{  i2c0->startWrite = w;
 8e8:	78 0b 00 00 	mvhi r11,0x0
 8ec:	39 6b 0c 84 	ori r11,r11,0xc84
 8f0:	29 64 00 00 	lw r4,(r11+0)
void rw(int data_rw){
	i2c0->rw = data_rw;
}

void i2c_write (int dirI2C, int dirIntern, int data)
{		
 8f4:	b8 20 68 00 	mv r13,r1
 */
void start_Read (int r)
{  i2c0->startRead = r;
}
void start_Write (int w)
{  i2c0->startWrite = w;
 8f8:	34 01 00 01 	mvi r1,1
 8fc:	58 81 00 18 	sw (r4+24),r1
}

void i2c_write (int dirI2C, int dirIntern, int data)
{		
	start_Write(1);
	msleep(10);
 900:	34 01 00 0a 	mvi r1,10
void rw(int data_rw){
	i2c0->rw = data_rw;
}

void i2c_write (int dirI2C, int dirIntern, int data)
{		
 904:	b8 40 70 00 	mv r14,r2
 908:	b8 60 60 00 	mv r12,r3
	start_Write(1);
	msleep(10);
 90c:	fb ff fe b7 	calli 3e8 <msleep>
 */
void start_Read (int r)
{  i2c0->startRead = r;
}
void start_Write (int w)
{  i2c0->startWrite = w;
 910:	29 64 00 00 	lw r4,(r11+0)
 914:	58 80 00 18 	sw (r4+24),r0
}
void rw(int data_rw){
	i2c0->rw = data_rw;
 918:	58 80 00 0c 	sw (r4+12),r0
{		
	start_Write(1);
	msleep(10);
	start_Write(0);
	rw(0); 
	while((i2c0->availWrite)==0x00);
 91c:	28 85 00 04 	lw r5,(r4+4)
 920:	44 a0 ff ff 	be r5,r0,91c <i2c_write+0x4c>
	i2c0->data = ((dirI2C<<16)|(dirIntern<<8)|data);	
 924:	3d c2 00 08 	sli r2,r14,8
 928:	3d a5 00 10 	sli r5,r13,16
 92c:	b8 4c 08 00 	or r1,r2,r12
 930:	b8 25 08 00 	or r1,r1,r5
 934:	58 81 00 10 	sw (r4+16),r1

}
 938:	2b 9d 00 04 	lw ra,(sp+4)
 93c:	2b 8b 00 14 	lw r11,(sp+20)
 940:	2b 8c 00 10 	lw r12,(sp+16)
 944:	2b 8d 00 0c 	lw r13,(sp+12)
 948:	2b 8e 00 08 	lw r14,(sp+8)
 94c:	37 9c 00 14 	addi sp,sp,20
 950:	c3 a0 00 00 	ret

00000954 <i2c_read>:

int8_t i2c_read (int dirI2C, int dirIntern){  
 954:	37 9c ff ec 	addi sp,sp,-20
 958:	5b 8b 00 14 	sw (sp+20),r11
 95c:	5b 8c 00 10 	sw (sp+16),r12
 960:	5b 8d 00 0c 	sw (sp+12),r13
 964:	5b 8e 00 08 	sw (sp+8),r14
 968:	5b 9d 00 04 	sw (sp+4),ra

/******************************************************************************
 * i2c Functons
 */
void start_Read (int r)
{  i2c0->startRead = r;
 96c:	78 0b 00 00 	mvhi r11,0x0
 970:	39 6b 0c 84 	ori r11,r11,0xc84
 974:	29 63 00 00 	lw r3,(r11+0)
 978:	34 0d 00 01 	mvi r13,1
	while((i2c0->availWrite)==0x00);
	i2c0->data = ((dirI2C<<16)|(dirIntern<<8)|data);	

}

int8_t i2c_read (int dirI2C, int dirIntern){  
 97c:	b8 20 60 00 	mv r12,r1

/******************************************************************************
 * i2c Functons
 */
void start_Read (int r)
{  i2c0->startRead = r;
 980:	58 6d 00 14 	sw (r3+20),r13

}

int8_t i2c_read (int dirI2C, int dirIntern){  
	start_Read(1);
	msleep(10);
 984:	34 01 00 0a 	mvi r1,10
	while((i2c0->availWrite)==0x00);
	i2c0->data = ((dirI2C<<16)|(dirIntern<<8)|data);	

}

int8_t i2c_read (int dirI2C, int dirIntern){  
 988:	b8 40 70 00 	mv r14,r2
	start_Read(1);
	msleep(10);
 98c:	fb ff fe 97 	calli 3e8 <msleep>

/******************************************************************************
 * i2c Functons
 */
void start_Read (int r)
{  i2c0->startRead = r;
 990:	29 63 00 00 	lw r3,(r11+0)
int8_t i2c_read (int dirI2C, int dirIntern){  
	start_Read(1);
	msleep(10);
	start_Read(0);
	rw(1);
	while((i2c0->availRead)==0x04);
 994:	34 05 00 04 	mvi r5,4

/******************************************************************************
 * i2c Functons
 */
void start_Read (int r)
{  i2c0->startRead = r;
 998:	58 60 00 14 	sw (r3+20),r0
}
void start_Write (int w)
{  i2c0->startWrite = w;
}
void rw(int data_rw){
	i2c0->rw = data_rw;
 99c:	58 6d 00 0c 	sw (r3+12),r13
int8_t i2c_read (int dirI2C, int dirIntern){  
	start_Read(1);
	msleep(10);
	start_Read(0);
	rw(1);
	while((i2c0->availRead)==0x04);
 9a0:	28 64 00 08 	lw r4,(r3+8)
 9a4:	44 85 ff ff 	be r4,r5,9a0 <i2c_read+0x4c>
	i2c0->data = ((dirI2C<<15)|(dirIntern<<7)|dirI2C);
 9a8:	3d 81 00 0f 	sli r1,r12,15
 9ac:	3d c2 00 07 	sli r2,r14,7
 9b0:	b8 2c 60 00 	or r12,r1,r12
 9b4:	b9 82 60 00 	or r12,r12,r2
 9b8:	58 6c 00 10 	sw (r3+16),r12
	return i2c0->i2c_data_out;
 9bc:	28 61 00 00 	lw r1,(r3+0)
}
 9c0:	b0 20 08 00 	sextb r1,r1
 9c4:	2b 9d 00 04 	lw ra,(sp+4)
 9c8:	2b 8b 00 14 	lw r11,(sp+20)
 9cc:	2b 8c 00 10 	lw r12,(sp+16)
 9d0:	2b 8d 00 0c 	lw r13,(sp+12)
 9d4:	2b 8e 00 08 	lw r14,(sp+8)
 9d8:	37 9c 00 14 	addi sp,sp,20
 9dc:	c3 a0 00 00 	ret

000009e0 <initImu>:

/******************************************************************************
 * mpu6050 Functions
 */
void initImu(){
 9e0:	37 9c ff fc 	addi sp,sp,-4
 9e4:	5b 9d 00 04 	sw (sp+4),ra
	//Reset device, reset all registers, clear gyro and accelerometer bias registers		
	i2c_write(ADDRESS_I2C,PWR_MGMT_1,0x80);
 9e8:	34 02 00 6b 	mvi r2,107
 9ec:	34 03 00 80 	mvi r3,128
 9f0:	34 01 00 68 	mvi r1,104
 9f4:	fb ff ff b7 	calli 8d0 <i2c_write>
	sleep(100); 
 9f8:	34 01 00 64 	mvi r1,100
 9fc:	fb ff fe 88 	calli 41c <sleep>
	//Get stable time source
	i2c_write(ADDRESS_I2C,PWR_MGMT_1,0x01);
 a00:	34 01 00 68 	mvi r1,104
 a04:	34 02 00 6b 	mvi r2,107
 a08:	34 03 00 01 	mvi r3,1
 a0c:	fb ff ff b1 	calli 8d0 <i2c_write>
	i2c_write(ADDRESS_I2C,PWR_MGMT_2,0x00);
 a10:	34 02 00 6c 	mvi r2,108
 a14:	34 03 00 00 	mvi r3,0
 a18:	34 01 00 68 	mvi r1,104
 a1c:	fb ff ff ad 	calli 8d0 <i2c_write>
	sleep(200);
 a20:	34 01 00 c8 	mvi r1,200
 a24:	fb ff fe 7e 	calli 41c <sleep>
	// Configure device for bias calculation
	i2c_write(ADDRESS_I2C,INT_ENABLE,0x00);
 a28:	34 01 00 68 	mvi r1,104
 a2c:	34 02 00 38 	mvi r2,56
 a30:	34 03 00 00 	mvi r3,0
 a34:	fb ff ff a7 	calli 8d0 <i2c_write>
	i2c_write(ADDRESS_I2C,FIFO_EN,0x00);
 a38:	34 01 00 68 	mvi r1,104
 a3c:	34 02 00 23 	mvi r2,35
 a40:	34 03 00 00 	mvi r3,0
 a44:	fb ff ff a3 	calli 8d0 <i2c_write>
	i2c_write(ADDRESS_I2C,PWR_MGMT_1,0x00);
 a48:	34 01 00 68 	mvi r1,104
 a4c:	34 02 00 6b 	mvi r2,107
 a50:	34 03 00 00 	mvi r3,0
 a54:	fb ff ff 9f 	calli 8d0 <i2c_write>
	i2c_write(ADDRESS_I2C,I2C_MST_CTRL,0x00);
 a58:	34 01 00 68 	mvi r1,104
 a5c:	34 02 00 24 	mvi r2,36
 a60:	34 03 00 00 	mvi r3,0
 a64:	fb ff ff 9b 	calli 8d0 <i2c_write>
	i2c_write(ADDRESS_I2C,USER_CTRL,0x00);
 a68:	34 01 00 68 	mvi r1,104
 a6c:	34 02 00 6a 	mvi r2,106
 a70:	34 03 00 00 	mvi r3,0
 a74:	fb ff ff 97 	calli 8d0 <i2c_write>
	i2c_write(ADDRESS_I2C,USER_CTRL,0x0C);
 a78:	34 02 00 6a 	mvi r2,106
 a7c:	34 03 00 0c 	mvi r3,12
 a80:	34 01 00 68 	mvi r1,104
 a84:	fb ff ff 93 	calli 8d0 <i2c_write>
	sleep(15);
 a88:	34 01 00 0f 	mvi r1,15
 a8c:	fb ff fe 64 	calli 41c <sleep>
	// Configure MPU6050 gyro and accelerometer for bias calculation
	i2c_write(ADDRESS_I2C,CONFIG,0x01);
 a90:	34 01 00 68 	mvi r1,104
 a94:	34 02 00 1a 	mvi r2,26
 a98:	34 03 00 01 	mvi r3,1
 a9c:	fb ff ff 8d 	calli 8d0 <i2c_write>
	i2c_write(ADDRESS_I2C,SMPLRT_DIV,0x00);
 aa0:	34 01 00 68 	mvi r1,104
 aa4:	34 02 00 19 	mvi r2,25
 aa8:	34 03 00 00 	mvi r3,0
 aac:	fb ff ff 89 	calli 8d0 <i2c_write>
	i2c_write(ADDRESS_I2C,GYRO_CONFIG,0x01);
 ab0:	34 01 00 68 	mvi r1,104
 ab4:	34 02 00 1b 	mvi r2,27
 ab8:	34 03 00 01 	mvi r3,1
 abc:	fb ff ff 85 	calli 8d0 <i2c_write>
	i2c_write(ADDRESS_I2C,ACCEL_CONFIG,0x00);
 ac0:	34 01 00 68 	mvi r1,104
 ac4:	34 02 00 1c 	mvi r2,28
 ac8:	34 03 00 00 	mvi r3,0
 acc:	fb ff ff 81 	calli 8d0 <i2c_write>
	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	i2c_write(ADDRESS_I2C,USER_CTRL,0x40);
 ad0:	34 01 00 68 	mvi r1,104
 ad4:	34 02 00 6a 	mvi r2,106
 ad8:	34 03 00 40 	mvi r3,64
 adc:	fb ff ff 7d 	calli 8d0 <i2c_write>
	i2c_write(ADDRESS_I2C,ACCEL_CONFIG,0x78);
 ae0:	34 02 00 1c 	mvi r2,28
 ae4:	34 03 00 78 	mvi r3,120
 ae8:	34 01 00 68 	mvi r1,104
 aec:	fb ff ff 79 	calli 8d0 <i2c_write>
	sleep(80);
 af0:	34 01 00 50 	mvi r1,80
 af4:	fb ff fe 4a 	calli 41c <sleep>
}
 af8:	2b 9d 00 04 	lw ra,(sp+4)
 afc:	37 9c 00 04 	addi sp,sp,4
 b00:	c3 a0 00 00 	ret

00000b04 <getAcX>:

int getAcX(){
 b04:	37 9c ff f4 	addi sp,sp,-12
 b08:	5b 8b 00 0c 	sw (sp+12),r11
 b0c:	5b 8c 00 08 	sw (sp+8),r12
 b10:	5b 9d 00 04 	sw (sp+4),ra
	int8_t AcXh = i2c_read (ADDRESS_I2C, ACCEL_XOUT_H);
 b14:	34 02 00 3b 	mvi r2,59
 b18:	34 01 00 68 	mvi r1,104
 b1c:	fb ff ff 8e 	calli 954 <i2c_read>
 b20:	b8 20 60 00 	mv r12,r1
	sleep(1);
 b24:	34 01 00 01 	mvi r1,1
 b28:	fb ff fe 3d 	calli 41c <sleep>
	char AcXl = i2c_read (ADDRESS_I2C, ACCEL_XOUT_L);
 b2c:	34 02 00 3c 	mvi r2,60
 b30:	34 01 00 68 	mvi r1,104
 b34:	fb ff ff 88 	calli 954 <i2c_read>
 b38:	b8 20 58 00 	mv r11,r1
	sleep(1);
 b3c:	34 01 00 01 	mvi r1,1
 b40:	fb ff fe 37 	calli 41c <sleep>
	int acX= (AcXh<<8)+AcXl;
 b44:	3d 82 00 08 	sli r2,r12,8
 b48:	21 61 00 ff 	andi r1,r11,0xff
	return acX;
}
 b4c:	b4 22 08 00 	add r1,r1,r2
 b50:	2b 9d 00 04 	lw ra,(sp+4)
 b54:	2b 8b 00 0c 	lw r11,(sp+12)
 b58:	2b 8c 00 08 	lw r12,(sp+8)
 b5c:	37 9c 00 0c 	addi sp,sp,12
 b60:	c3 a0 00 00 	ret

00000b64 <getAcY>:

int getAcY(){
 b64:	37 9c ff f4 	addi sp,sp,-12
 b68:	5b 8b 00 0c 	sw (sp+12),r11
 b6c:	5b 8c 00 08 	sw (sp+8),r12
 b70:	5b 9d 00 04 	sw (sp+4),ra
	int8_t AcYh = i2c_read (ADDRESS_I2C, ACCEL_YOUT_H);
 b74:	34 02 00 3d 	mvi r2,61
 b78:	34 01 00 68 	mvi r1,104
 b7c:	fb ff ff 76 	calli 954 <i2c_read>
 b80:	b8 20 60 00 	mv r12,r1
	sleep(1);
 b84:	34 01 00 01 	mvi r1,1
 b88:	fb ff fe 25 	calli 41c <sleep>
	char AcYl = i2c_read (ADDRESS_I2C, ACCEL_YOUT_L);
 b8c:	34 02 00 3e 	mvi r2,62
 b90:	34 01 00 68 	mvi r1,104
 b94:	fb ff ff 70 	calli 954 <i2c_read>
 b98:	b8 20 58 00 	mv r11,r1
	sleep(1);
 b9c:	34 01 00 01 	mvi r1,1
 ba0:	fb ff fe 1f 	calli 41c <sleep>
	int acY= (AcYh<<8)+AcYl;
 ba4:	3d 82 00 08 	sli r2,r12,8
 ba8:	21 61 00 ff 	andi r1,r11,0xff
	return acY;

}
 bac:	b4 22 08 00 	add r1,r1,r2
 bb0:	2b 9d 00 04 	lw ra,(sp+4)
 bb4:	2b 8b 00 0c 	lw r11,(sp+12)
 bb8:	2b 8c 00 08 	lw r12,(sp+8)
 bbc:	37 9c 00 0c 	addi sp,sp,12
 bc0:	c3 a0 00 00 	ret

00000bc4 <getAcZ>:
int getAcZ(){
 bc4:	37 9c ff f4 	addi sp,sp,-12
 bc8:	5b 8b 00 0c 	sw (sp+12),r11
 bcc:	5b 8c 00 08 	sw (sp+8),r12
 bd0:	5b 9d 00 04 	sw (sp+4),ra
	int8_t AcZh = i2c_read (ADDRESS_I2C, ACCEL_ZOUT_H);
 bd4:	34 02 00 3f 	mvi r2,63
 bd8:	34 01 00 68 	mvi r1,104
 bdc:	fb ff ff 5e 	calli 954 <i2c_read>
 be0:	b8 20 60 00 	mv r12,r1
	sleep(1);
 be4:	34 01 00 01 	mvi r1,1
 be8:	fb ff fe 0d 	calli 41c <sleep>
	char AcZl = i2c_read (ADDRESS_I2C, ACCEL_ZOUT_L);
 bec:	34 02 00 40 	mvi r2,64
 bf0:	34 01 00 68 	mvi r1,104
 bf4:	fb ff ff 58 	calli 954 <i2c_read>
 bf8:	b8 20 58 00 	mv r11,r1
	sleep(1);
 bfc:	34 01 00 01 	mvi r1,1
 c00:	fb ff fe 07 	calli 41c <sleep>
	int acZ= (AcZh<<8)+AcZl;
 c04:	3d 82 00 08 	sli r2,r12,8
 c08:	21 61 00 ff 	andi r1,r11,0xff
	return acZ;	
}
 c0c:	b4 22 08 00 	add r1,r1,r2
 c10:	2b 9d 00 04 	lw ra,(sp+4)
 c14:	2b 8b 00 0c 	lw r11,(sp+12)
 c18:	2b 8c 00 08 	lw r12,(sp+8)
 c1c:	37 9c 00 0c 	addi sp,sp,12
 c20:	c3 a0 00 00 	ret
