
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         00000a04  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       0000004c  00000a04  00000a04  00000a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00000a50  00000a50  00000aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000a68  00000a68  00000abc  2**2
                  ALLOC
  4 .debug_abbrev 000003ce  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cd9  00000000  00000000  00000e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000875  00000000  00000000  00001b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000270  00000000  00000000  000023d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000289  00000000  00000000  00002648  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 00000075  00000000  00000000  000028d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000040  00000000  00000000  00002946  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000355  00000000  00000000  00002986  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  00002cdb  2**0
                  CONTENTS, READONLY
 13 .debug_loc    000002d2  00000000  00000000  00002cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000090  00000000  00000000  00002fbe  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 ae 	calli 384 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 0a 70 	ori gp,gp,0xa70
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 0a 68 	ori r1,r1,0xa68
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0a ec 	ori r3,r3,0xaec

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
#define A_R 16384.0
#define G_R 131.0
 
//Conversion de radianes a grados 180/PI
#define RAD_TO_DEG = 57.295779
int main(){
 208:	37 9c ff fc 	addi sp,sp,-4
 20c:	5b 9d 00 04 	sw (sp+4),ra

	//Reset device, reset all registers, clear gyro and accelerometer bias registers		
		i2c_write(ADDRESS_I2C,PWR_MGMT_1,0x80);
 210:	34 02 00 6b 	mvi r2,107
 214:	34 03 00 80 	mvi r3,128
 218:	34 01 00 68 	mvi r1,104
 21c:	f8 00 01 b6 	calli 8f4 <i2c_write>
		sleep(100); 
 220:	34 01 00 64 	mvi r1,100
 224:	f8 00 00 95 	calli 478 <sleep>
		//Get stable time source
		i2c_write(ADDRESS_I2C,PWR_MGMT_1,0x01);
 228:	34 01 00 68 	mvi r1,104
 22c:	34 02 00 6b 	mvi r2,107
 230:	34 03 00 01 	mvi r3,1
 234:	f8 00 01 b0 	calli 8f4 <i2c_write>
		i2c_write(ADDRESS_I2C,PWR_MGMT_2,0x00);
 238:	34 02 00 6c 	mvi r2,108
 23c:	34 03 00 00 	mvi r3,0
 240:	34 01 00 68 	mvi r1,104
 244:	f8 00 01 ac 	calli 8f4 <i2c_write>
		sleep(200);
 248:	34 01 00 c8 	mvi r1,200
 24c:	f8 00 00 8b 	calli 478 <sleep>
		// Configure device for bias calculation
		i2c_write(ADDRESS_I2C,INT_ENABLE,0x00);
 250:	34 01 00 68 	mvi r1,104
 254:	34 02 00 38 	mvi r2,56
 258:	34 03 00 00 	mvi r3,0
 25c:	f8 00 01 a6 	calli 8f4 <i2c_write>
		i2c_write(ADDRESS_I2C,FIFO_EN,0x00);
 260:	34 01 00 68 	mvi r1,104
 264:	34 02 00 23 	mvi r2,35
 268:	34 03 00 00 	mvi r3,0
 26c:	f8 00 01 a2 	calli 8f4 <i2c_write>
		i2c_write(ADDRESS_I2C,PWR_MGMT_1,0x00);
 270:	34 01 00 68 	mvi r1,104
 274:	34 02 00 6b 	mvi r2,107
 278:	34 03 00 00 	mvi r3,0
 27c:	f8 00 01 9e 	calli 8f4 <i2c_write>
		i2c_write(ADDRESS_I2C,I2C_MST_CTRL,0x00);
 280:	34 01 00 68 	mvi r1,104
 284:	34 02 00 24 	mvi r2,36
 288:	34 03 00 00 	mvi r3,0
 28c:	f8 00 01 9a 	calli 8f4 <i2c_write>
		i2c_write(ADDRESS_I2C,USER_CTRL,0x00);
 290:	34 01 00 68 	mvi r1,104
 294:	34 02 00 6a 	mvi r2,106
 298:	34 03 00 00 	mvi r3,0
 29c:	f8 00 01 96 	calli 8f4 <i2c_write>
		i2c_write(ADDRESS_I2C,USER_CTRL,0x0C);
 2a0:	34 02 00 6a 	mvi r2,106
 2a4:	34 03 00 0c 	mvi r3,12
 2a8:	34 01 00 68 	mvi r1,104
 2ac:	f8 00 01 92 	calli 8f4 <i2c_write>
		sleep(15);
 2b0:	34 01 00 0f 	mvi r1,15
 2b4:	f8 00 00 71 	calli 478 <sleep>
		// Configure MPU6050 gyro and accelerometer for bias calculation
		i2c_write(ADDRESS_I2C,CONFIG,0x01);
 2b8:	34 01 00 68 	mvi r1,104
 2bc:	34 02 00 1a 	mvi r2,26
 2c0:	34 03 00 01 	mvi r3,1
 2c4:	f8 00 01 8c 	calli 8f4 <i2c_write>
		i2c_write(ADDRESS_I2C,SMPLRT_DIV,0x00);
 2c8:	34 01 00 68 	mvi r1,104
 2cc:	34 02 00 19 	mvi r2,25
 2d0:	34 03 00 00 	mvi r3,0
 2d4:	f8 00 01 88 	calli 8f4 <i2c_write>
		i2c_write(ADDRESS_I2C,GYRO_CONFIG,0x01);
 2d8:	34 01 00 68 	mvi r1,104
 2dc:	34 02 00 1b 	mvi r2,27
 2e0:	34 03 00 01 	mvi r3,1
 2e4:	f8 00 01 84 	calli 8f4 <i2c_write>
		i2c_write(ADDRESS_I2C,ACCEL_CONFIG,0x00);
 2e8:	34 01 00 68 	mvi r1,104
 2ec:	34 02 00 1c 	mvi r2,28
 2f0:	34 03 00 00 	mvi r3,0
 2f4:	f8 00 01 80 	calli 8f4 <i2c_write>
		// Configure FIFO to capture accelerometer and gyro data for bias calculation
		i2c_write(ADDRESS_I2C,USER_CTRL,0x40);
 2f8:	34 01 00 68 	mvi r1,104
 2fc:	34 02 00 6a 	mvi r2,106
 300:	34 03 00 40 	mvi r3,64
 304:	f8 00 01 7c 	calli 8f4 <i2c_write>
		i2c_write(ADDRESS_I2C,ACCEL_CONFIG,0x78);
 308:	34 01 00 68 	mvi r1,104
 30c:	34 02 00 1c 	mvi r2,28
 310:	34 03 00 78 	mvi r3,120
 314:	f8 00 01 78 	calli 8f4 <i2c_write>
		sleep(80);
 318:	34 01 00 50 	mvi r1,80
 31c:	f8 00 00 57 	calli 478 <sleep>
	
		
	while(1){	
		//i2c_write(ADDRESS_I2C,PWR_MGMT_1,0x80);
		char AcXh = i2c_read (ADDRESS_I2C, ACCEL_XOUT_H);
 320:	34 02 00 3b 	mvi r2,59
 324:	34 01 00 68 	mvi r1,104
 328:	f8 00 01 94 	calli 978 <i2c_read>
		uart_putchar1(AcXh);
 32c:	f8 00 01 02 	calli 734 <uart_putchar1>
		sleep(1000);
 330:	34 01 03 e8 	mvi r1,1000
 334:	f8 00 00 51 	calli 478 <sleep>
		char AcXl = i2c_read (ADDRESS_I2C, ACCEL_ZOUT_L);
 338:	34 02 00 40 	mvi r2,64
 33c:	34 01 00 68 	mvi r1,104
 340:	f8 00 01 8e 	calli 978 <i2c_read>
		uart_putchar1(AcXl);
 344:	f8 00 00 fc 	calli 734 <uart_putchar1>
		sleep(1000);/*
 348:	34 01 03 e8 	mvi r1,1000
 34c:	f8 00 00 4b 	calli 478 <sleep>
 350:	e3 ff ff f4 	bi 320 <main+0x118>

00000354 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 354:	c3 a0 00 00 	ret

00000358 <tic_isr>:
}
uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 358:	78 01 00 00 	mvhi r1,0x0
 35c:	38 21 0a e8 	ori r1,r1,0xae8
 360:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 364:	78 02 00 00 	mvhi r2,0x0
 368:	38 42 0a 54 	ori r2,r2,0xa54
 36c:	28 42 00 00 	lw r2,(r2+0)
}
uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 370:	34 63 00 01 	addi r3,r3,1
 374:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 378:	34 01 00 0e 	mvi r1,14
 37c:	58 41 00 00 	sw (r2+0),r1
}
 380:	c3 a0 00 00 	ret

00000384 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 384:	37 9c ff f0 	addi sp,sp,-16
 388:	5b 8b 00 10 	sw (sp+16),r11
 38c:	5b 8c 00 0c 	sw (sp+12),r12
 390:	5b 8d 00 08 	sw (sp+8),r13
 394:	5b 9d 00 04 	sw (sp+4),ra
 398:	78 0b 00 00 	mvhi r11,0x0
 39c:	39 6b 0a 68 	ori r11,r11,0xa68
 3a0:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 3a4:	35 6d 00 80 	addi r13,r11,128
 3a8:	e0 00 00 04 	bi 3b8 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 3ac:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 3b0:	45 6d 00 08 	be r11,r13,3d0 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 3b4:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 3b8:	21 81 00 01 	andi r1,r12,0x1
 3bc:	44 20 ff fc 	be r1,r0,3ac <irq_handler+0x28>
 3c0:	29 61 00 00 	lw r1,(r11+0)
 3c4:	35 6b 00 04 	addi r11,r11,4
 3c8:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 3cc:	5d 6d ff fa 	bne r11,r13,3b4 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 3d0:	2b 9d 00 04 	lw ra,(sp+4)
 3d4:	2b 8b 00 10 	lw r11,(sp+16)
 3d8:	2b 8c 00 0c 	lw r12,(sp+12)
 3dc:	2b 8d 00 08 	lw r13,(sp+8)
 3e0:	37 9c 00 10 	addi sp,sp,16
 3e4:	c3 a0 00 00 	ret

000003e8 <isr_init>:

void isr_init()
{
 3e8:	78 01 00 00 	mvhi r1,0x0
 3ec:	78 02 00 00 	mvhi r2,0x0
 3f0:	38 21 0a 68 	ori r1,r1,0xa68
 3f4:	38 42 03 54 	ori r2,r2,0x354
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 3f8:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 3fc:	58 22 00 00 	sw (r1+0),r2
 400:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 404:	5c 23 ff fe 	bne r1,r3,3fc <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 408:	c3 a0 00 00 	ret

0000040c <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 40c:	78 03 00 00 	mvhi r3,0x0
 410:	3c 21 00 02 	sli r1,r1,2
 414:	38 63 0a 68 	ori r3,r3,0xa68
 418:	b4 61 18 00 	add r3,r3,r1
 41c:	58 62 00 00 	sw (r3+0),r2
}
 420:	c3 a0 00 00 	ret

00000424 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 424:	78 03 00 00 	mvhi r3,0x0
 428:	3c 21 00 02 	sli r1,r1,2
 42c:	38 63 0a 68 	ori r3,r3,0xa68
 430:	78 02 00 00 	mvhi r2,0x0
 434:	b4 61 18 00 	add r3,r3,r1
 438:	38 42 03 54 	ori r2,r2,0x354
 43c:	58 62 00 00 	sw (r3+0),r2
}
 440:	c3 a0 00 00 	ret

00000444 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 444:	78 02 00 00 	mvhi r2,0x0
 448:	38 42 0a 54 	ori r2,r2,0xa54
 44c:	38 03 c3 50 	mvu r3,0xc350
 450:	28 42 00 00 	lw r2,(r2+0)
 454:	88 23 08 00 	mul r1,r1,r3
 458:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 45c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 460:	34 01 00 08 	mvi r1,8
 464:	58 41 00 0c 	sw (r2+12),r1
// | TIMER_IRQEN;
	do {
		//halt();
 		tcr = timer0->tcr1;
 468:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 46c:	20 21 00 01 	andi r1,r1,0x1
 470:	44 20 ff fe 	be r1,r0,468 <msleep+0x24>
}
 474:	c3 a0 00 00 	ret

00000478 <sleep>:
void sleep(int msec){

	uint32_t tcr;

	// Use timer0.1      
	timer0->compare1 = (100000*msec);
 478:	78 04 00 00 	mvhi r4,0x0
 47c:	38 84 0a 04 	ori r4,r4,0xa04
 480:	28 83 00 00 	lw r3,(r4+0)
 484:	78 02 00 00 	mvhi r2,0x0
 488:	38 42 0a 54 	ori r2,r2,0xa54
 48c:	28 42 00 00 	lw r2,(r2+0)
 490:	88 23 08 00 	mul r1,r1,r3
 494:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 498:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN | TIMER_IRQEN;
 49c:	34 01 00 0a 	mvi r1,10
 4a0:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 4a4:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 4a8:	20 21 00 01 	andi r1,r1,0x1
 4ac:	44 20 ff fe 	be r1,r0,4a4 <sleep+0x2c>
}
 4b0:	c3 a0 00 00 	ret

000004b4 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000000)*nsec;
 4b4:	78 01 00 00 	mvhi r1,0x0
 4b8:	38 21 0a 54 	ori r1,r1,0xa54
 4bc:	28 21 00 00 	lw r1,(r1+0)
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN| TIMER_IRQEN;
 4c0:	34 02 00 0a 	mvi r2,10
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000000)*nsec;
 4c4:	58 20 00 10 	sw (r1+16),r0
	timer0->counter1 = 0;
 4c8:	58 20 00 14 	sw (r1+20),r0
	timer0->tcr1 = TIMER_EN| TIMER_IRQEN;
 4cc:	58 22 00 0c 	sw (r1+12),r2

	do {
		//halt();
 		tcr = timer0->tcr1;
 4d0:	28 22 00 0c 	lw r2,(r1+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 4d4:	20 42 00 01 	andi r2,r2,0x1
 4d8:	44 40 ff fe 	be r2,r0,4d0 <nsleep+0x1c>
}
 4dc:	c3 a0 00 00 	ret

000004e0 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 4e0:	78 01 00 00 	mvhi r1,0x0
 4e4:	38 21 0a 54 	ori r1,r1,0xa54
 4e8:	28 23 00 00 	lw r3,(r1+0)
 4ec:	34 02 13 88 	mvi r2,5000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 4f0:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 4f4:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 4f8:	38 21 0a e8 	ori r1,r1,0xae8

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 4fc:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 500:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 504:	78 02 00 00 	mvhi r2,0x0
 508:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 50c:	34 04 00 0e 	mvi r4,14
 510:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 514:	38 21 0a 68 	ori r1,r1,0xa68
 518:	38 42 03 58 	ori r2,r2,0x358
 51c:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 520:	c3 a0 00 00 	ret

00000524 <wifi_getchar>:
			c = uart_getchar();
			return c;
			break;
		}
	}
	return '\n';
 524:	78 01 00 00 	mvhi r1,0x0
 528:	38 21 0a 50 	ori r1,r1,0xa50
 52c:	28 22 00 00 	lw r2,(r1+0)
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 530:	34 03 00 00 	mvi r3,0
		c = uart_getchar();
		if (c ==':'){
 534:	34 04 00 3a 	mvi r4,58
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 538:	34 05 00 14 	mvi r5,20
	//uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 53c:	28 41 00 00 	lw r1,(r2+0)
 540:	20 21 00 01 	andi r1,r1,0x1
 544:	44 20 ff fe 	be r1,r0,53c <wifi_getchar+0x18>
	return uart0->rxtx;
 548:	28 41 00 04 	lw r1,(r2+4)
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 54c:	34 63 00 01 	addi r3,r3,1
		c = uart_getchar();
		if (c ==':'){
 550:	20 21 00 ff 	andi r1,r1,0xff
 554:	44 24 00 04 	be r1,r4,564 <wifi_getchar+0x40>
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 558:	5c 65 ff f9 	bne r3,r5,53c <wifi_getchar+0x18>
			c = uart_getchar();
			return c;
			break;
		}
	}
	return '\n';
 55c:	34 01 00 0a 	mvi r1,10

}
 560:	c3 a0 00 00 	ret
	//uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 564:	28 41 00 00 	lw r1,(r2+0)
 568:	20 21 00 01 	andi r1,r1,0x1
 56c:	44 20 ff fe 	be r1,r0,564 <wifi_getchar+0x40>
	return uart0->rxtx;
 570:	28 41 00 04 	lw r1,(r2+4)
 574:	20 21 00 ff 	andi r1,r1,0xff
	int i=0;
	for(i=0;i<20;i++){
		c = uart_getchar();
		if (c ==':'){
			c = uart_getchar();
			return c;
 578:	c3 a0 00 00 	ret

0000057c <ok>:
		a=uart_getchar();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
 57c:	78 01 00 00 	mvhi r1,0x0
 580:	38 21 0a 50 	ori r1,r1,0xa50
 584:	28 22 00 00 	lw r2,(r1+0)
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 588:	34 03 00 00 	mvi r3,0
		a=uart_getchar();
		if(a=='K'){
 58c:	34 04 00 4b 	mvi r4,75
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 590:	34 05 00 1e 	mvi r5,30
	//uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 594:	28 41 00 00 	lw r1,(r2+0)
 598:	20 21 00 01 	andi r1,r1,0x1
 59c:	44 20 ff fe 	be r1,r0,594 <ok+0x18>
	return uart0->rxtx;
 5a0:	28 41 00 04 	lw r1,(r2+4)
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 5a4:	34 63 00 01 	addi r3,r3,1
		a=uart_getchar();
		if(a=='K'){
 5a8:	20 21 00 ff 	andi r1,r1,0xff
 5ac:	44 24 00 04 	be r1,r4,5bc <ok+0x40>
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 5b0:	5c 65 ff f9 	bne r3,r5,594 <ok+0x18>
		a=uart_getchar();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
 5b4:	34 01 00 00 	mvi r1,0
 5b8:	c3 a0 00 00 	ret
	int i=0;
	char a;
	for(i=0;i<30;i++){
		a=uart_getchar();
		if(a=='K'){
			return 1;
 5bc:	34 01 00 01 	mvi r1,1
		}
	}
	return 0;

}
 5c0:	c3 a0 00 00 	ret

000005c4 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 5c4:	c3 a0 00 00 	ret

000005c8 <uart_getchar>:

char uart_getchar()
{   
 5c8:	78 01 00 00 	mvhi r1,0x0
 5cc:	38 21 0a 50 	ori r1,r1,0xa50
 5d0:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 5d4:	28 41 00 00 	lw r1,(r2+0)
 5d8:	20 21 00 01 	andi r1,r1,0x1
 5dc:	44 20 ff fe 	be r1,r0,5d4 <uart_getchar+0xc>
	return uart0->rxtx;
 5e0:	28 41 00 04 	lw r1,(r2+4)
}
 5e4:	20 21 00 ff 	andi r1,r1,0xff
 5e8:	c3 a0 00 00 	ret

000005ec <uart_putchar>:

void uart_putchar(char c)
{
 5ec:	78 02 00 00 	mvhi r2,0x0
 5f0:	38 42 0a 50 	ori r2,r2,0xa50
 5f4:	28 43 00 00 	lw r3,(r2+0)
 5f8:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 5fc:	28 62 00 00 	lw r2,(r3+0)
 600:	20 42 00 10 	andi r2,r2,0x10
 604:	5c 40 ff fe 	bne r2,r0,5fc <uart_putchar+0x10>
	uart0->rxtx = c;
 608:	58 61 00 04 	sw (r3+4),r1
}
 60c:	c3 a0 00 00 	ret

00000610 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 610:	40 24 00 00 	lbu r4,(r1+0)
 614:	44 80 00 0b 	be r4,r0,640 <uart_putstr+0x30>
 618:	78 02 00 00 	mvhi r2,0x0
 61c:	38 42 0a 50 	ori r2,r2,0xa50
 620:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 624:	28 62 00 00 	lw r2,(r3+0)
 628:	20 42 00 10 	andi r2,r2,0x10
 62c:	5c 40 ff fe 	bne r2,r0,624 <uart_putstr+0x14>
	uart0->rxtx = c;
 630:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 634:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 638:	40 24 00 00 	lbu r4,(r1+0)
 63c:	5c 82 ff fa 	bne r4,r2,624 <uart_putstr+0x14>
 640:	c3 a0 00 00 	ret

00000644 <wifi_putchar>:
		uart_putstr("AT+CIPSERVER=1,80\r\n");
		c = ok();
	}
}

void wifi_putchar(char a){
 644:	37 9c ff ec 	addi sp,sp,-20
 648:	5b 8b 00 14 	sw (sp+20),r11
 64c:	5b 8c 00 10 	sw (sp+16),r12
 650:	5b 8d 00 0c 	sw (sp+12),r13
 654:	5b 8e 00 08 	sw (sp+8),r14
 658:	5b 9d 00 04 	sw (sp+4),ra
 65c:	78 0d 00 00 	mvhi r13,0x0
 660:	78 0c 00 00 	mvhi r12,0x0
 664:	20 2e 00 ff 	andi r14,r1,0xff
 668:	39 ad 0a 0c 	ori r13,r13,0xa0c
 66c:	39 8c 0a 50 	ori r12,r12,0xa50
	int c = 0; 	  
	while(c == 0){
		uart_putstr("AT+CIPSEND=0,1\r\n");
 670:	b9 a0 08 00 	mv r1,r13
 674:	fb ff ff e7 	calli 610 <uart_putstr>
 678:	29 82 00 00 	lw r2,(r12+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 67c:	28 4b 00 00 	lw r11,(r2+0)
 680:	21 6b 00 10 	andi r11,r11,0x10
 684:	5d 60 ff fe 	bne r11,r0,67c <wifi_putchar+0x38>
	uart0->rxtx = c;
 688:	58 4e 00 04 	sw (r2+4),r14
void wifi_putchar(char a){
	int c = 0; 	  
	while(c == 0){
		uart_putstr("AT+CIPSEND=0,1\r\n");
		uart_putchar(a);
		c = ok();
 68c:	fb ff ff bc 	calli 57c <ok>
	}
}

void wifi_putchar(char a){
	int c = 0; 	  
	while(c == 0){
 690:	44 2b ff f8 	be r1,r11,670 <wifi_putchar+0x2c>
		uart_putstr("AT+CIPSEND=0,1\r\n");
		uart_putchar(a);
		c = ok();
	}
}
 694:	2b 9d 00 04 	lw ra,(sp+4)
 698:	2b 8b 00 14 	lw r11,(sp+20)
 69c:	2b 8c 00 10 	lw r12,(sp+16)
 6a0:	2b 8d 00 0c 	lw r13,(sp+12)
 6a4:	2b 8e 00 08 	lw r14,(sp+8)
 6a8:	37 9c 00 14 	addi sp,sp,20
 6ac:	c3 a0 00 00 	ret

000006b0 <init_wifi>:
}
/***************************************************************************
 * WIFI ESP8266 Functions
 */

void init_wifi(){ //configurar el modulo como estación con puerto 80
 6b0:	37 9c ff f8 	addi sp,sp,-8
 6b4:	5b 8b 00 08 	sw (sp+8),r11
 6b8:	5b 9d 00 04 	sw (sp+4),ra
	uart_putstr("AT+RST\r\n");
 6bc:	78 01 00 00 	mvhi r1,0x0
 6c0:	38 21 0a 20 	ori r1,r1,0xa20
 6c4:	fb ff ff d3 	calli 610 <uart_putstr>
	msleep(200);
 6c8:	34 01 00 c8 	mvi r1,200
 6cc:	78 0b 00 00 	mvhi r11,0x0
 6d0:	fb ff ff 5d 	calli 444 <msleep>
 6d4:	39 6b 0a 2c 	ori r11,r11,0xa2c
	int c = 0;
	while(c==0){
		uart_putstr("AT+CIPMUX=1\r\n");
 6d8:	b9 60 08 00 	mv r1,r11
 6dc:	fb ff ff cd 	calli 610 <uart_putstr>
		c = ok();
 6e0:	fb ff ff a7 	calli 57c <ok>

void init_wifi(){ //configurar el modulo como estación con puerto 80
	uart_putstr("AT+RST\r\n");
	msleep(200);
	int c = 0;
	while(c==0){
 6e4:	44 20 ff fd 	be r1,r0,6d8 <init_wifi+0x28>
 6e8:	78 0b 00 00 	mvhi r11,0x0
 6ec:	39 6b 0a 3c 	ori r11,r11,0xa3c
		uart_putstr("AT+CIPMUX=1\r\n");
		c = ok();
	}
	c = 0;
	while (c==0){
		uart_putstr("AT+CIPSERVER=1,80\r\n");
 6f0:	b9 60 08 00 	mv r1,r11
 6f4:	fb ff ff c7 	calli 610 <uart_putstr>
		c = ok();
 6f8:	fb ff ff a1 	calli 57c <ok>
	while(c==0){
		uart_putstr("AT+CIPMUX=1\r\n");
		c = ok();
	}
	c = 0;
	while (c==0){
 6fc:	44 20 ff fd 	be r1,r0,6f0 <init_wifi+0x40>
		uart_putstr("AT+CIPSERVER=1,80\r\n");
		c = ok();
	}
}
 700:	2b 9d 00 04 	lw ra,(sp+4)
 704:	2b 8b 00 08 	lw r11,(sp+8)
 708:	37 9c 00 08 	addi sp,sp,8
 70c:	c3 a0 00 00 	ret

00000710 <uart_getchar1>:
	}
}
//uart1

char uart_getchar1()
{   
 710:	78 01 00 00 	mvhi r1,0x0
 714:	38 21 0a 60 	ori r1,r1,0xa60
 718:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;
 71c:	28 41 00 00 	lw r1,(r2+0)
 720:	20 21 00 01 	andi r1,r1,0x1
 724:	44 20 ff fe 	be r1,r0,71c <uart_getchar1+0xc>
	return uart1->rxtx;
 728:	28 41 00 04 	lw r1,(r2+4)
}
 72c:	20 21 00 ff 	andi r1,r1,0xff
 730:	c3 a0 00 00 	ret

00000734 <uart_putchar1>:

void uart_putchar1(char c)
{
 734:	78 02 00 00 	mvhi r2,0x0
 738:	38 42 0a 60 	ori r2,r2,0xa60
 73c:	28 43 00 00 	lw r3,(r2+0)
 740:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
 744:	28 62 00 00 	lw r2,(r3+0)
 748:	20 42 00 10 	andi r2,r2,0x10
 74c:	5c 40 ff fe 	bne r2,r0,744 <uart_putchar1+0x10>
	uart1->rxtx = c;
 750:	58 61 00 04 	sw (r3+4),r1
}
 754:	c3 a0 00 00 	ret

00000758 <uart_putstr1>:

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 758:	40 24 00 00 	lbu r4,(r1+0)
 75c:	44 80 00 0b 	be r4,r0,788 <uart_putstr1+0x30>
 760:	78 02 00 00 	mvhi r2,0x0
 764:	38 42 0a 60 	ori r2,r2,0xa60
 768:	28 43 00 00 	lw r3,(r2+0)
	return uart1->rxtx;
}

void uart_putchar1(char c)
{
	while (uart1->ucr & UART_BUSY) ;
 76c:	28 62 00 00 	lw r2,(r3+0)
 770:	20 42 00 10 	andi r2,r2,0x10
 774:	5c 40 ff fe 	bne r2,r0,76c <uart_putstr1+0x14>
	uart1->rxtx = c;
 778:	58 64 00 04 	sw (r3+4),r4
void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar1(*c);
		c++;
 77c:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 780:	40 24 00 00 	lbu r4,(r1+0)
 784:	5c 82 ff fa 	bne r4,r2,76c <uart_putstr1+0x14>
 788:	c3 a0 00 00 	ret

0000078c <write_dir>:
*/


void write_dir(char dir)
{
  gpio0->gpio_dir=dir;
 78c:	78 02 00 00 	mvhi r2,0x0
 790:	38 42 0a 58 	ori r2,r2,0xa58
 794:	28 42 00 00 	lw r2,(r2+0)
* GPIO Functions
*/


void write_dir(char dir)
{
 798:	20 21 00 ff 	andi r1,r1,0xff
  gpio0->gpio_dir=dir;
 79c:	58 41 00 08 	sw (r2+8),r1

}
 7a0:	c3 a0 00 00 	ret

000007a4 <write_data>:


void write_data(char data)
{
  gpio0->gpio_o=data; 
 7a4:	78 02 00 00 	mvhi r2,0x0
 7a8:	38 42 0a 58 	ori r2,r2,0xa58
 7ac:	28 42 00 00 	lw r2,(r2+0)

}


void write_data(char data)
{
 7b0:	20 21 00 ff 	andi r1,r1,0xff
  gpio0->gpio_o=data; 
 7b4:	58 41 00 04 	sw (r2+4),r1

}
 7b8:	c3 a0 00 00 	ret

000007bc <read_data>:


char read_data()
{
    return gpio0->gpio_i;
 7bc:	78 01 00 00 	mvhi r1,0x0
 7c0:	38 21 0a 58 	ori r1,r1,0xa58
 7c4:	28 21 00 00 	lw r1,(r1+0)
 7c8:	28 21 00 00 	lw r1,(r1+0)

}
 7cc:	20 21 00 ff 	andi r1,r1,0xff
 7d0:	c3 a0 00 00 	ret

000007d4 <set_period>:
/***************************************************************************
 * Functions PWM //FUNCIONES PRIMITIVAS
 */

void set_period(int p){
	pwm0->period=p;
 7d4:	78 02 00 00 	mvhi r2,0x0
 7d8:	38 42 0a 64 	ori r2,r2,0xa64
 7dc:	28 42 00 00 	lw r2,(r2+0)
 7e0:	58 41 00 00 	sw (r2+0),r1
}
 7e4:	c3 a0 00 00 	ret

000007e8 <set_motor1>:
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
 7e8:	78 02 00 00 	mvhi r2,0x0
 7ec:	38 42 0a 64 	ori r2,r2,0xa64
 7f0:	28 42 00 00 	lw r2,(r2+0)
 7f4:	58 41 00 04 	sw (r2+4),r1
}
 7f8:	c3 a0 00 00 	ret

000007fc <set_motor2>:
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
 7fc:	78 02 00 00 	mvhi r2,0x0
 800:	38 42 0a 64 	ori r2,r2,0xa64
 804:	28 42 00 00 	lw r2,(r2+0)
 808:	58 41 00 08 	sw (r2+8),r1
}
 80c:	c3 a0 00 00 	ret

00000810 <set_motor3>:
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
 810:	78 02 00 00 	mvhi r2,0x0
 814:	38 42 0a 64 	ori r2,r2,0xa64
 818:	28 42 00 00 	lw r2,(r2+0)
 81c:	58 41 00 0c 	sw (r2+12),r1
}
 820:	c3 a0 00 00 	ret

00000824 <set_motor4>:
void set_motor4(int wk){
	pwm0-> duty_m4=wk;
 824:	78 02 00 00 	mvhi r2,0x0
 828:	38 42 0a 64 	ori r2,r2,0xa64
 82c:	28 42 00 00 	lw r2,(r2+0)
 830:	58 41 00 10 	sw (r2+16),r1
}
 834:	c3 a0 00 00 	ret

00000838 <setMotors>:

/***************************************************************************
 * Functions motors //FUNCIONES PRIMITIVAS
 */

void setMotors(){
 838:	37 9c ff fc 	addi sp,sp,-4
 83c:	5b 9d 00 04 	sw (sp+4),ra
/***************************************************************************
 * Functions PWM //FUNCIONES PRIMITIVAS
 */

void set_period(int p){
	pwm0->period=p;
 840:	78 01 00 00 	mvhi r1,0x0
 844:	78 05 00 00 	mvhi r5,0x0
 848:	38 a5 0a 08 	ori r5,r5,0xa08
 84c:	38 21 0a 64 	ori r1,r1,0xa64
 850:	28 22 00 00 	lw r2,(r1+0)
 854:	28 a4 00 00 	lw r4,(r5+0)
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
 858:	38 03 ea 60 	mvu r3,0xea60
	set_period(0x1E8480); //F=50Hz
	set_motor1(0xEA60);
	set_motor2(0xEA60);
	set_motor3(0xEA60);
	set_motor4(0xEA60);
	msleep(0x3E8);
 85c:	34 01 03 e8 	mvi r1,1000
/***************************************************************************
 * Functions PWM //FUNCIONES PRIMITIVAS
 */

void set_period(int p){
	pwm0->period=p;
 860:	58 44 00 00 	sw (r2+0),r4
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
 864:	58 43 00 04 	sw (r2+4),r3
}
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
 868:	58 43 00 08 	sw (r2+8),r3
}
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
 86c:	58 43 00 0c 	sw (r2+12),r3
}
void set_motor4(int wk){
	pwm0-> duty_m4=wk;
 870:	58 43 00 10 	sw (r2+16),r3
	set_period(0x1E8480); //F=50Hz
	set_motor1(0xEA60);
	set_motor2(0xEA60);
	set_motor3(0xEA60);
	set_motor4(0xEA60);
	msleep(0x3E8);
 874:	fb ff fe f4 	calli 444 <msleep>
}
 878:	2b 9d 00 04 	lw ra,(sp+4)
 87c:	37 9c 00 04 	addi sp,sp,4
 880:	c3 a0 00 00 	ret

00000884 <up_down_q>:

void up_down_q(int s){
	int vel;
	int velM3;
	if(s>=0x1){
 884:	38 02 ea 60 	mvu r2,0xea60
 888:	4c 01 00 04 	bge r0,r1,898 <up_down_q+0x14>
		vel = 0x5DC * s + 0xFD20;
 88c:	08 22 05 dc 	muli r2,r1,1500
 890:	38 03 fd 20 	mvu r3,0xfd20
 894:	b4 43 10 00 	add r2,r2,r3

void set_period(int p){
	pwm0->period=p;
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
 898:	78 01 00 00 	mvhi r1,0x0
 89c:	38 21 0a 64 	ori r1,r1,0xa64
 8a0:	28 21 00 00 	lw r1,(r1+0)
 8a4:	58 22 00 04 	sw (r1+4),r2
}
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
 8a8:	58 22 00 08 	sw (r1+8),r2
}
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
 8ac:	58 22 00 0c 	sw (r1+12),r2
}
void set_motor4(int wk){
	pwm0-> duty_m4=wk;
 8b0:	58 22 00 10 	sw (r1+16),r2
	}
	set_motor1(vel);
	set_motor2(vel);
	set_motor3(vel);
	set_motor4(vel);
}
 8b4:	c3 a0 00 00 	ret

000008b8 <start_Read>:

/******************************************************************************
* i2c Functons
*/
void start_Read (int r)
{  i2c0->startRead = r;
 8b8:	78 02 00 00 	mvhi r2,0x0
 8bc:	38 42 0a 5c 	ori r2,r2,0xa5c
 8c0:	28 42 00 00 	lw r2,(r2+0)
 8c4:	58 41 00 14 	sw (r2+20),r1
}
 8c8:	c3 a0 00 00 	ret

000008cc <start_Write>:
void start_Write (int w)
{  i2c0->startWrite = w;
 8cc:	78 02 00 00 	mvhi r2,0x0
 8d0:	38 42 0a 5c 	ori r2,r2,0xa5c
 8d4:	28 42 00 00 	lw r2,(r2+0)
 8d8:	58 41 00 18 	sw (r2+24),r1
}
 8dc:	c3 a0 00 00 	ret

000008e0 <rw>:
void rw(int data_rw){
	i2c0->rw = data_rw;
 8e0:	78 02 00 00 	mvhi r2,0x0
 8e4:	38 42 0a 5c 	ori r2,r2,0xa5c
 8e8:	28 42 00 00 	lw r2,(r2+0)
 8ec:	58 41 00 0c 	sw (r2+12),r1
}
 8f0:	c3 a0 00 00 	ret

000008f4 <i2c_write>:

void i2c_write (int dirI2C, int dirIntern, int data)
{		
 8f4:	37 9c ff ec 	addi sp,sp,-20
 8f8:	5b 8b 00 14 	sw (sp+20),r11
 8fc:	5b 8c 00 10 	sw (sp+16),r12
 900:	5b 8d 00 0c 	sw (sp+12),r13
 904:	5b 8e 00 08 	sw (sp+8),r14
 908:	5b 9d 00 04 	sw (sp+4),ra
*/
void start_Read (int r)
{  i2c0->startRead = r;
}
void start_Write (int w)
{  i2c0->startWrite = w;
 90c:	78 0b 00 00 	mvhi r11,0x0
 910:	39 6b 0a 5c 	ori r11,r11,0xa5c
 914:	29 64 00 00 	lw r4,(r11+0)
void rw(int data_rw){
	i2c0->rw = data_rw;
}

void i2c_write (int dirI2C, int dirIntern, int data)
{		
 918:	b8 20 68 00 	mv r13,r1
*/
void start_Read (int r)
{  i2c0->startRead = r;
}
void start_Write (int w)
{  i2c0->startWrite = w;
 91c:	34 01 00 01 	mvi r1,1
 920:	58 81 00 18 	sw (r4+24),r1
}

void i2c_write (int dirI2C, int dirIntern, int data)
{		
	start_Write(1);
   	msleep(10);
 924:	34 01 00 0a 	mvi r1,10
void rw(int data_rw){
	i2c0->rw = data_rw;
}

void i2c_write (int dirI2C, int dirIntern, int data)
{		
 928:	b8 40 70 00 	mv r14,r2
 92c:	b8 60 60 00 	mv r12,r3
	start_Write(1);
   	msleep(10);
 930:	fb ff fe c5 	calli 444 <msleep>
*/
void start_Read (int r)
{  i2c0->startRead = r;
}
void start_Write (int w)
{  i2c0->startWrite = w;
 934:	29 64 00 00 	lw r4,(r11+0)
 938:	58 80 00 18 	sw (r4+24),r0
}
void rw(int data_rw){
	i2c0->rw = data_rw;
 93c:	58 80 00 0c 	sw (r4+12),r0
{		
	start_Write(1);
   	msleep(10);
   	start_Write(0);
	rw(0); 
        while((i2c0->availWrite)==0x00);
 940:	28 85 00 04 	lw r5,(r4+4)
 944:	44 a0 ff ff 	be r5,r0,940 <i2c_write+0x4c>
	i2c0->data = ((dirI2C<<16)|(dirIntern<<8)|data);	
 948:	3d c2 00 08 	sli r2,r14,8
 94c:	3d a5 00 10 	sli r5,r13,16
 950:	b8 4c 08 00 	or r1,r2,r12
 954:	b8 25 08 00 	or r1,r1,r5
 958:	58 81 00 10 	sw (r4+16),r1
	
}
 95c:	2b 9d 00 04 	lw ra,(sp+4)
 960:	2b 8b 00 14 	lw r11,(sp+20)
 964:	2b 8c 00 10 	lw r12,(sp+16)
 968:	2b 8d 00 0c 	lw r13,(sp+12)
 96c:	2b 8e 00 08 	lw r14,(sp+8)
 970:	37 9c 00 14 	addi sp,sp,20
 974:	c3 a0 00 00 	ret

00000978 <i2c_read>:


char i2c_read (int dirI2C, int dirIntern)
{  
 978:	37 9c ff ec 	addi sp,sp,-20
 97c:	5b 8b 00 14 	sw (sp+20),r11
 980:	5b 8c 00 10 	sw (sp+16),r12
 984:	5b 8d 00 0c 	sw (sp+12),r13
 988:	5b 8e 00 08 	sw (sp+8),r14
 98c:	5b 9d 00 04 	sw (sp+4),ra

/******************************************************************************
* i2c Functons
*/
void start_Read (int r)
{  i2c0->startRead = r;
 990:	78 0b 00 00 	mvhi r11,0x0
 994:	39 6b 0a 5c 	ori r11,r11,0xa5c
 998:	29 63 00 00 	lw r3,(r11+0)
 99c:	34 0d 00 01 	mvi r13,1
	
}


char i2c_read (int dirI2C, int dirIntern)
{  
 9a0:	b8 20 60 00 	mv r12,r1

/******************************************************************************
* i2c Functons
*/
void start_Read (int r)
{  i2c0->startRead = r;
 9a4:	58 6d 00 14 	sw (r3+20),r13


char i2c_read (int dirI2C, int dirIntern)
{  
	start_Read(1);
	msleep(10);
 9a8:	34 01 00 0a 	mvi r1,10
	
}


char i2c_read (int dirI2C, int dirIntern)
{  
 9ac:	b8 40 70 00 	mv r14,r2
	start_Read(1);
	msleep(10);
 9b0:	fb ff fe a5 	calli 444 <msleep>

/******************************************************************************
* i2c Functons
*/
void start_Read (int r)
{  i2c0->startRead = r;
 9b4:	29 63 00 00 	lw r3,(r11+0)
{  
	start_Read(1);
	msleep(10);
	start_Read(0);
	rw(1);
	while((i2c0->availRead)==0x04);
 9b8:	34 05 00 04 	mvi r5,4

/******************************************************************************
* i2c Functons
*/
void start_Read (int r)
{  i2c0->startRead = r;
 9bc:	58 60 00 14 	sw (r3+20),r0
}
void start_Write (int w)
{  i2c0->startWrite = w;
}
void rw(int data_rw){
	i2c0->rw = data_rw;
 9c0:	58 6d 00 0c 	sw (r3+12),r13
{  
	start_Read(1);
	msleep(10);
	start_Read(0);
	rw(1);
	while((i2c0->availRead)==0x04);
 9c4:	28 64 00 08 	lw r4,(r3+8)
 9c8:	44 85 ff ff 	be r4,r5,9c4 <i2c_read+0x4c>
	i2c0->data = ((dirI2C<<15)|(dirIntern<<7)|dirI2C);
 9cc:	3d 81 00 0f 	sli r1,r12,15
 9d0:	3d c2 00 07 	sli r2,r14,7
 9d4:	b8 2c 60 00 	or r12,r1,r12
 9d8:	b9 82 60 00 	or r12,r12,r2
 9dc:	58 6c 00 10 	sw (r3+16),r12
		return i2c0->i2c_data_out;   
 9e0:	28 61 00 00 	lw r1,(r3+0)
  
}
 9e4:	20 21 00 ff 	andi r1,r1,0xff
 9e8:	2b 9d 00 04 	lw ra,(sp+4)
 9ec:	2b 8b 00 14 	lw r11,(sp+20)
 9f0:	2b 8c 00 10 	lw r12,(sp+16)
 9f4:	2b 8d 00 0c 	lw r13,(sp+12)
 9f8:	2b 8e 00 08 	lw r14,(sp+8)
 9fc:	37 9c 00 14 	addi sp,sp,20
 a00:	c3 a0 00 00 	ret
