
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         00002bc4  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       0000050c  00002bc4  00002bc4  00002c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000028  000030d0  000030d0  00003124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000000a0  000030f8  000030f8  0000314c  2**2
                  ALLOC
  4 .debug_abbrev 000007be  00000000  00000000  0000314c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000039fd  00000000  00000000  0000390a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00003060  00000000  00000000  00007307  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000004e0  00000000  00000000  0000a368  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000390b  00000000  00000000  0000a848  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000557  00000000  00000000  0000e153  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000109  00000000  00000000  0000e6aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000060  00000000  00000000  0000e7b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a18  00000000  00000000  0000e813  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000009ed  00000000  00000000  0000f22b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000011  00000000  00000000  0000fc18  2**0
                  CONTENTS, READONLY

Desensamblado de la sección .text:

00000000 <_ftext>:
       0:	98 00 00 00 	xor r0,r0,r0
       4:	d0 00 00 00 	wcsr IE,r0
       8:	78 01 00 00 	mvhi r1,0x0
       c:	38 21 00 00 	ori r1,r1,0x0
      10:	d0 e1 00 00 	wcsr EBA,r1
      14:	f8 00 00 3b 	calli 100 <_crt0>
      18:	34 00 00 00 	nop
      1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
      20:	34 00 00 00 	nop
      24:	34 00 00 00 	nop
      28:	34 00 00 00 	nop
      2c:	34 00 00 00 	nop
      30:	34 00 00 00 	nop
      34:	34 00 00 00 	nop
      38:	34 00 00 00 	nop
      3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
      40:	34 00 00 00 	nop
      44:	34 00 00 00 	nop
      48:	34 00 00 00 	nop
      4c:	34 00 00 00 	nop
      50:	34 00 00 00 	nop
      54:	34 00 00 00 	nop
      58:	34 00 00 00 	nop
      5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
      60:	34 00 00 00 	nop
      64:	34 00 00 00 	nop
      68:	34 00 00 00 	nop
      6c:	34 00 00 00 	nop
      70:	34 00 00 00 	nop
      74:	34 00 00 00 	nop
      78:	34 00 00 00 	nop
      7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
      80:	34 00 00 00 	nop
      84:	34 00 00 00 	nop
      88:	34 00 00 00 	nop
      8c:	34 00 00 00 	nop
      90:	34 00 00 00 	nop
      94:	34 00 00 00 	nop
      98:	34 00 00 00 	nop
      9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
      a0:	34 00 00 00 	nop
      a4:	34 00 00 00 	nop
      a8:	34 00 00 00 	nop
      ac:	34 00 00 00 	nop
      b0:	34 00 00 00 	nop
      b4:	34 00 00 00 	nop
      b8:	34 00 00 00 	nop
      bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
      c0:	5b 9d 00 00 	sw (sp+0),ra
      c4:	f8 00 00 2b 	calli 170 <_save_all>
      c8:	90 40 08 00 	rcsr r1,IP
      cc:	f8 00 02 0a 	calli 8f4 <irq_handler>
      d0:	78 01 ff ff 	mvhi r1,0xffff
      d4:	38 21 ff ff 	ori r1,r1,0xffff
      d8:	d0 41 00 00 	wcsr IP,r1
      dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
      e0:	34 00 00 00 	nop
      e4:	34 00 00 00 	nop
      e8:	34 00 00 00 	nop
      ec:	34 00 00 00 	nop
      f0:	34 00 00 00 	nop
      f4:	34 00 00 00 	nop
      f8:	34 00 00 00 	nop
      fc:	34 00 00 00 	nop

00000100 <_crt0>:
     100:	78 1c 00 00 	mvhi sp,0x0
     104:	3b 9c 3f fc 	ori sp,sp,0x3ffc
     108:	78 1a 00 00 	mvhi gp,0x0
     10c:	3b 5a 31 00 	ori gp,gp,0x3100
     110:	78 01 00 00 	mvhi r1,0x0
     114:	38 21 30 f8 	ori r1,r1,0x30f8
     118:	78 03 00 00 	mvhi r3,0x0
     11c:	38 63 31 98 	ori r3,r3,0x3198

00000120 <.clearBSS>:
     120:	44 23 00 04 	be r1,r3,130 <.callMain>
     124:	58 20 00 00 	sw (r1+0),r0
     128:	34 21 00 04 	addi r1,r1,4
     12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
     130:	34 01 00 00 	mvi r1,0
     134:	34 02 00 00 	mvi r2,0
     138:	34 03 00 00 	mvi r3,0
     13c:	f8 00 00 ee 	calli 4f4 <main>

00000140 <irq_enable>:
     140:	34 01 00 01 	mvi r1,1
     144:	d0 01 00 00 	wcsr IE,r1
     148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
     14c:	34 01 00 00 	mvi r1,0
     150:	d0 01 00 00 	wcsr IE,r1
     154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
     158:	d0 21 00 00 	wcsr IM,r1
     15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
     160:	90 20 08 00 	rcsr r1,IM
     164:	c3 a0 00 00 	ret

00000168 <jump>:
     168:	c0 20 00 00 	b r1

0000016c <halt>:
     16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
     170:	37 9c ff 80 	addi sp,sp,-128
     174:	5b 81 00 04 	sw (sp+4),r1
     178:	5b 82 00 08 	sw (sp+8),r2
     17c:	5b 83 00 0c 	sw (sp+12),r3
     180:	5b 84 00 10 	sw (sp+16),r4
     184:	5b 85 00 14 	sw (sp+20),r5
     188:	5b 86 00 18 	sw (sp+24),r6
     18c:	5b 87 00 1c 	sw (sp+28),r7
     190:	5b 88 00 20 	sw (sp+32),r8
     194:	5b 89 00 24 	sw (sp+36),r9
     198:	5b 8a 00 28 	sw (sp+40),r10
     19c:	5b 9e 00 78 	sw (sp+120),ea
     1a0:	5b 9f 00 7c 	sw (sp+124),ba
     1a4:	2b 81 00 80 	lw r1,(sp+128)
     1a8:	5b 81 00 74 	sw (sp+116),r1
     1ac:	bb 80 08 00 	mv r1,sp
     1b0:	34 21 00 80 	addi r1,r1,128
     1b4:	5b 81 00 70 	sw (sp+112),r1
     1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
     1bc:	2b 81 00 04 	lw r1,(sp+4)
     1c0:	2b 82 00 08 	lw r2,(sp+8)
     1c4:	2b 83 00 0c 	lw r3,(sp+12)
     1c8:	2b 84 00 10 	lw r4,(sp+16)
     1cc:	2b 85 00 14 	lw r5,(sp+20)
     1d0:	2b 86 00 18 	lw r6,(sp+24)
     1d4:	2b 87 00 1c 	lw r7,(sp+28)
     1d8:	2b 88 00 20 	lw r8,(sp+32)
     1dc:	2b 89 00 24 	lw r9,(sp+36)
     1e0:	2b 8a 00 28 	lw r10,(sp+40)
     1e4:	2b 9d 00 74 	lw ra,(sp+116)
     1e8:	2b 9e 00 78 	lw ea,(sp+120)
     1ec:	2b 9f 00 7c 	lw ba,(sp+124)
     1f0:	2b 9c 00 70 	lw sp,(sp+112)
     1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
     1f8:	bb 80 08 00 	mv r1,sp
     1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
     200:	bb 40 08 00 	mv r1,gp
     204:	c3 a0 00 00 	ret

00000208 <printdec2hex>:
int s1 = 0x0;
int s2 = 0x0;
int s3 = 0x0;
int s4 = 0x0;

void printdec2hex(char l){
     208:	37 9c ff f8 	addi sp,sp,-8
     20c:	5b 8b 00 08 	sw (sp+8),r11
     210:	5b 9d 00 04 	sw (sp+4),ra
     214:	20 2b 00 ff 	andi r11,r1,0xff
	char t = ((l & 0xF0) >> 4) + 0x30;
     218:	01 61 00 04 	srui r1,r11,4
	if (t > 0x39)
     21c:	34 02 00 39 	mvi r2,57
int s2 = 0x0;
int s3 = 0x0;
int s4 = 0x0;

void printdec2hex(char l){
	char t = ((l & 0xF0) >> 4) + 0x30;
     220:	34 21 00 30 	addi r1,r1,48
	if (t > 0x39)
     224:	50 41 00 02 	bgeu r2,r1,22c <printdec2hex+0x24>
		t+=0x07;
     228:	34 21 00 07 	addi r1,r1,7
	uart_putchar1(t);
     22c:	f8 00 02 9e 	calli ca4 <uart_putchar1>
	t = (l & 0x0f) + 0x30;
     230:	21 61 00 0f 	andi r1,r11,0xf
     234:	34 21 00 30 	addi r1,r1,48
	if (t > 0x39)
     238:	34 02 00 39 	mvi r2,57
     23c:	50 41 00 02 	bgeu r2,r1,244 <printdec2hex+0x3c>
		t+=0x07;
     240:	34 21 00 07 	addi r1,r1,7
	uart_putchar1(t);
     244:	f8 00 02 98 	calli ca4 <uart_putchar1>
}
     248:	2b 9d 00 04 	lw ra,(sp+4)
     24c:	2b 8b 00 08 	lw r11,(sp+8)
     250:	37 9c 00 08 	addi sp,sp,8
     254:	c3 a0 00 00 	ret

00000258 <printxyz>:

void printxyz(int8_t AcH, char AcL){
     258:	37 9c ff f4 	addi sp,sp,-12
     25c:	5b 8b 00 0c 	sw (sp+12),r11
     260:	5b 8c 00 08 	sw (sp+8),r12
     264:	5b 9d 00 04 	sw (sp+4),ra
     268:	b0 20 58 00 	sextb r11,r1
     26c:	20 4c 00 ff 	andi r12,r2,0xff
	if(AcH<0){
     270:	4d 60 00 07 	bge r11,r0,28c <printxyz+0x34>
		uart_putchar1('-');
     274:	34 01 00 2d 	mvi r1,45
     278:	f8 00 02 8b 	calli ca4 <uart_putchar1>
		printdec2hex((~AcH) + 0x1);
     27c:	c8 0b 08 00 	sub r1,r0,r11
     280:	20 21 00 ff 	andi r1,r1,0xff
     284:	fb ff ff e1 	calli 208 <printdec2hex>
     288:	e0 00 00 03 	bi 294 <printxyz+0x3c>
	}else{
		printdec2hex(AcH);
     28c:	21 61 00 ff 	andi r1,r11,0xff
     290:	fb ff ff de 	calli 208 <printdec2hex>
	}		
	printdec2hex(AcL);
     294:	b9 80 08 00 	mv r1,r12
     298:	fb ff ff dc 	calli 208 <printdec2hex>
	uart_putstr1(" ");
     29c:	78 01 00 00 	mvhi r1,0x0
     2a0:	38 21 2b c4 	ori r1,r1,0x2bc4
     2a4:	f8 00 02 89 	calli cc8 <uart_putstr1>
}
     2a8:	2b 9d 00 04 	lw ra,(sp+4)
     2ac:	2b 8b 00 0c 	lw r11,(sp+12)
     2b0:	2b 8c 00 08 	lw r12,(sp+8)
     2b4:	37 9c 00 0c 	addi sp,sp,12
     2b8:	c3 a0 00 00 	ret

000002bc <getRoll>:

int getRoll(float32 AcX, float32 AcZ){
     2bc:	37 9c ff f8 	addi sp,sp,-8
     2c0:	5b 8b 00 08 	sw (sp+8),r11
     2c4:	5b 9d 00 04 	sw (sp+4),ra
     2c8:	b8 20 18 00 	mv r3,r1
     2cc:	b8 40 58 00 	mv r11,r2
	float32 b = 0x0;
	float32 roll = 0x0;
	int ROLL = 0x0;
	char print;
	
	a = float32_mul (NEG, AcX);
     2d0:	78 01 bf 80 	mvhi r1,0xbf80
     2d4:	b8 60 10 00 	mv r2,r3
     2d8:	f8 00 06 70 	calli 1c98 <float32_mul>
	b = float32_div(a, AcZ);
     2dc:	b9 60 10 00 	mv r2,r11
     2e0:	f8 00 06 e5 	calli 1e74 <float32_div>
	roll = float32_artan(b);
     2e4:	f8 00 0a 07 	calli 2b00 <float32_artan>
	roll = float32_mul(roll, RtoD);
     2e8:	78 03 00 00 	mvhi r3,0x0
     2ec:	38 63 2c 1c 	ori r3,r3,0x2c1c
     2f0:	28 62 00 00 	lw r2,(r3+0)
     2f4:	f8 00 06 69 	calli 1c98 <float32_mul>
     2f8:	b8 20 58 00 	mv r11,r1
	uart_putchar1(13);
     2fc:	34 01 00 0d 	mvi r1,13
     300:	f8 00 02 69 	calli ca4 <uart_putchar1>
	uart_putchar1(10);	
     304:	34 01 00 0a 	mvi r1,10
     308:	f8 00 02 67 	calli ca4 <uart_putchar1>
	uart_putstr1("> ROLL  : ");
     30c:	78 02 00 00 	mvhi r2,0x0
     310:	b8 40 08 00 	mv r1,r2
     314:	38 21 2b c8 	ori r1,r1,0x2bc8
     318:	f8 00 02 6c 	calli cc8 <uart_putstr1>
	roll = float32_round_to_int(roll);
     31c:	b9 60 08 00 	mv r1,r11
     320:	f8 00 05 e1 	calli 1aa4 <float32_round_to_int>
	ROLL = float32_to_int32(roll);
     324:	f8 00 05 5e 	calli 189c <float32_to_int32>
     328:	b8 20 58 00 	mv r11,r1
	print = ROLL;
	printdec2hex(print);
     32c:	20 21 00 ff 	andi r1,r1,0xff
     330:	fb ff ff b6 	calli 208 <printdec2hex>
	uart_putchar1(13);
     334:	34 01 00 0d 	mvi r1,13
     338:	f8 00 02 5b 	calli ca4 <uart_putchar1>
	uart_putchar1(10);		
     33c:	34 01 00 0a 	mvi r1,10
     340:	f8 00 02 59 	calli ca4 <uart_putchar1>
	return ROLL;
}
     344:	b9 60 08 00 	mv r1,r11
     348:	2b 9d 00 04 	lw ra,(sp+4)
     34c:	2b 8b 00 08 	lw r11,(sp+8)
     350:	37 9c 00 08 	addi sp,sp,8
     354:	c3 a0 00 00 	ret

00000358 <getPitch>:

int getPitch(float32 AcX, float32 AcY, float32 AcZ){
     358:	37 9c ff f0 	addi sp,sp,-16
     35c:	5b 8b 00 10 	sw (sp+16),r11
     360:	5b 8c 00 0c 	sw (sp+12),r12
     364:	5b 8d 00 08 	sw (sp+8),r13
     368:	5b 9d 00 04 	sw (sp+4),ra
     36c:	b8 60 68 00 	mv r13,r3
     370:	b8 40 58 00 	mv r11,r2
	float32 b = 0x0;
	float32 pitch = 0x0;
	int PITCH = 0x0;
	char print;
	
	a = float32_add(float32_pow2(AcX), float32_pow2(AcZ)); // b² + c²
     374:	f8 00 0a 0d 	calli 2ba8 <float32_pow2>
     378:	b8 20 60 00 	mv r12,r1
     37c:	b9 a0 08 00 	mv r1,r13
     380:	f8 00 0a 0a 	calli 2ba8 <float32_pow2>
     384:	b8 20 10 00 	mv r2,r1
     388:	b9 80 08 00 	mv r1,r12
     38c:	f8 00 06 29 	calli 1c30 <float32_add>
	a = float32_sqrt(a);// (b² + c²)^0.5
     390:	f8 00 07 fe 	calli 2388 <float32_sqrt>
     394:	b8 20 10 00 	mv r2,r1
	b = float32_div(AcY, a);// a/((b² + c²)^0.5)
     398:	b9 60 08 00 	mv r1,r11
     39c:	f8 00 06 b6 	calli 1e74 <float32_div>
	pitch = float32_artan(b); // ARCTAN(a/((b² + c²)^0.5))
     3a0:	f8 00 09 d8 	calli 2b00 <float32_artan>
	pitch = float32_mul(pitch, RtoD); //Rad_to_Deg
     3a4:	78 03 00 00 	mvhi r3,0x0
     3a8:	38 63 2c 1c 	ori r3,r3,0x2c1c
     3ac:	28 62 00 00 	lw r2,(r3+0)
     3b0:	f8 00 06 3a 	calli 1c98 <float32_mul>
     3b4:	b8 20 58 00 	mv r11,r1
	uart_putchar1(13);
     3b8:	34 01 00 0d 	mvi r1,13
     3bc:	f8 00 02 3a 	calli ca4 <uart_putchar1>
	uart_putchar1(10);	
     3c0:	34 01 00 0a 	mvi r1,10
     3c4:	f8 00 02 38 	calli ca4 <uart_putchar1>
	uart_putstr1("> PITCH : ");
     3c8:	78 02 00 00 	mvhi r2,0x0
     3cc:	b8 40 08 00 	mv r1,r2
     3d0:	38 21 2b d4 	ori r1,r1,0x2bd4
     3d4:	f8 00 02 3d 	calli cc8 <uart_putstr1>
	pitch = float32_round_to_int(pitch);
     3d8:	b9 60 08 00 	mv r1,r11
     3dc:	f8 00 05 b2 	calli 1aa4 <float32_round_to_int>
	PITCH = float32_to_int32(pitch); 
     3e0:	f8 00 05 2f 	calli 189c <float32_to_int32>
     3e4:	b8 20 58 00 	mv r11,r1
	print = PITCH;
	printdec2hex(print);
     3e8:	20 21 00 ff 	andi r1,r1,0xff
     3ec:	fb ff ff 87 	calli 208 <printdec2hex>
	uart_putchar1(13);
     3f0:	34 01 00 0d 	mvi r1,13
     3f4:	f8 00 02 2c 	calli ca4 <uart_putchar1>
	uart_putchar1(10);
     3f8:	34 01 00 0a 	mvi r1,10
     3fc:	f8 00 02 2a 	calli ca4 <uart_putchar1>
	return PITCH;
}
     400:	b9 60 08 00 	mv r1,r11
     404:	2b 9d 00 04 	lw ra,(sp+4)
     408:	2b 8b 00 10 	lw r11,(sp+16)
     40c:	2b 8c 00 0c 	lw r12,(sp+12)
     410:	2b 8d 00 08 	lw r13,(sp+8)
     414:	37 9c 00 10 	addi sp,sp,16
     418:	c3 a0 00 00 	ret

0000041c <updateMotors>:

int updateMotors(int roll, int pitch){
	int control = 0;
	if(pitch < (-5)){
     41c:	34 04 ff fb 	mvi r4,-5
	uart_putchar1(13);
	uart_putchar1(10);
	return PITCH;
}

int updateMotors(int roll, int pitch){
     420:	b8 20 18 00 	mv r3,r1
	int control = 0;
	if(pitch < (-5)){
		control += 1000; //M4
     424:	34 01 03 e8 	mvi r1,1000
	return PITCH;
}

int updateMotors(int roll, int pitch){
	int control = 0;
	if(pitch < (-5)){
     428:	48 82 00 04 	bg r4,r2,438 <updateMotors+0x1c>
	uart_putchar1(10);
	return PITCH;
}

int updateMotors(int roll, int pitch){
	int control = 0;
     42c:	68 41 00 05 	cmpgi r1,r2,5
     430:	c8 01 08 00 	sub r1,r0,r1
     434:	20 21 00 0a 	andi r1,r1,0xa
		control += 1000; //M4
	}else if(pitch > 5){
		control += 10; //M2
	}
	
	if(roll < (-5)){
     438:	34 02 ff fb 	mvi r2,-5
     43c:	4c 62 00 03 	bge r3,r2,448 <updateMotors+0x2c>
		control += 1; //M1
     440:	34 21 00 01 	addi r1,r1,1
     444:	c3 a0 00 00 	ret
	}else if(roll > 5){
     448:	34 02 00 05 	mvi r2,5
     44c:	4c 43 00 02 	bge r2,r3,454 <updateMotors+0x38>
		control += 100; //M3
     450:	34 21 00 64 	addi r1,r1,100
	}
	return control;
}
     454:	c3 a0 00 00 	ret

00000458 <readIMU>:

float32 readIMU(int adr_h, int adr_l){
     458:	37 9c ff ec 	addi sp,sp,-20
     45c:	5b 8b 00 14 	sw (sp+20),r11
     460:	5b 8c 00 10 	sw (sp+16),r12
     464:	5b 8d 00 0c 	sw (sp+12),r13
     468:	5b 8e 00 08 	sw (sp+8),r14
     46c:	5b 9d 00 04 	sw (sp+4),ra
     470:	34 0b 00 05 	mvi r11,5
     474:	b8 20 60 00 	mv r12,r1
     478:	b8 40 70 00 	mv r14,r2
	uint8_t low = 0x0;
	int read = 0x0;
	int i = 0;
	
	for(i=0;i<5;i++){
		high = i2c_read (ADDRESS_I2C, adr_h);
     47c:	b9 80 10 00 	mv r2,r12
     480:	34 01 00 68 	mvi r1,104
     484:	f8 00 02 a9 	calli f28 <i2c_read>
     488:	b8 20 68 00 	mv r13,r1
		sleep(1);
     48c:	35 6b ff ff 	addi r11,r11,-1
     490:	34 01 00 01 	mvi r1,1
     494:	f8 00 01 55 	calli 9e8 <sleep>
	int8_t high = 0x0;
	uint8_t low = 0x0;
	int read = 0x0;
	int i = 0;
	
	for(i=0;i<5;i++){
     498:	5d 60 ff f9 	bne r11,r0,47c <readIMU+0x24>
     49c:	34 0b 00 05 	mvi r11,5
		high = i2c_read (ADDRESS_I2C, adr_h);
		sleep(1);
	}
	for(i=0;i<5;i++){
		low = i2c_read (ADDRESS_I2C, adr_l);
     4a0:	b9 c0 10 00 	mv r2,r14
     4a4:	34 01 00 68 	mvi r1,104
     4a8:	f8 00 02 a0 	calli f28 <i2c_read>
     4ac:	20 2c 00 ff 	andi r12,r1,0xff
		sleep(1);
     4b0:	35 6b ff ff 	addi r11,r11,-1
     4b4:	34 01 00 01 	mvi r1,1
     4b8:	f8 00 01 4c 	calli 9e8 <sleep>
	
	for(i=0;i<5;i++){
		high = i2c_read (ADDRESS_I2C, adr_h);
		sleep(1);
	}
	for(i=0;i<5;i++){
     4bc:	5d 60 ff f9 	bne r11,r0,4a0 <readIMU+0x48>
		low = i2c_read (ADDRESS_I2C, adr_l);
		sleep(1);
	}
	printxyz(high, low);
     4c0:	b9 a0 08 00 	mv r1,r13
     4c4:	b9 80 10 00 	mv r2,r12
     4c8:	fb ff ff 64 	calli 258 <printxyz>
	read = high;
	read = read<<8;
     4cc:	3d a1 00 08 	sli r1,r13,8
	if(read < 0x0){
		read = read - low;
	}else{
		read = read - low;;
	} 
	return int32_to_float32(read);
     4d0:	c8 2c 08 00 	sub r1,r1,r12
     4d4:	f8 00 04 e1 	calli 1858 <int32_to_float32>
}
     4d8:	2b 9d 00 04 	lw ra,(sp+4)
     4dc:	2b 8b 00 14 	lw r11,(sp+20)
     4e0:	2b 8c 00 10 	lw r12,(sp+16)
     4e4:	2b 8d 00 0c 	lw r13,(sp+12)
     4e8:	2b 8e 00 08 	lw r14,(sp+8)
     4ec:	37 9c 00 14 	addi sp,sp,20
     4f0:	c3 a0 00 00 	ret

000004f4 <main>:


int main(){
     4f4:	37 9c ff b4 	addi sp,sp,-76
     4f8:	5b 8b 00 44 	sw (sp+68),r11
     4fc:	5b 8c 00 40 	sw (sp+64),r12
     500:	5b 8d 00 3c 	sw (sp+60),r13
     504:	5b 8e 00 38 	sw (sp+56),r14
     508:	5b 8f 00 34 	sw (sp+52),r15
     50c:	5b 90 00 30 	sw (sp+48),r16
     510:	5b 91 00 2c 	sw (sp+44),r17
     514:	5b 92 00 28 	sw (sp+40),r18
     518:	5b 93 00 24 	sw (sp+36),r19
     51c:	5b 94 00 20 	sw (sp+32),r20
     520:	5b 95 00 1c 	sw (sp+28),r21
     524:	5b 96 00 18 	sw (sp+24),r22
     528:	5b 97 00 14 	sw (sp+20),r23
     52c:	5b 98 00 10 	sw (sp+16),r24
     530:	5b 99 00 0c 	sw (sp+12),r25
     534:	5b 9b 00 08 	sw (sp+8),fp
     538:	5b 9d 00 04 	sw (sp+4),ra

	float32 AcX;
	float32 AcY;
	float32 AcZ;	
	
	setMotors();
     53c:	f8 00 02 1b 	calli da8 <setMotors>
	msleep(50);	
     540:	34 01 00 32 	mvi r1,50
     544:	f8 00 01 1c 	calli 9b4 <msleep>
	initImu();
     548:	f8 00 02 9b 	calli fb4 <initImu>
	msleep(50);
     54c:	34 01 00 32 	mvi r1,50
     550:	f8 00 01 19 	calli 9b4 <msleep>
	//init_wifi()
	//msleep(50);
	testMotos();
     554:	f8 00 02 2a 	calli dfc <testMotos>
	uart_putchar(0);
     558:	34 01 00 00 	mvi r1,0
     55c:	f8 00 01 80 	calli b5c <uart_putchar>
     560:	78 02 00 00 	mvhi r2,0x0
	uart_putchar1(0);
     564:	34 01 00 00 	mvi r1,0
     568:	5b 82 00 48 	sw (sp+72),r2
     56c:	78 1b 00 00 	mvhi fp,0x0
     570:	78 02 00 00 	mvhi r2,0x0
     574:	5b 82 00 4c 	sw (sp+76),r2
     578:	f8 00 01 cb 	calli ca4 <uart_putchar1>
     57c:	2b 81 00 48 	lw r1,(sp+72)
     580:	2b 82 00 4c 	lw r2,(sp+76)
     584:	78 19 00 00 	mvhi r25,0x0
     588:	78 18 00 00 	mvhi r24,0x0
     58c:	78 17 00 00 	mvhi r23,0x0
     590:	78 16 00 00 	mvhi r22,0x0
     594:	78 15 00 00 	mvhi r21,0x0
     598:	78 14 00 00 	mvhi r20,0x0
     59c:	38 21 2b e0 	ori r1,r1,0x2be0
     5a0:	38 42 2b e4 	ori r2,r2,0x2be4
     5a4:	5b 81 00 48 	sw (sp+72),r1
     5a8:	5b 82 00 4c 	sw (sp+76),r2
     5ac:	3b 7b 2b e8 	ori fp,fp,0x2be8
     5b0:	3b 39 2b ec 	ori r25,r25,0x2bec
     5b4:	3b 18 2b f0 	ori r24,r24,0x2bf0
     5b8:	3a f7 2b f8 	ori r23,r23,0x2bf8
     5bc:	3a d6 2c 00 	ori r22,r22,0x2c00
     5c0:	3a b5 2c 08 	ori r21,r21,0x2c08
     5c4:	3a 94 2c 10 	ori r20,r20,0x2c10
	return PITCH;
}

int updateMotors(int roll, int pitch){
	int control = 0;
	if(pitch < (-5)){
     5c8:	34 0e ff fb 	mvi r14,-5
		control += 1000; //M4
     5cc:	34 12 03 e8 	mvi r18,1000
	}else if(pitch > 5){
     5d0:	34 13 00 05 	mvi r19,5
		uart_putchar1(10);
		roll = getRoll(AcX, AcZ);
		pitch = getPitch(AcX, AcY, AcZ);
		uart_putchar1(13);
		uart_putchar1(10);		
		switch (updateMotors(pitch, roll)){
     5d4:	34 10 00 64 	mvi r16,100
     5d8:	34 11 00 01 	mvi r17,1
	testMotos();
	uart_putchar(0);
	uart_putchar1(0);
			
	for(;;){
		uart_putchar1(13);
     5dc:	34 01 00 0d 	mvi r1,13
     5e0:	f8 00 01 b1 	calli ca4 <uart_putchar1>
		uart_putchar1(10);
     5e4:	34 01 00 0a 	mvi r1,10
     5e8:	f8 00 01 af 	calli ca4 <uart_putchar1>
		AcX = readIMU(ACCEL_XOUT_H, ACCEL_XOUT_L);
     5ec:	34 02 00 3c 	mvi r2,60
     5f0:	34 01 00 3b 	mvi r1,59
     5f4:	fb ff ff 99 	calli 458 <readIMU>
     5f8:	b8 20 60 00 	mv r12,r1
		AcY = readIMU(ACCEL_YOUT_H, ACCEL_YOUT_L);
     5fc:	34 02 00 3e 	mvi r2,62
     600:	34 01 00 3d 	mvi r1,61
     604:	fb ff ff 95 	calli 458 <readIMU>
		AcZ = readIMU(ACCEL_ZOUT_H, ACCEL_ZOUT_L);
     608:	34 02 00 40 	mvi r2,64
			
	for(;;){
		uart_putchar1(13);
		uart_putchar1(10);
		AcX = readIMU(ACCEL_XOUT_H, ACCEL_XOUT_L);
		AcY = readIMU(ACCEL_YOUT_H, ACCEL_YOUT_L);
     60c:	b8 20 78 00 	mv r15,r1
		AcZ = readIMU(ACCEL_ZOUT_H, ACCEL_ZOUT_L);
     610:	34 01 00 3f 	mvi r1,63
     614:	fb ff ff 91 	calli 458 <readIMU>
     618:	b8 20 58 00 	mv r11,r1
		uart_putchar1(13);
     61c:	34 01 00 0d 	mvi r1,13
     620:	f8 00 01 a1 	calli ca4 <uart_putchar1>
		uart_putchar1(10);
     624:	34 01 00 0a 	mvi r1,10
     628:	f8 00 01 9f 	calli ca4 <uart_putchar1>
		roll = getRoll(AcX, AcZ);
     62c:	b9 60 10 00 	mv r2,r11
     630:	b9 80 08 00 	mv r1,r12
     634:	fb ff ff 22 	calli 2bc <getRoll>
		pitch = getPitch(AcX, AcY, AcZ);
     638:	b9 e0 10 00 	mv r2,r15
     63c:	b9 60 18 00 	mv r3,r11
		AcX = readIMU(ACCEL_XOUT_H, ACCEL_XOUT_L);
		AcY = readIMU(ACCEL_YOUT_H, ACCEL_YOUT_L);
		AcZ = readIMU(ACCEL_ZOUT_H, ACCEL_ZOUT_L);
		uart_putchar1(13);
		uart_putchar1(10);
		roll = getRoll(AcX, AcZ);
     640:	b8 20 68 00 	mv r13,r1
		pitch = getPitch(AcX, AcY, AcZ);
     644:	b9 80 08 00 	mv r1,r12
     648:	fb ff ff 44 	calli 358 <getPitch>
     64c:	b8 20 58 00 	mv r11,r1
		uart_putchar1(13);
     650:	34 01 00 0d 	mvi r1,13
     654:	f8 00 01 94 	calli ca4 <uart_putchar1>
		uart_putchar1(10);		
     658:	34 01 00 0a 	mvi r1,10
     65c:	f8 00 01 92 	calli ca4 <uart_putchar1>
}

int updateMotors(int roll, int pitch){
	int control = 0;
	if(pitch < (-5)){
		control += 1000; //M4
     660:	34 02 03 e8 	mvi r2,1000
	return PITCH;
}

int updateMotors(int roll, int pitch){
	int control = 0;
	if(pitch < (-5)){
     664:	49 cd 00 04 	bg r14,r13,674 <main+0x180>
	uart_putchar1(10);
	return PITCH;
}

int updateMotors(int roll, int pitch){
	int control = 0;
     668:	69 a2 00 05 	cmpgi r2,r13,5
     66c:	c8 02 10 00 	sub r2,r0,r2
     670:	20 42 00 0a 	andi r2,r2,0xa
		control += 1000; //M4
	}else if(pitch > 5){
		control += 10; //M2
	}
	
	if(roll < (-5)){
     674:	4d 6e 00 0e 	bge r11,r14,6ac <main+0x1b8>
		control += 1; //M1
     678:	34 42 00 01 	addi r2,r2,1
		uart_putchar1(10);
		roll = getRoll(AcX, AcZ);
		pitch = getPitch(AcX, AcY, AcZ);
		uart_putchar1(13);
		uart_putchar1(10);		
		switch (updateMotors(pitch, roll)){
     67c:	44 50 00 0f 	be r2,r16,6b8 <main+0x1c4>
     680:	48 50 00 18 	bg r2,r16,6e0 <main+0x1ec>
     684:	44 51 00 68 	be r2,r17,824 <main+0x330>
     688:	48 51 00 44 	bg r2,r17,798 <main+0x2a4>
     68c:	44 40 00 8c 	be r2,r0,8bc <main+0x3c8>
	    			set_motor2(0x186A0); //ON
	    			set_motor3(0x186A0); //ON
	    			set_motor4(0x186A0); //ON
	    			break;
				default:
				uart_putstr1("problema");
     690:	ba 80 08 00 	mv r1,r20
     694:	f8 00 01 8d 	calli cc8 <uart_putstr1>
				break;
		};
	uart_putchar1(13);
     698:	34 01 00 0d 	mvi r1,13
     69c:	f8 00 01 82 	calli ca4 <uart_putchar1>
	uart_putchar1(10);
     6a0:	34 01 00 0a 	mvi r1,10
     6a4:	f8 00 01 80 	calli ca4 <uart_putchar1>
	}
     6a8:	e3 ff ff cd 	bi 5dc <main+0xe8>
		control += 10; //M2
	}
	
	if(roll < (-5)){
		control += 1; //M1
	}else if(roll > 5){
     6ac:	4e 6b ff f4 	bge r19,r11,67c <main+0x188>
		control += 100; //M3
     6b0:	34 42 00 64 	addi r2,r2,100
		uart_putchar1(10);
		roll = getRoll(AcX, AcZ);
		pitch = getPitch(AcX, AcY, AcZ);
		uart_putchar1(13);
		uart_putchar1(10);		
		switch (updateMotors(pitch, roll)){
     6b4:	5c 50 ff f3 	bne r2,r16,680 <main+0x18c>
	    			set_motor2(0x186A0); //ON
	    			set_motor3(0xEA60);
	    			set_motor4(0xEA60);
	    			break;
	    		case 100: // M3: ON
	    			uart_putchar1(13);
     6b8:	34 01 00 0d 	mvi r1,13
     6bc:	f8 00 01 7a 	calli ca4 <uart_putchar1>
					uart_putchar1(10);
     6c0:	34 01 00 0a 	mvi r1,10
     6c4:	f8 00 01 78 	calli ca4 <uart_putchar1>
					uart_putstr1(" M3");
     6c8:	bb 60 08 00 	mv r1,fp
     6cc:	f8 00 01 7f 	calli cc8 <uart_putstr1>
	    			set_motor1(0xEA60); 
     6d0:	38 01 ea 60 	mvu r1,0xea60
     6d4:	f8 00 01 a1 	calli d58 <set_motor1>
	    			set_motor2(0xEA60); 
     6d8:	38 01 ea 60 	mvu r1,0xea60
     6dc:	e0 00 00 10 	bi 71c <main+0x228>
		uart_putchar1(10);
		roll = getRoll(AcX, AcZ);
		pitch = getPitch(AcX, AcY, AcZ);
		uart_putchar1(13);
		uart_putchar1(10);		
		switch (updateMotors(pitch, roll)){
     6e0:	44 52 00 6b 	be r2,r18,88c <main+0x398>
     6e4:	48 52 00 16 	bg r2,r18,73c <main+0x248>
     6e8:	34 01 00 6e 	mvi r1,110
     6ec:	5c 41 ff e9 	bne r2,r1,690 <main+0x19c>
	    			set_motor2(0x186A0); //ON
	    			set_motor3(0xEA60); 
	    			set_motor4(0xEA60);
	    			break;
	    		case 110: // M2: ON; M3: ON;
	    			uart_putchar1(13);
     6f0:	34 01 00 0d 	mvi r1,13
     6f4:	f8 00 01 6c 	calli ca4 <uart_putchar1>
					uart_putchar1(10);
     6f8:	34 01 00 0a 	mvi r1,10
     6fc:	f8 00 01 6a 	calli ca4 <uart_putchar1>
	    			uart_putstr1(" M2 M3");
     700:	ba e0 08 00 	mv r1,r23
     704:	f8 00 01 71 	calli cc8 <uart_putstr1>
	    			set_motor1(0xEA60); 
     708:	38 01 ea 60 	mvu r1,0xea60
     70c:	f8 00 01 93 	calli d58 <set_motor1>
	    			set_motor2(0x186A0); //ON
     710:	78 02 00 00 	mvhi r2,0x0
     714:	38 42 2c 20 	ori r2,r2,0x2c20
     718:	28 41 00 00 	lw r1,(r2+0)
     71c:	f8 00 01 94 	calli d6c <set_motor2>
	    			set_motor3(0x186A0); //ON
     720:	78 02 00 00 	mvhi r2,0x0
     724:	38 42 2c 20 	ori r2,r2,0x2c20
     728:	28 41 00 00 	lw r1,(r2+0)
     72c:	f8 00 01 95 	calli d80 <set_motor3>
	    			set_motor4(0xEA60);
     730:	38 01 ea 60 	mvu r1,0xea60
     734:	f8 00 01 98 	calli d94 <set_motor4>
	    			break;
     738:	e3 ff ff d8 	bi 698 <main+0x1a4>
		uart_putchar1(10);
		roll = getRoll(AcX, AcZ);
		pitch = getPitch(AcX, AcY, AcZ);
		uart_putchar1(13);
		uart_putchar1(10);		
		switch (updateMotors(pitch, roll)){
     73c:	34 01 03 e9 	mvi r1,1001
     740:	44 41 00 45 	be r2,r1,854 <main+0x360>
     744:	34 01 04 4c 	mvi r1,1100
     748:	5c 41 ff d2 	bne r2,r1,690 <main+0x19c>
	    			set_motor2(0x186A0); //ON
	    			set_motor3(0x186A0); //ON
	    			set_motor4(0xEA60);
	    			break;
	    		case 1100: // M3: ON; M4: ON;
	    			uart_putchar1(13);
     74c:	34 01 00 0d 	mvi r1,13
     750:	f8 00 01 55 	calli ca4 <uart_putchar1>
					uart_putchar1(10);
     754:	34 01 00 0a 	mvi r1,10
     758:	f8 00 01 53 	calli ca4 <uart_putchar1>
	    			uart_putstr1(" M3 M4");
     75c:	ba c0 08 00 	mv r1,r22
     760:	f8 00 01 5a 	calli cc8 <uart_putstr1>
	    			set_motor1(0xEA60); 
     764:	38 01 ea 60 	mvu r1,0xea60
     768:	f8 00 01 7c 	calli d58 <set_motor1>
	    			set_motor2(0xEA60); 
     76c:	38 01 ea 60 	mvu r1,0xea60
     770:	f8 00 01 7f 	calli d6c <set_motor2>
	    			set_motor3(0x186A0); //ON
     774:	78 02 00 00 	mvhi r2,0x0
     778:	38 42 2c 20 	ori r2,r2,0x2c20
     77c:	28 41 00 00 	lw r1,(r2+0)
	    			uart_putchar1(13);
					uart_putchar1(10);
	    			uart_putstr1(" M1 M4");
	    			set_motor1(0x186A0); //ON
	    			set_motor2(0xEA60); 
	    			set_motor3(0xEA60); 
     780:	f8 00 01 80 	calli d80 <set_motor3>
	    			set_motor4(0x186A0); //ON
     784:	78 02 00 00 	mvhi r2,0x0
     788:	38 42 2c 20 	ori r2,r2,0x2c20
     78c:	28 41 00 00 	lw r1,(r2+0)
     790:	f8 00 01 81 	calli d94 <set_motor4>
	    			break;
     794:	e3 ff ff c1 	bi 698 <main+0x1a4>
		uart_putchar1(10);
		roll = getRoll(AcX, AcZ);
		pitch = getPitch(AcX, AcY, AcZ);
		uart_putchar1(13);
		uart_putchar1(10);		
		switch (updateMotors(pitch, roll)){
     798:	34 03 00 0a 	mvi r3,10
     79c:	44 43 00 16 	be r2,r3,7f4 <main+0x300>
     7a0:	34 01 00 0b 	mvi r1,11
     7a4:	5c 41 ff bb 	bne r2,r1,690 <main+0x19c>
	    			set_motor2(0xEA60); 
	    			set_motor3(0xEA60); 
	    			set_motor4(0x186A0); //ON
	    			break;
	    		case 11: // M1: ON; M2: ON;
	    			uart_putchar1(13);
     7a8:	34 01 00 0d 	mvi r1,13
     7ac:	f8 00 01 3e 	calli ca4 <uart_putchar1>
					uart_putchar1(10);
     7b0:	34 01 00 0a 	mvi r1,10
     7b4:	f8 00 01 3c 	calli ca4 <uart_putchar1>
					uart_putstr1(" M1 M2");
     7b8:	bb 00 08 00 	mv r1,r24
     7bc:	f8 00 01 43 	calli cc8 <uart_putstr1>
	    			set_motor1(0x186A0); //ON
     7c0:	78 02 00 00 	mvhi r2,0x0
     7c4:	38 42 2c 20 	ori r2,r2,0x2c20
     7c8:	28 41 00 00 	lw r1,(r2+0)
     7cc:	f8 00 01 63 	calli d58 <set_motor1>
	    			set_motor2(0x186A0); //ON
     7d0:	78 02 00 00 	mvhi r2,0x0
     7d4:	38 42 2c 20 	ori r2,r2,0x2c20
     7d8:	28 41 00 00 	lw r1,(r2+0)
	    		case 1: // M1: ON
	    			uart_putchar1(13);
				uart_putchar1(10);
				uart_putstr1(" M1");
	    			set_motor1(0x186A0); //ON
	    			set_motor2(0xEA60);
     7dc:	f8 00 01 64 	calli d6c <set_motor2>
	    			set_motor3(0xEA60);
     7e0:	38 01 ea 60 	mvu r1,0xea60
     7e4:	f8 00 01 67 	calli d80 <set_motor3>
	    			set_motor4(0xEA60);
     7e8:	38 01 ea 60 	mvu r1,0xea60
     7ec:	f8 00 01 6a 	calli d94 <set_motor4>
	    			break;
     7f0:	e3 ff ff aa 	bi 698 <main+0x1a4>
	    		case 10: // M2: ON
	    			uart_putchar1(13);
     7f4:	34 01 00 0d 	mvi r1,13
     7f8:	f8 00 01 2b 	calli ca4 <uart_putchar1>
					uart_putchar1(10);
     7fc:	34 01 00 0a 	mvi r1,10
     800:	f8 00 01 29 	calli ca4 <uart_putchar1>
					uart_putstr1(" M2");
     804:	2b 81 00 4c 	lw r1,(sp+76)
     808:	f8 00 01 30 	calli cc8 <uart_putstr1>
	    			set_motor1(0xEA60); 
     80c:	38 01 ea 60 	mvu r1,0xea60
     810:	f8 00 01 52 	calli d58 <set_motor1>
	    			set_motor2(0x186A0); //ON
     814:	78 02 00 00 	mvhi r2,0x0
     818:	38 42 2c 20 	ori r2,r2,0x2c20
     81c:	28 41 00 00 	lw r1,(r2+0)
     820:	e3 ff ff ef 	bi 7dc <main+0x2e8>
	    			set_motor2(0xEA60);
	    			set_motor3(0xEA60);
	    			set_motor4(0xEA60);
	    			break;
	    		case 1: // M1: ON
	    			uart_putchar1(13);
     824:	34 01 00 0d 	mvi r1,13
     828:	f8 00 01 1f 	calli ca4 <uart_putchar1>
				uart_putchar1(10);
     82c:	34 01 00 0a 	mvi r1,10
     830:	f8 00 01 1d 	calli ca4 <uart_putchar1>
				uart_putstr1(" M1");
     834:	2b 81 00 48 	lw r1,(sp+72)
     838:	f8 00 01 24 	calli cc8 <uart_putstr1>
	    			set_motor1(0x186A0); //ON
     83c:	78 02 00 00 	mvhi r2,0x0
     840:	38 42 2c 20 	ori r2,r2,0x2c20
     844:	28 41 00 00 	lw r1,(r2+0)
     848:	f8 00 01 44 	calli d58 <set_motor1>
	    			set_motor2(0xEA60);
     84c:	38 01 ea 60 	mvu r1,0xea60
     850:	e3 ff ff e3 	bi 7dc <main+0x2e8>
	    			set_motor2(0xEA60); 
	    			set_motor3(0x186A0); //ON
	    			set_motor4(0x186A0); //ON
	    			break;
	    		case 1001: // M1: ON; M4: ON;
	    			uart_putchar1(13);
     854:	34 01 00 0d 	mvi r1,13
     858:	f8 00 01 13 	calli ca4 <uart_putchar1>
					uart_putchar1(10);
     85c:	34 01 00 0a 	mvi r1,10
     860:	f8 00 01 11 	calli ca4 <uart_putchar1>
	    			uart_putstr1(" M1 M4");
     864:	ba a0 08 00 	mv r1,r21
     868:	f8 00 01 18 	calli cc8 <uart_putstr1>
	    			set_motor1(0x186A0); //ON
     86c:	78 02 00 00 	mvhi r2,0x0
     870:	38 42 2c 20 	ori r2,r2,0x2c20
     874:	28 41 00 00 	lw r1,(r2+0)
     878:	f8 00 01 38 	calli d58 <set_motor1>
	    			set_motor2(0xEA60); 
     87c:	38 01 ea 60 	mvu r1,0xea60
     880:	f8 00 01 3b 	calli d6c <set_motor2>
	    			set_motor3(0xEA60); 
     884:	38 01 ea 60 	mvu r1,0xea60
     888:	e3 ff ff be 	bi 780 <main+0x28c>
	    			set_motor2(0xEA60); 
	    			set_motor3(0x186A0); //ON
	    			set_motor4(0xEA60);
	    			break;
	    		case 1000: // M4: ON
	    			uart_putchar1(13);
     88c:	34 01 00 0d 	mvi r1,13
     890:	f8 00 01 05 	calli ca4 <uart_putchar1>
					uart_putchar1(10);
     894:	34 01 00 0a 	mvi r1,10
     898:	f8 00 01 03 	calli ca4 <uart_putchar1>
					uart_putstr1(" M4");
     89c:	bb 20 08 00 	mv r1,r25
     8a0:	f8 00 01 0a 	calli cc8 <uart_putstr1>
	    			set_motor1(0xEA60); 
     8a4:	38 01 ea 60 	mvu r1,0xea60
     8a8:	f8 00 01 2c 	calli d58 <set_motor1>
	    			set_motor2(0xEA60); 
     8ac:	38 01 ea 60 	mvu r1,0xea60
     8b0:	f8 00 01 2f 	calli d6c <set_motor2>
	    			set_motor3(0xEA60); 
     8b4:	38 01 ea 60 	mvu r1,0xea60
     8b8:	e3 ff ff b2 	bi 780 <main+0x28c>
		pitch = getPitch(AcX, AcY, AcZ);
		uart_putchar1(13);
		uart_putchar1(10);		
		switch (updateMotors(pitch, roll)){
	    		case 0: // ALL: OFF
	    			set_motor1(0xEA60);
     8bc:	38 01 ea 60 	mvu r1,0xea60
     8c0:	e3 ff ff e2 	bi 848 <main+0x354>

000008c4 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
     8c4:	c3 a0 00 00 	ret

000008c8 <tic_isr>:
}
uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
     8c8:	78 01 00 00 	mvhi r1,0x0
     8cc:	38 21 31 94 	ori r1,r1,0x3194
     8d0:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     8d4:	78 02 00 00 	mvhi r2,0x0
     8d8:	38 42 30 d4 	ori r2,r2,0x30d4
     8dc:	28 42 00 00 	lw r2,(r2+0)
}
uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
     8e0:	34 63 00 01 	addi r3,r3,1
     8e4:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     8e8:	34 01 00 0e 	mvi r1,14
     8ec:	58 41 00 00 	sw (r2+0),r1
}
     8f0:	c3 a0 00 00 	ret

000008f4 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
     8f4:	37 9c ff f0 	addi sp,sp,-16
     8f8:	5b 8b 00 10 	sw (sp+16),r11
     8fc:	5b 8c 00 0c 	sw (sp+12),r12
     900:	5b 8d 00 08 	sw (sp+8),r13
     904:	5b 9d 00 04 	sw (sp+4),ra
     908:	78 0b 00 00 	mvhi r11,0x0
     90c:	39 6b 31 14 	ori r11,r11,0x3114
     910:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
     914:	35 6d 00 80 	addi r13,r11,128
     918:	e0 00 00 04 	bi 928 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
     91c:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
     920:	45 6d 00 08 	be r11,r13,940 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
     924:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
     928:	21 81 00 01 	andi r1,r12,0x1
     92c:	44 20 ff fc 	be r1,r0,91c <irq_handler+0x28>
     930:	29 61 00 00 	lw r1,(r11+0)
     934:	35 6b 00 04 	addi r11,r11,4
     938:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
     93c:	5d 6d ff fa 	bne r11,r13,924 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
     940:	2b 9d 00 04 	lw ra,(sp+4)
     944:	2b 8b 00 10 	lw r11,(sp+16)
     948:	2b 8c 00 0c 	lw r12,(sp+12)
     94c:	2b 8d 00 08 	lw r13,(sp+8)
     950:	37 9c 00 10 	addi sp,sp,16
     954:	c3 a0 00 00 	ret

00000958 <isr_init>:

void isr_init()
{
     958:	78 01 00 00 	mvhi r1,0x0
     95c:	78 02 00 00 	mvhi r2,0x0
     960:	38 21 31 14 	ori r1,r1,0x3114
     964:	38 42 08 c4 	ori r2,r2,0x8c4
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
     968:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
     96c:	58 22 00 00 	sw (r1+0),r2
     970:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
     974:	5c 23 ff fe 	bne r1,r3,96c <isr_init+0x14>
		isr_table[i] = &isr_null;
}
     978:	c3 a0 00 00 	ret

0000097c <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
     97c:	78 03 00 00 	mvhi r3,0x0
     980:	3c 21 00 02 	sli r1,r1,2
     984:	38 63 31 14 	ori r3,r3,0x3114
     988:	b4 61 18 00 	add r3,r3,r1
     98c:	58 62 00 00 	sw (r3+0),r2
}
     990:	c3 a0 00 00 	ret

00000994 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
     994:	78 03 00 00 	mvhi r3,0x0
     998:	3c 21 00 02 	sli r1,r1,2
     99c:	38 63 31 14 	ori r3,r3,0x3114
     9a0:	78 02 00 00 	mvhi r2,0x0
     9a4:	b4 61 18 00 	add r3,r3,r1
     9a8:	38 42 08 c4 	ori r2,r2,0x8c4
     9ac:	58 62 00 00 	sw (r3+0),r2
}
     9b0:	c3 a0 00 00 	ret

000009b4 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
     9b4:	78 02 00 00 	mvhi r2,0x0
     9b8:	38 42 30 d4 	ori r2,r2,0x30d4
     9bc:	38 03 c3 50 	mvu r3,0xc350
     9c0:	28 42 00 00 	lw r2,(r2+0)
     9c4:	88 23 08 00 	mul r1,r1,r3
     9c8:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
     9cc:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
     9d0:	34 01 00 08 	mvi r1,8
     9d4:	58 41 00 0c 	sw (r2+12),r1
	// | TIMER_IRQEN;
	do {
		//halt();
		tcr = timer0->tcr1;
     9d8:	28 41 00 0c 	lw r1,(r2+12)
	} while ( ! (tcr & TIMER_TRIG) );
     9dc:	20 21 00 01 	andi r1,r1,0x1
     9e0:	44 20 ff fe 	be r1,r0,9d8 <msleep+0x24>
}
     9e4:	c3 a0 00 00 	ret

000009e8 <sleep>:
void sleep(int msec){

	uint32_t tcr;

	// Use timer0.1      
	timer0->compare1 = (100000*msec);
     9e8:	78 04 00 00 	mvhi r4,0x0
     9ec:	38 84 2c 20 	ori r4,r4,0x2c20
     9f0:	28 83 00 00 	lw r3,(r4+0)
     9f4:	78 02 00 00 	mvhi r2,0x0
     9f8:	38 42 30 d4 	ori r2,r2,0x30d4
     9fc:	28 42 00 00 	lw r2,(r2+0)
     a00:	88 23 08 00 	mul r1,r1,r3
     a04:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
     a08:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN | TIMER_IRQEN;
     a0c:	34 01 00 0a 	mvi r1,10
     a10:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
		tcr = timer0->tcr1;
     a14:	28 41 00 0c 	lw r1,(r2+12)
	} while ( ! (tcr & TIMER_TRIG) );
     a18:	20 21 00 01 	andi r1,r1,0x1
     a1c:	44 20 ff fe 	be r1,r0,a14 <sleep+0x2c>
}
     a20:	c3 a0 00 00 	ret

00000a24 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000000)*nsec;
     a24:	78 01 00 00 	mvhi r1,0x0
     a28:	38 21 30 d4 	ori r1,r1,0x30d4
     a2c:	28 21 00 00 	lw r1,(r1+0)
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN| TIMER_IRQEN;
     a30:	34 02 00 0a 	mvi r2,10
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000000)*nsec;
     a34:	58 20 00 10 	sw (r1+16),r0
	timer0->counter1 = 0;
     a38:	58 20 00 14 	sw (r1+20),r0
	timer0->tcr1 = TIMER_EN| TIMER_IRQEN;
     a3c:	58 22 00 0c 	sw (r1+12),r2

	do {
		//halt();
		tcr = timer0->tcr1;
     a40:	28 22 00 0c 	lw r2,(r1+12)
	} while ( ! (tcr & TIMER_TRIG) );
     a44:	20 42 00 01 	andi r2,r2,0x1
     a48:	44 40 ff fe 	be r2,r0,a40 <nsleep+0x1c>
}
     a4c:	c3 a0 00 00 	ret

00000a50 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
     a50:	78 01 00 00 	mvhi r1,0x0
     a54:	38 21 30 d4 	ori r1,r1,0x30d4
     a58:	28 23 00 00 	lw r3,(r1+0)
     a5c:	34 02 13 88 	mvi r2,5000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
     a60:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
     a64:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
     a68:	38 21 31 94 	ori r1,r1,0x3194

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
     a6c:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
     a70:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
     a74:	78 02 00 00 	mvhi r2,0x0
     a78:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     a7c:	34 04 00 0e 	mvi r4,14
     a80:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
     a84:	38 21 31 14 	ori r1,r1,0x3114
     a88:	38 42 08 c8 	ori r2,r2,0x8c8
     a8c:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
     a90:	c3 a0 00 00 	ret

00000a94 <wifi_getchar>:
			c = uart_getchar();
			return c;
			break;
		}
	}
	return '\n';
     a94:	78 01 00 00 	mvhi r1,0x0
     a98:	38 21 30 d0 	ori r1,r1,0x30d0
     a9c:	28 22 00 00 	lw r2,(r1+0)
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
     aa0:	34 03 00 00 	mvi r3,0
		c = uart_getchar();
		if (c ==':'){
     aa4:	34 04 00 3a 	mvi r4,58
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
     aa8:	34 05 00 14 	mvi r5,20
	//uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
     aac:	28 41 00 00 	lw r1,(r2+0)
     ab0:	20 21 00 01 	andi r1,r1,0x1
     ab4:	44 20 ff fe 	be r1,r0,aac <wifi_getchar+0x18>
	return uart0->rxtx;
     ab8:	28 41 00 04 	lw r1,(r2+4)
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
     abc:	34 63 00 01 	addi r3,r3,1
		c = uart_getchar();
		if (c ==':'){
     ac0:	20 21 00 ff 	andi r1,r1,0xff
     ac4:	44 24 00 04 	be r1,r4,ad4 <wifi_getchar+0x40>
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
     ac8:	5c 65 ff f9 	bne r3,r5,aac <wifi_getchar+0x18>
			c = uart_getchar();
			return c;
			break;
		}
	}
	return '\n';
     acc:	34 01 00 0a 	mvi r1,10

}
     ad0:	c3 a0 00 00 	ret
	//uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
     ad4:	28 41 00 00 	lw r1,(r2+0)
     ad8:	20 21 00 01 	andi r1,r1,0x1
     adc:	44 20 ff fe 	be r1,r0,ad4 <wifi_getchar+0x40>
	return uart0->rxtx;
     ae0:	28 41 00 04 	lw r1,(r2+4)
     ae4:	20 21 00 ff 	andi r1,r1,0xff
	int i=0;
	for(i=0;i<20;i++){
		c = uart_getchar();
		if (c ==':'){
			c = uart_getchar();
			return c;
     ae8:	c3 a0 00 00 	ret

00000aec <ok>:
		a=uart_getchar();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
     aec:	78 01 00 00 	mvhi r1,0x0
     af0:	38 21 30 d0 	ori r1,r1,0x30d0
     af4:	28 22 00 00 	lw r2,(r1+0)
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
     af8:	34 03 00 00 	mvi r3,0
		a=uart_getchar();
		if(a=='K'){
     afc:	34 04 00 4b 	mvi r4,75
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
     b00:	34 05 00 1e 	mvi r5,30
	//uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
     b04:	28 41 00 00 	lw r1,(r2+0)
     b08:	20 21 00 01 	andi r1,r1,0x1
     b0c:	44 20 ff fe 	be r1,r0,b04 <ok+0x18>
	return uart0->rxtx;
     b10:	28 41 00 04 	lw r1,(r2+4)
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
     b14:	34 63 00 01 	addi r3,r3,1
		a=uart_getchar();
		if(a=='K'){
     b18:	20 21 00 ff 	andi r1,r1,0xff
     b1c:	44 24 00 04 	be r1,r4,b2c <ok+0x40>
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
     b20:	5c 65 ff f9 	bne r3,r5,b04 <ok+0x18>
		a=uart_getchar();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
     b24:	34 01 00 00 	mvi r1,0
     b28:	c3 a0 00 00 	ret
	int i=0;
	char a;
	for(i=0;i<30;i++){
		a=uart_getchar();
		if(a=='K'){
			return 1;
     b2c:	34 01 00 01 	mvi r1,1
		}
	}
	return 0;

}
     b30:	c3 a0 00 00 	ret

00000b34 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
     b34:	c3 a0 00 00 	ret

00000b38 <uart_getchar>:

char uart_getchar()
{   
     b38:	78 01 00 00 	mvhi r1,0x0
     b3c:	38 21 30 d0 	ori r1,r1,0x30d0
     b40:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
     b44:	28 41 00 00 	lw r1,(r2+0)
     b48:	20 21 00 01 	andi r1,r1,0x1
     b4c:	44 20 ff fe 	be r1,r0,b44 <uart_getchar+0xc>
	return uart0->rxtx;
     b50:	28 41 00 04 	lw r1,(r2+4)
}
     b54:	20 21 00 ff 	andi r1,r1,0xff
     b58:	c3 a0 00 00 	ret

00000b5c <uart_putchar>:

void uart_putchar(char c)
{
     b5c:	78 02 00 00 	mvhi r2,0x0
     b60:	38 42 30 d0 	ori r2,r2,0x30d0
     b64:	28 43 00 00 	lw r3,(r2+0)
     b68:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
     b6c:	28 62 00 00 	lw r2,(r3+0)
     b70:	20 42 00 10 	andi r2,r2,0x10
     b74:	5c 40 ff fe 	bne r2,r0,b6c <uart_putchar+0x10>
	uart0->rxtx = c;
     b78:	58 61 00 04 	sw (r3+4),r1
}
     b7c:	c3 a0 00 00 	ret

00000b80 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
     b80:	40 24 00 00 	lbu r4,(r1+0)
     b84:	44 80 00 0b 	be r4,r0,bb0 <uart_putstr+0x30>
     b88:	78 02 00 00 	mvhi r2,0x0
     b8c:	38 42 30 d0 	ori r2,r2,0x30d0
     b90:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
     b94:	28 62 00 00 	lw r2,(r3+0)
     b98:	20 42 00 10 	andi r2,r2,0x10
     b9c:	5c 40 ff fe 	bne r2,r0,b94 <uart_putstr+0x14>
	uart0->rxtx = c;
     ba0:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
     ba4:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
     ba8:	40 24 00 00 	lbu r4,(r1+0)
     bac:	5c 82 ff fa 	bne r4,r2,b94 <uart_putstr+0x14>
     bb0:	c3 a0 00 00 	ret

00000bb4 <wifi_putchar>:
		uart_putstr("AT+CIPSERVER=1,80\r\n");
		c = ok();
	}
}

void wifi_putchar(char a){
     bb4:	37 9c ff ec 	addi sp,sp,-20
     bb8:	5b 8b 00 14 	sw (sp+20),r11
     bbc:	5b 8c 00 10 	sw (sp+16),r12
     bc0:	5b 8d 00 0c 	sw (sp+12),r13
     bc4:	5b 8e 00 08 	sw (sp+8),r14
     bc8:	5b 9d 00 04 	sw (sp+4),ra
     bcc:	78 0d 00 00 	mvhi r13,0x0
     bd0:	78 0c 00 00 	mvhi r12,0x0
     bd4:	20 2e 00 ff 	andi r14,r1,0xff
     bd8:	39 ad 2c 2c 	ori r13,r13,0x2c2c
     bdc:	39 8c 30 d0 	ori r12,r12,0x30d0
	int c = 0; 	  
	while(c == 0){
		uart_putstr("AT+CIPSEND=0,1\r\n");
     be0:	b9 a0 08 00 	mv r1,r13
     be4:	fb ff ff e7 	calli b80 <uart_putstr>
     be8:	29 82 00 00 	lw r2,(r12+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
     bec:	28 4b 00 00 	lw r11,(r2+0)
     bf0:	21 6b 00 10 	andi r11,r11,0x10
     bf4:	5d 60 ff fe 	bne r11,r0,bec <wifi_putchar+0x38>
	uart0->rxtx = c;
     bf8:	58 4e 00 04 	sw (r2+4),r14
void wifi_putchar(char a){
	int c = 0; 	  
	while(c == 0){
		uart_putstr("AT+CIPSEND=0,1\r\n");
		uart_putchar(a);
		c = ok();
     bfc:	fb ff ff bc 	calli aec <ok>
	}
}

void wifi_putchar(char a){
	int c = 0; 	  
	while(c == 0){
     c00:	44 2b ff f8 	be r1,r11,be0 <wifi_putchar+0x2c>
		uart_putstr("AT+CIPSEND=0,1\r\n");
		uart_putchar(a);
		c = ok();
	}
}
     c04:	2b 9d 00 04 	lw ra,(sp+4)
     c08:	2b 8b 00 14 	lw r11,(sp+20)
     c0c:	2b 8c 00 10 	lw r12,(sp+16)
     c10:	2b 8d 00 0c 	lw r13,(sp+12)
     c14:	2b 8e 00 08 	lw r14,(sp+8)
     c18:	37 9c 00 14 	addi sp,sp,20
     c1c:	c3 a0 00 00 	ret

00000c20 <init_wifi>:
}
/***************************************************************************
 * WIFI ESP8266 Functions
 */

void init_wifi(){ //configurar el modulo como estación con puerto 80
     c20:	37 9c ff f8 	addi sp,sp,-8
     c24:	5b 8b 00 08 	sw (sp+8),r11
     c28:	5b 9d 00 04 	sw (sp+4),ra
	uart_putstr("AT+RST\r\n");
     c2c:	78 01 00 00 	mvhi r1,0x0
     c30:	38 21 2c 40 	ori r1,r1,0x2c40
     c34:	fb ff ff d3 	calli b80 <uart_putstr>
	msleep(200);
     c38:	34 01 00 c8 	mvi r1,200
     c3c:	78 0b 00 00 	mvhi r11,0x0
     c40:	fb ff ff 5d 	calli 9b4 <msleep>
     c44:	39 6b 2c 4c 	ori r11,r11,0x2c4c
	int c = 0;
	while(c==0){
		uart_putstr("AT+CIPMUX=1\r\n");
     c48:	b9 60 08 00 	mv r1,r11
     c4c:	fb ff ff cd 	calli b80 <uart_putstr>
		c = ok();
     c50:	fb ff ff a7 	calli aec <ok>

void init_wifi(){ //configurar el modulo como estación con puerto 80
	uart_putstr("AT+RST\r\n");
	msleep(200);
	int c = 0;
	while(c==0){
     c54:	44 20 ff fd 	be r1,r0,c48 <init_wifi+0x28>
     c58:	78 0b 00 00 	mvhi r11,0x0
     c5c:	39 6b 2c 5c 	ori r11,r11,0x2c5c
		uart_putstr("AT+CIPMUX=1\r\n");
		c = ok();
	}
	c = 0;
	while (c==0){
		uart_putstr("AT+CIPSERVER=1,80\r\n");
     c60:	b9 60 08 00 	mv r1,r11
     c64:	fb ff ff c7 	calli b80 <uart_putstr>
		c = ok();
     c68:	fb ff ff a1 	calli aec <ok>
	while(c==0){
		uart_putstr("AT+CIPMUX=1\r\n");
		c = ok();
	}
	c = 0;
	while (c==0){
     c6c:	44 20 ff fd 	be r1,r0,c60 <init_wifi+0x40>
		uart_putstr("AT+CIPSERVER=1,80\r\n");
		c = ok();
	}
}
     c70:	2b 9d 00 04 	lw ra,(sp+4)
     c74:	2b 8b 00 08 	lw r11,(sp+8)
     c78:	37 9c 00 08 	addi sp,sp,8
     c7c:	c3 a0 00 00 	ret

00000c80 <uart_getchar1>:
	}
}
//uart1

char uart_getchar1()
{   
     c80:	78 01 00 00 	mvhi r1,0x0
     c84:	38 21 30 e0 	ori r1,r1,0x30e0
     c88:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;
     c8c:	28 41 00 00 	lw r1,(r2+0)
     c90:	20 21 00 01 	andi r1,r1,0x1
     c94:	44 20 ff fe 	be r1,r0,c8c <uart_getchar1+0xc>
	return uart1->rxtx;
     c98:	28 41 00 04 	lw r1,(r2+4)
}
     c9c:	20 21 00 ff 	andi r1,r1,0xff
     ca0:	c3 a0 00 00 	ret

00000ca4 <uart_putchar1>:

void uart_putchar1(char c)
{
     ca4:	78 02 00 00 	mvhi r2,0x0
     ca8:	38 42 30 e0 	ori r2,r2,0x30e0
     cac:	28 43 00 00 	lw r3,(r2+0)
     cb0:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
     cb4:	28 62 00 00 	lw r2,(r3+0)
     cb8:	20 42 00 10 	andi r2,r2,0x10
     cbc:	5c 40 ff fe 	bne r2,r0,cb4 <uart_putchar1+0x10>
	uart1->rxtx = c;
     cc0:	58 61 00 04 	sw (r3+4),r1
}
     cc4:	c3 a0 00 00 	ret

00000cc8 <uart_putstr1>:

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
     cc8:	40 24 00 00 	lbu r4,(r1+0)
     ccc:	44 80 00 0b 	be r4,r0,cf8 <uart_putstr1+0x30>
     cd0:	78 02 00 00 	mvhi r2,0x0
     cd4:	38 42 30 e0 	ori r2,r2,0x30e0
     cd8:	28 43 00 00 	lw r3,(r2+0)
	return uart1->rxtx;
}

void uart_putchar1(char c)
{
	while (uart1->ucr & UART_BUSY) ;
     cdc:	28 62 00 00 	lw r2,(r3+0)
     ce0:	20 42 00 10 	andi r2,r2,0x10
     ce4:	5c 40 ff fe 	bne r2,r0,cdc <uart_putstr1+0x14>
	uart1->rxtx = c;
     ce8:	58 64 00 04 	sw (r3+4),r4
void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar1(*c);
		c++;
     cec:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
     cf0:	40 24 00 00 	lbu r4,(r1+0)
     cf4:	5c 82 ff fa 	bne r4,r2,cdc <uart_putstr1+0x14>
     cf8:	c3 a0 00 00 	ret

00000cfc <write_dir>:
 */


void write_dir(char dir)
{
	gpio0->gpio_dir=dir;
     cfc:	78 02 00 00 	mvhi r2,0x0
     d00:	38 42 30 d8 	ori r2,r2,0x30d8
     d04:	28 42 00 00 	lw r2,(r2+0)
 * GPIO Functions
 */


void write_dir(char dir)
{
     d08:	20 21 00 ff 	andi r1,r1,0xff
	gpio0->gpio_dir=dir;
     d0c:	58 41 00 08 	sw (r2+8),r1

}
     d10:	c3 a0 00 00 	ret

00000d14 <write_data>:


void write_data(char data)
{
	gpio0->gpio_o=data; 
     d14:	78 02 00 00 	mvhi r2,0x0
     d18:	38 42 30 d8 	ori r2,r2,0x30d8
     d1c:	28 42 00 00 	lw r2,(r2+0)

}


void write_data(char data)
{
     d20:	20 21 00 ff 	andi r1,r1,0xff
	gpio0->gpio_o=data; 
     d24:	58 41 00 04 	sw (r2+4),r1

}
     d28:	c3 a0 00 00 	ret

00000d2c <read_data>:


char read_data()
{
	return gpio0->gpio_i;
     d2c:	78 01 00 00 	mvhi r1,0x0
     d30:	38 21 30 d8 	ori r1,r1,0x30d8
     d34:	28 21 00 00 	lw r1,(r1+0)
     d38:	28 21 00 00 	lw r1,(r1+0)

}
     d3c:	20 21 00 ff 	andi r1,r1,0xff
     d40:	c3 a0 00 00 	ret

00000d44 <set_period>:
/***************************************************************************
 * Functions PWM //FUNCIONES PRIMITIVAS
 */

void set_period(int p){
	pwm0->period=p;
     d44:	78 02 00 00 	mvhi r2,0x0
     d48:	38 42 30 e4 	ori r2,r2,0x30e4
     d4c:	28 42 00 00 	lw r2,(r2+0)
     d50:	58 41 00 00 	sw (r2+0),r1
}
     d54:	c3 a0 00 00 	ret

00000d58 <set_motor1>:
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
     d58:	78 02 00 00 	mvhi r2,0x0
     d5c:	38 42 30 e4 	ori r2,r2,0x30e4
     d60:	28 42 00 00 	lw r2,(r2+0)
     d64:	58 41 00 04 	sw (r2+4),r1
}
     d68:	c3 a0 00 00 	ret

00000d6c <set_motor2>:
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
     d6c:	78 02 00 00 	mvhi r2,0x0
     d70:	38 42 30 e4 	ori r2,r2,0x30e4
     d74:	28 42 00 00 	lw r2,(r2+0)
     d78:	58 41 00 08 	sw (r2+8),r1
}
     d7c:	c3 a0 00 00 	ret

00000d80 <set_motor3>:
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
     d80:	78 02 00 00 	mvhi r2,0x0
     d84:	38 42 30 e4 	ori r2,r2,0x30e4
     d88:	28 42 00 00 	lw r2,(r2+0)
     d8c:	58 41 00 0c 	sw (r2+12),r1
}
     d90:	c3 a0 00 00 	ret

00000d94 <set_motor4>:
void set_motor4(int wk){
	pwm0-> duty_m4=wk;
     d94:	78 02 00 00 	mvhi r2,0x0
     d98:	38 42 30 e4 	ori r2,r2,0x30e4
     d9c:	28 42 00 00 	lw r2,(r2+0)
     da0:	58 41 00 10 	sw (r2+16),r1
}
     da4:	c3 a0 00 00 	ret

00000da8 <setMotors>:
int velM1=0xEA60;
int velM2=0xEA60;
int velM3=0xEA60;
int velM4=0xEA60;

void setMotors(){
     da8:	37 9c ff fc 	addi sp,sp,-4
     dac:	5b 9d 00 04 	sw (sp+4),ra
/***************************************************************************
 * Functions PWM //FUNCIONES PRIMITIVAS
 */

void set_period(int p){
	pwm0->period=p;
     db0:	78 01 00 00 	mvhi r1,0x0
     db4:	78 05 00 00 	mvhi r5,0x0
     db8:	38 a5 2c 24 	ori r5,r5,0x2c24
     dbc:	38 21 30 e4 	ori r1,r1,0x30e4
     dc0:	28 22 00 00 	lw r2,(r1+0)
     dc4:	28 a4 00 00 	lw r4,(r5+0)
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
     dc8:	38 03 ea 60 	mvu r3,0xea60
	set_period(0x1E8480); //F=50Hz
	set_motor1(0xEA60);
	set_motor2(0xEA60);
	set_motor3(0xEA60);
	set_motor4(0xEA60);
	msleep(0x5E8);
     dcc:	34 01 05 e8 	mvi r1,1512
/***************************************************************************
 * Functions PWM //FUNCIONES PRIMITIVAS
 */

void set_period(int p){
	pwm0->period=p;
     dd0:	58 44 00 00 	sw (r2+0),r4
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
     dd4:	58 43 00 04 	sw (r2+4),r3
}
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
     dd8:	58 43 00 08 	sw (r2+8),r3
}
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
     ddc:	58 43 00 0c 	sw (r2+12),r3
}
void set_motor4(int wk){
	pwm0-> duty_m4=wk;
     de0:	58 43 00 10 	sw (r2+16),r3
	set_period(0x1E8480); //F=50Hz
	set_motor1(0xEA60);
	set_motor2(0xEA60);
	set_motor3(0xEA60);
	set_motor4(0xEA60);
	msleep(0x5E8);
     de4:	fb ff fe f4 	calli 9b4 <msleep>
}
     de8:	2b 9d 00 04 	lw ra,(sp+4)
     dec:	37 9c 00 04 	addi sp,sp,4
     df0:	c3 a0 00 00 	ret

00000df4 <forward_backward>:

void forward_backward(){}
     df4:	c3 a0 00 00 	ret

00000df8 <rght_lft>:
void rght_lft(){}
     df8:	c3 a0 00 00 	ret

00000dfc <testMotos>:
	
void testMotos(){
     dfc:	37 9c ff f8 	addi sp,sp,-8
     e00:	5b 8b 00 08 	sw (sp+8),r11
     e04:	5b 9d 00 04 	sw (sp+4),ra

void set_period(int p){
	pwm0->period=p;
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
     e08:	78 0b 00 00 	mvhi r11,0x0
     e0c:	78 01 00 00 	mvhi r1,0x0
     e10:	39 6b 30 e4 	ori r11,r11,0x30e4
     e14:	38 21 2c 28 	ori r1,r1,0x2c28
     e18:	29 63 00 00 	lw r3,(r11+0)
     e1c:	28 22 00 00 	lw r2,(r1+0)
void testMotos(){
	set_motor1(0X5DC+0xFD20); //0x10FC=0X5DC+0xFD20
	set_motor2(0X5DC+0xFD20);
	set_motor3(0X5DC+0xFD20);
	set_motor4(0X5DC+0xFD20);
	msleep(3000);
     e20:	34 01 0b b8 	mvi r1,3000

void set_period(int p){
	pwm0->period=p;
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
     e24:	58 62 00 04 	sw (r3+4),r2
}
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
     e28:	58 62 00 08 	sw (r3+8),r2
}
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
     e2c:	58 62 00 0c 	sw (r3+12),r2
}
void set_motor4(int wk){
	pwm0-> duty_m4=wk;
     e30:	58 62 00 10 	sw (r3+16),r2
void testMotos(){
	set_motor1(0X5DC+0xFD20); //0x10FC=0X5DC+0xFD20
	set_motor2(0X5DC+0xFD20);
	set_motor3(0X5DC+0xFD20);
	set_motor4(0X5DC+0xFD20);
	msleep(3000);
     e34:	fb ff fe e0 	calli 9b4 <msleep>

void set_period(int p){
	pwm0->period=p;
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
     e38:	29 62 00 00 	lw r2,(r11+0)
     e3c:	38 03 ea 60 	mvu r3,0xea60
	msleep(3000);
	set_motor1(0xEA60); 
	set_motor2(0xEA60);
	set_motor3(0xEA60);
	set_motor4(0xEA60);
	msleep(3000);
     e40:	34 01 0b b8 	mvi r1,3000

void set_period(int p){
	pwm0->period=p;
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
     e44:	58 43 00 04 	sw (r2+4),r3
}
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
     e48:	58 43 00 08 	sw (r2+8),r3
}
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
     e4c:	58 43 00 0c 	sw (r2+12),r3
}
void set_motor4(int wk){
	pwm0-> duty_m4=wk;
     e50:	58 43 00 10 	sw (r2+16),r3
	msleep(3000);
	set_motor1(0xEA60); 
	set_motor2(0xEA60);
	set_motor3(0xEA60);
	set_motor4(0xEA60);
	msleep(3000);
     e54:	fb ff fe d8 	calli 9b4 <msleep>
}
     e58:	2b 9d 00 04 	lw ra,(sp+4)
     e5c:	2b 8b 00 08 	lw r11,(sp+8)
     e60:	37 9c 00 08 	addi sp,sp,8
     e64:	c3 a0 00 00 	ret

00000e68 <start_Read>:

/******************************************************************************
 * i2c Functons
 */
void start_Read (int r)
{  i2c0->startRead = r;
     e68:	78 02 00 00 	mvhi r2,0x0
     e6c:	38 42 30 dc 	ori r2,r2,0x30dc
     e70:	28 42 00 00 	lw r2,(r2+0)
     e74:	58 41 00 14 	sw (r2+20),r1
}
     e78:	c3 a0 00 00 	ret

00000e7c <start_Write>:
void start_Write (int w)
{  i2c0->startWrite = w;
     e7c:	78 02 00 00 	mvhi r2,0x0
     e80:	38 42 30 dc 	ori r2,r2,0x30dc
     e84:	28 42 00 00 	lw r2,(r2+0)
     e88:	58 41 00 18 	sw (r2+24),r1
}
     e8c:	c3 a0 00 00 	ret

00000e90 <rw>:
void rw(int data_rw){
	i2c0->rw = data_rw;
     e90:	78 02 00 00 	mvhi r2,0x0
     e94:	38 42 30 dc 	ori r2,r2,0x30dc
     e98:	28 42 00 00 	lw r2,(r2+0)
     e9c:	58 41 00 0c 	sw (r2+12),r1
}
     ea0:	c3 a0 00 00 	ret

00000ea4 <i2c_write>:

void i2c_write (int dirI2C, int dirIntern, int data)
{		
     ea4:	37 9c ff ec 	addi sp,sp,-20
     ea8:	5b 8b 00 14 	sw (sp+20),r11
     eac:	5b 8c 00 10 	sw (sp+16),r12
     eb0:	5b 8d 00 0c 	sw (sp+12),r13
     eb4:	5b 8e 00 08 	sw (sp+8),r14
     eb8:	5b 9d 00 04 	sw (sp+4),ra
 */
void start_Read (int r)
{  i2c0->startRead = r;
}
void start_Write (int w)
{  i2c0->startWrite = w;
     ebc:	78 0b 00 00 	mvhi r11,0x0
     ec0:	39 6b 30 dc 	ori r11,r11,0x30dc
     ec4:	29 64 00 00 	lw r4,(r11+0)
void rw(int data_rw){
	i2c0->rw = data_rw;
}

void i2c_write (int dirI2C, int dirIntern, int data)
{		
     ec8:	b8 20 68 00 	mv r13,r1
 */
void start_Read (int r)
{  i2c0->startRead = r;
}
void start_Write (int w)
{  i2c0->startWrite = w;
     ecc:	34 01 00 01 	mvi r1,1
     ed0:	58 81 00 18 	sw (r4+24),r1
}

void i2c_write (int dirI2C, int dirIntern, int data)
{		
	start_Write(1);
	msleep(10);
     ed4:	34 01 00 0a 	mvi r1,10
void rw(int data_rw){
	i2c0->rw = data_rw;
}

void i2c_write (int dirI2C, int dirIntern, int data)
{		
     ed8:	b8 40 70 00 	mv r14,r2
     edc:	b8 60 60 00 	mv r12,r3
	start_Write(1);
	msleep(10);
     ee0:	fb ff fe b5 	calli 9b4 <msleep>
 */
void start_Read (int r)
{  i2c0->startRead = r;
}
void start_Write (int w)
{  i2c0->startWrite = w;
     ee4:	29 64 00 00 	lw r4,(r11+0)
     ee8:	58 80 00 18 	sw (r4+24),r0
}
void rw(int data_rw){
	i2c0->rw = data_rw;
     eec:	58 80 00 0c 	sw (r4+12),r0
{		
	start_Write(1);
	msleep(10);
	start_Write(0);
	rw(0); 
	while((i2c0->availWrite)==0x00);
     ef0:	28 85 00 04 	lw r5,(r4+4)
     ef4:	44 a0 ff ff 	be r5,r0,ef0 <i2c_write+0x4c>
	i2c0->data = ((dirI2C<<16)|(dirIntern<<8)|data);	
     ef8:	3d c2 00 08 	sli r2,r14,8
     efc:	3d a5 00 10 	sli r5,r13,16
     f00:	b8 4c 08 00 	or r1,r2,r12
     f04:	b8 25 08 00 	or r1,r1,r5
     f08:	58 81 00 10 	sw (r4+16),r1

}
     f0c:	2b 9d 00 04 	lw ra,(sp+4)
     f10:	2b 8b 00 14 	lw r11,(sp+20)
     f14:	2b 8c 00 10 	lw r12,(sp+16)
     f18:	2b 8d 00 0c 	lw r13,(sp+12)
     f1c:	2b 8e 00 08 	lw r14,(sp+8)
     f20:	37 9c 00 14 	addi sp,sp,20
     f24:	c3 a0 00 00 	ret

00000f28 <i2c_read>:

int8_t i2c_read (int dirI2C, int dirIntern){  
     f28:	37 9c ff ec 	addi sp,sp,-20
     f2c:	5b 8b 00 14 	sw (sp+20),r11
     f30:	5b 8c 00 10 	sw (sp+16),r12
     f34:	5b 8d 00 0c 	sw (sp+12),r13
     f38:	5b 8e 00 08 	sw (sp+8),r14
     f3c:	5b 9d 00 04 	sw (sp+4),ra

/******************************************************************************
 * i2c Functons
 */
void start_Read (int r)
{  i2c0->startRead = r;
     f40:	78 0b 00 00 	mvhi r11,0x0
     f44:	39 6b 30 dc 	ori r11,r11,0x30dc
     f48:	29 63 00 00 	lw r3,(r11+0)
     f4c:	34 0d 00 01 	mvi r13,1
	while((i2c0->availWrite)==0x00);
	i2c0->data = ((dirI2C<<16)|(dirIntern<<8)|data);	

}

int8_t i2c_read (int dirI2C, int dirIntern){  
     f50:	b8 20 60 00 	mv r12,r1

/******************************************************************************
 * i2c Functons
 */
void start_Read (int r)
{  i2c0->startRead = r;
     f54:	58 6d 00 14 	sw (r3+20),r13

}

int8_t i2c_read (int dirI2C, int dirIntern){  
	start_Read(1);
	msleep(10);
     f58:	34 01 00 0a 	mvi r1,10
	while((i2c0->availWrite)==0x00);
	i2c0->data = ((dirI2C<<16)|(dirIntern<<8)|data);	

}

int8_t i2c_read (int dirI2C, int dirIntern){  
     f5c:	b8 40 70 00 	mv r14,r2
	start_Read(1);
	msleep(10);
     f60:	fb ff fe 95 	calli 9b4 <msleep>

/******************************************************************************
 * i2c Functons
 */
void start_Read (int r)
{  i2c0->startRead = r;
     f64:	29 63 00 00 	lw r3,(r11+0)
int8_t i2c_read (int dirI2C, int dirIntern){  
	start_Read(1);
	msleep(10);
	start_Read(0);
	rw(1);
	while((i2c0->availRead)==0x04);
     f68:	34 05 00 04 	mvi r5,4

/******************************************************************************
 * i2c Functons
 */
void start_Read (int r)
{  i2c0->startRead = r;
     f6c:	58 60 00 14 	sw (r3+20),r0
}
void start_Write (int w)
{  i2c0->startWrite = w;
}
void rw(int data_rw){
	i2c0->rw = data_rw;
     f70:	58 6d 00 0c 	sw (r3+12),r13
int8_t i2c_read (int dirI2C, int dirIntern){  
	start_Read(1);
	msleep(10);
	start_Read(0);
	rw(1);
	while((i2c0->availRead)==0x04);
     f74:	28 64 00 08 	lw r4,(r3+8)
     f78:	44 85 ff ff 	be r4,r5,f74 <i2c_read+0x4c>
	i2c0->data = ((dirI2C<<15)|(dirIntern<<7)|dirI2C);
     f7c:	3d 81 00 0f 	sli r1,r12,15
     f80:	3d c2 00 07 	sli r2,r14,7
     f84:	b8 2c 60 00 	or r12,r1,r12
     f88:	b9 82 60 00 	or r12,r12,r2
     f8c:	58 6c 00 10 	sw (r3+16),r12
	return i2c0->i2c_data_out;
     f90:	28 61 00 00 	lw r1,(r3+0)
}
     f94:	b0 20 08 00 	sextb r1,r1
     f98:	2b 9d 00 04 	lw ra,(sp+4)
     f9c:	2b 8b 00 14 	lw r11,(sp+20)
     fa0:	2b 8c 00 10 	lw r12,(sp+16)
     fa4:	2b 8d 00 0c 	lw r13,(sp+12)
     fa8:	2b 8e 00 08 	lw r14,(sp+8)
     fac:	37 9c 00 14 	addi sp,sp,20
     fb0:	c3 a0 00 00 	ret

00000fb4 <initImu>:

/******************************************************************************
 * mpu6050 Functions
 */
void initImu(){
     fb4:	37 9c ff fc 	addi sp,sp,-4
     fb8:	5b 9d 00 04 	sw (sp+4),ra
	//Reset device, reset all registers, clear gyro and accelerometer bias registers		
	i2c_write(ADDRESS_I2C,PWR_MGMT_1,0x80);
     fbc:	34 02 00 6b 	mvi r2,107
     fc0:	34 03 00 80 	mvi r3,128
     fc4:	34 01 00 68 	mvi r1,104
     fc8:	fb ff ff b7 	calli ea4 <i2c_write>
	sleep(100); 
     fcc:	34 01 00 64 	mvi r1,100
     fd0:	fb ff fe 86 	calli 9e8 <sleep>
	//Get stable time source
	i2c_write(ADDRESS_I2C,PWR_MGMT_1,0x01);
     fd4:	34 01 00 68 	mvi r1,104
     fd8:	34 02 00 6b 	mvi r2,107
     fdc:	34 03 00 01 	mvi r3,1
     fe0:	fb ff ff b1 	calli ea4 <i2c_write>
	i2c_write(ADDRESS_I2C,PWR_MGMT_2,0x00);
     fe4:	34 02 00 6c 	mvi r2,108
     fe8:	34 03 00 00 	mvi r3,0
     fec:	34 01 00 68 	mvi r1,104
     ff0:	fb ff ff ad 	calli ea4 <i2c_write>
	sleep(200);
     ff4:	34 01 00 c8 	mvi r1,200
     ff8:	fb ff fe 7c 	calli 9e8 <sleep>
	// Configure device for bias calculation
	i2c_write(ADDRESS_I2C,INT_ENABLE,0x00);
     ffc:	34 01 00 68 	mvi r1,104
    1000:	34 02 00 38 	mvi r2,56
    1004:	34 03 00 00 	mvi r3,0
    1008:	fb ff ff a7 	calli ea4 <i2c_write>
	i2c_write(ADDRESS_I2C,FIFO_EN,0x00);
    100c:	34 01 00 68 	mvi r1,104
    1010:	34 02 00 23 	mvi r2,35
    1014:	34 03 00 00 	mvi r3,0
    1018:	fb ff ff a3 	calli ea4 <i2c_write>
	i2c_write(ADDRESS_I2C,PWR_MGMT_1,0x00);
    101c:	34 01 00 68 	mvi r1,104
    1020:	34 02 00 6b 	mvi r2,107
    1024:	34 03 00 00 	mvi r3,0
    1028:	fb ff ff 9f 	calli ea4 <i2c_write>
	i2c_write(ADDRESS_I2C,I2C_MST_CTRL,0x00);
    102c:	34 01 00 68 	mvi r1,104
    1030:	34 02 00 24 	mvi r2,36
    1034:	34 03 00 00 	mvi r3,0
    1038:	fb ff ff 9b 	calli ea4 <i2c_write>
	i2c_write(ADDRESS_I2C,USER_CTRL,0x00);
    103c:	34 01 00 68 	mvi r1,104
    1040:	34 02 00 6a 	mvi r2,106
    1044:	34 03 00 00 	mvi r3,0
    1048:	fb ff ff 97 	calli ea4 <i2c_write>
	i2c_write(ADDRESS_I2C,USER_CTRL,0x0C);
    104c:	34 02 00 6a 	mvi r2,106
    1050:	34 03 00 0c 	mvi r3,12
    1054:	34 01 00 68 	mvi r1,104
    1058:	fb ff ff 93 	calli ea4 <i2c_write>
	sleep(15);
    105c:	34 01 00 0f 	mvi r1,15
    1060:	fb ff fe 62 	calli 9e8 <sleep>
	// Configure MPU6050 gyro and accelerometer for bias calculation
	i2c_write(ADDRESS_I2C,CONFIG,0x01);
    1064:	34 01 00 68 	mvi r1,104
    1068:	34 02 00 1a 	mvi r2,26
    106c:	34 03 00 01 	mvi r3,1
    1070:	fb ff ff 8d 	calli ea4 <i2c_write>
	i2c_write(ADDRESS_I2C,SMPLRT_DIV,0x00);
    1074:	34 01 00 68 	mvi r1,104
    1078:	34 02 00 19 	mvi r2,25
    107c:	34 03 00 00 	mvi r3,0
    1080:	fb ff ff 89 	calli ea4 <i2c_write>
	i2c_write(ADDRESS_I2C,GYRO_CONFIG,0x01);
    1084:	34 01 00 68 	mvi r1,104
    1088:	34 02 00 1b 	mvi r2,27
    108c:	34 03 00 01 	mvi r3,1
    1090:	fb ff ff 85 	calli ea4 <i2c_write>
	i2c_write(ADDRESS_I2C,ACCEL_CONFIG,0x00);
    1094:	34 01 00 68 	mvi r1,104
    1098:	34 02 00 1c 	mvi r2,28
    109c:	34 03 00 00 	mvi r3,0
    10a0:	fb ff ff 81 	calli ea4 <i2c_write>
	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	i2c_write(ADDRESS_I2C,USER_CTRL,0x40);
    10a4:	34 01 00 68 	mvi r1,104
    10a8:	34 02 00 6a 	mvi r2,106
    10ac:	34 03 00 40 	mvi r3,64
    10b0:	fb ff ff 7d 	calli ea4 <i2c_write>
	i2c_write(ADDRESS_I2C,ACCEL_CONFIG,0x78);
    10b4:	34 02 00 1c 	mvi r2,28
    10b8:	34 03 00 78 	mvi r3,120
    10bc:	34 01 00 68 	mvi r1,104
    10c0:	fb ff ff 79 	calli ea4 <i2c_write>
	sleep(80);
    10c4:	34 01 00 50 	mvi r1,80
    10c8:	fb ff fe 48 	calli 9e8 <sleep>
}
    10cc:	2b 9d 00 04 	lw ra,(sp+4)
    10d0:	37 9c 00 04 	addi sp,sp,4
    10d4:	c3 a0 00 00 	ret

000010d8 <propagateFloat32NaN>:
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    10d8:	00 24 00 16 	srui r4,r1,22
is a NaN, and returns the appropriate NaN result.  If either `a' or `b' is a
signaling NaN, the invalid exception is raised.
-------------------------------------------------------------------------------
*/
static float32 propagateFloat32NaN( float32 a, float32 b )
{
    10dc:	b8 20 18 00 	mv r3,r1
-------------------------------------------------------------------------------
*/
flag float32_is_nan( float32 a )
{

    return ( 0xFF000000 < (bits32) ( a<<1 ) );
    10e0:	3c 26 00 01 	sli r6,r1,1
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    10e4:	20 84 01 ff 	andi r4,r4,0x1ff
    10e8:	34 01 01 fe 	mvi r1,510
    10ec:	34 05 00 00 	mvi r5,0
    10f0:	44 81 00 1f 	be r4,r1,116c <propagateFloat32NaN+0x94>
    10f4:	00 47 00 16 	srui r7,r2,22
    10f8:	34 04 01 fe 	mvi r4,510
    10fc:	20 e7 01 ff 	andi r7,r7,0x1ff
    1100:	34 01 00 00 	mvi r1,0
    1104:	44 e4 00 14 	be r7,r4,1154 <propagateFloat32NaN+0x7c>
    aIsSignalingNaN = float32_is_signaling_nan( a );
    bIsNaN = float32_is_nan( b );
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
    b |= 0x00400000;
    if ( aIsSignalingNaN | bIsSignalingNaN ) float_raise( float_flag_invalid );
    1108:	b8 25 20 00 	or r4,r1,r5
    aIsNaN = float32_is_nan( a );
    aIsSignalingNaN = float32_is_signaling_nan( a );
    bIsNaN = float32_is_nan( b );
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
    b |= 0x00400000;
    110c:	78 01 00 40 	mvhi r1,0x40
    1110:	b8 41 08 00 	or r1,r2,r1
    if ( aIsSignalingNaN | bIsSignalingNaN ) float_raise( float_flag_invalid );
    1114:	44 80 00 06 	be r4,r0,112c <propagateFloat32NaN+0x54>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    1118:	78 04 00 00 	mvhi r4,0x0
    111c:	38 84 31 0c 	ori r4,r4,0x310c
    1120:	28 87 00 00 	lw r7,(r4+0)
    1124:	38 e7 00 10 	ori r7,r7,0x10
    1128:	58 87 00 00 	sw (r4+0),r7
    bIsNaN = float32_is_nan( b );
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
    b |= 0x00400000;
    if ( aIsSignalingNaN | bIsSignalingNaN ) float_raise( float_flag_invalid );
    if ( aIsNaN ) {
    112c:	78 04 ff 00 	mvhi r4,0xff00
    1130:	50 86 00 05 	bgeu r4,r6,1144 <propagateFloat32NaN+0x6c>
-------------------------------------------------------------------------------
*/
flag float32_is_nan( float32 a )
{

    return ( 0xFF000000 < (bits32) ( a<<1 ) );
    1134:	3c 42 00 01 	sli r2,r2,1
    1138:	f4 44 20 00 	cmpgu r4,r2,r4
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
    b |= 0x00400000;
    if ( aIsSignalingNaN | bIsSignalingNaN ) float_raise( float_flag_invalid );
    if ( aIsNaN ) {
        return ( aIsSignalingNaN & bIsNaN ) ? b : a;
    113c:	a0 a4 28 00 	and r5,r5,r4
    1140:	44 a0 00 02 	be r5,r0,1148 <propagateFloat32NaN+0x70>
    }
    else {
        return b;
    }

}
    1144:	c3 a0 00 00 	ret

    aIsNaN = float32_is_nan( a );
    aIsSignalingNaN = float32_is_signaling_nan( a );
    bIsNaN = float32_is_nan( b );
    bIsSignalingNaN = float32_is_signaling_nan( b );
    a |= 0x00400000;
    1148:	78 01 00 40 	mvhi r1,0x40
    114c:	b8 61 08 00 	or r1,r3,r1
    }
    else {
        return b;
    }

}
    1150:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    1154:	78 04 00 00 	mvhi r4,0x0
    1158:	38 84 2c 70 	ori r4,r4,0x2c70
    115c:	28 81 00 00 	lw r1,(r4+0)
    1160:	a0 41 08 00 	and r1,r2,r1
    1164:	7c 21 00 00 	cmpnei r1,r1,0
    1168:	e3 ff ff e8 	bi 1108 <propagateFloat32NaN+0x30>
    116c:	78 01 00 00 	mvhi r1,0x0
    1170:	38 21 2c 70 	ori r1,r1,0x2c70
    1174:	28 25 00 00 	lw r5,(r1+0)
    1178:	a0 65 28 00 	and r5,r3,r5
    117c:	7c a5 00 00 	cmpnei r5,r5,0
    1180:	e3 ff ff dd 	bi 10f4 <propagateFloat32NaN+0x1c>

00001184 <normalizeFloat32Subnormal>:
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    1184:	38 05 ff ff 	mvu r5,0xffff
    1188:	b8 20 20 00 	mv r4,r1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    118c:	34 06 00 00 	mvi r6,0
    if ( a < 0x10000 ) {
    1190:	54 25 00 03 	bgu r1,r5,119c <normalizeFloat32Subnormal+0x18>
        shiftCount += 16;
        a <<= 16;
    1194:	3c 24 00 10 	sli r4,r1,16
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
    1198:	34 06 00 10 	mvi r6,16
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
    119c:	78 07 00 00 	mvhi r7,0x0
    11a0:	38 e7 2c 74 	ori r7,r7,0x2c74
    11a4:	28 e5 00 00 	lw r5,(r7+0)
    11a8:	54 85 00 03 	bgu r4,r5,11b4 <normalizeFloat32Subnormal+0x30>
        shiftCount += 8;
        a <<= 8;
    11ac:	3c 84 00 08 	sli r4,r4,8
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
    11b0:	34 c6 00 08 	addi r6,r6,8
        a <<= 8;
    }
    shiftCount += countLeadingZerosHigh[ a>>24 ];
    11b4:	00 84 00 18 	srui r4,r4,24
    11b8:	78 05 00 00 	mvhi r5,0x0
    11bc:	3c 84 00 02 	sli r4,r4,2
    11c0:	38 a5 2c 90 	ori r5,r5,0x2c90
    11c4:	b4 a4 28 00 	add r5,r5,r4
static void
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    11c8:	28 a4 00 00 	lw r4,(r5+0)
    11cc:	34 c6 ff f8 	addi r6,r6,-8
    11d0:	b4 c4 30 00 	add r6,r6,r4
    *zSigPtr = aSig<<shiftCount;
    11d4:	bc 26 08 00 	sl r1,r1,r6
    *zExpPtr = 1 - shiftCount;
    11d8:	34 04 00 01 	mvi r4,1
    11dc:	c8 86 30 00 	sub r6,r4,r6
 normalizeFloat32Subnormal( bits32 aSig, int16 *zExpPtr, bits32 *zSigPtr )
{
    int8 shiftCount;

    shiftCount = countLeadingZeros32( aSig ) - 8;
    *zSigPtr = aSig<<shiftCount;
    11e0:	58 61 00 00 	sw (r3+0),r1
    *zExpPtr = 1 - shiftCount;
    11e4:	58 46 00 00 	sw (r2+0),r6

}
    11e8:	c3 a0 00 00 	ret

000011ec <roundAndPackFloat32>:
    int8 roundingMode;
    flag roundNearestEven;
    int8 roundIncrement, roundBits;
    flag isTiny;

    roundingMode = float_rounding_mode;
    11ec:	78 04 00 00 	mvhi r4,0x0
    11f0:	38 84 31 08 	ori r4,r4,0x3108
    11f4:	28 86 00 00 	lw r6,(r4+0)
    roundNearestEven = roundingMode == float_round_nearest_even;
    roundIncrement = 0x40;
    11f8:	34 04 00 40 	mvi r4,64
    flag roundNearestEven;
    int8 roundIncrement, roundBits;
    flag isTiny;

    roundingMode = float_rounding_mode;
    roundNearestEven = roundingMode == float_round_nearest_even;
    11fc:	64 c5 00 00 	cmpei r5,r6,0
    roundIncrement = 0x40;
    if ( ! roundNearestEven ) {
    1200:	5c a0 00 08 	bne r5,r0,1220 <roundAndPackFloat32+0x34>
        if ( roundingMode == float_round_to_zero ) {
    1204:	34 07 00 01 	mvi r7,1
            roundIncrement = 0;
    1208:	34 04 00 00 	mvi r4,0

    roundingMode = float_rounding_mode;
    roundNearestEven = roundingMode == float_round_nearest_even;
    roundIncrement = 0x40;
    if ( ! roundNearestEven ) {
        if ( roundingMode == float_round_to_zero ) {
    120c:	44 c7 00 05 	be r6,r7,1220 <roundAndPackFloat32+0x34>
            roundIncrement = 0;
        }
        else {
            roundIncrement = 0x7F;
            if ( zSign ) {
    1210:	44 25 00 37 	be r1,r5,12ec <roundAndPackFloat32+0x100>
    if ( ! roundNearestEven ) {
        if ( roundingMode == float_round_to_zero ) {
            roundIncrement = 0;
        }
        else {
            roundIncrement = 0x7F;
    1214:	7c c4 00 02 	cmpnei r4,r6,2
    1218:	c8 04 20 00 	sub r4,r0,r4
    121c:	20 84 00 7f 	andi r4,r4,0x7f
                if ( roundingMode == float_round_down ) roundIncrement = 0;
            }
        }
    }
    roundBits = zSig & 0x7F;
    if ( 0xFD <= (bits16) zExp ) {
    1220:	20 47 ff ff 	andi r7,r2,0xffff
    1224:	34 09 00 fc 	mvi r9,252
            else {
                if ( roundingMode == float_round_down ) roundIncrement = 0;
            }
        }
    }
    roundBits = zSig & 0x7F;
    1228:	20 66 00 7f 	andi r6,r3,0x7f
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    122c:	b4 83 40 00 	add r8,r4,r3
    if ( 0xFD <= (bits16) zExp ) {
    1230:	51 27 00 05 	bgeu r9,r7,1244 <roundAndPackFloat32+0x58>
        if (    ( 0xFD < zExp )
    1234:	34 07 00 fd 	mvi r7,253
    1238:	48 47 00 22 	bg r2,r7,12c0 <roundAndPackFloat32+0xd4>
             || (    ( zExp == 0xFD )
    123c:	44 47 00 20 	be r2,r7,12bc <roundAndPackFloat32+0xd0>
                  && ( (sbits32) ( zSig + roundIncrement ) < 0 ) )
           ) {
            float_raise( float_flag_overflow | float_flag_inexact );
            return packFloat32( zSign, 0xFF, 0 ) - ( roundIncrement == 0 );
        }
        if ( zExp < 0 ) {
    1240:	48 02 00 2f 	bg r0,r2,12fc <roundAndPackFloat32+0x110>
            zExp = 0;
            roundBits = zSig & 0x7F;
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
        }
    }
    if ( roundBits ) float_exception_flags |= float_flag_inexact;
    1244:	5c c0 00 11 	bne r6,r0,1288 <roundAndPackFloat32+0x9c>
    zSig = ( zSig + roundIncrement )>>7;
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
    1248:	64 c6 00 40 	cmpei r6,r6,64
            roundBits = zSig & 0x7F;
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
        }
    }
    if ( roundBits ) float_exception_flags |= float_flag_inexact;
    zSig = ( zSig + roundIncrement )>>7;
    124c:	01 08 00 07 	srui r8,r8,7
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
    1250:	a0 c5 28 00 	and r5,r6,r5
    1254:	a4 a0 28 00 	not r5,r5
    1258:	a0 a8 40 00 	and r8,r5,r8
    if ( zSig == 0 ) zExp = 0;
    125c:	34 03 00 00 	mvi r3,0
    1260:	5d 00 00 05 	bne r8,r0,1274 <roundAndPackFloat32+0x88>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1264:	3c 21 00 1f 	sli r1,r1,31
    1268:	b5 01 08 00 	add r1,r8,r1
    126c:	b4 23 08 00 	add r1,r1,r3
    zSig = ( zSig + roundIncrement )>>7;
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
    if ( zSig == 0 ) zExp = 0;
    return packFloat32( zSign, zExp, zSig );

}
    1270:	c3 a0 00 00 	ret
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1274:	3c 21 00 1f 	sli r1,r1,31
        }
    }
    if ( roundBits ) float_exception_flags |= float_flag_inexact;
    zSig = ( zSig + roundIncrement )>>7;
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
    if ( zSig == 0 ) zExp = 0;
    1278:	3c 43 00 17 	sli r3,r2,23
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    127c:	b5 01 08 00 	add r1,r8,r1
    1280:	b4 23 08 00 	add r1,r1,r3
    zSig = ( zSig + roundIncrement )>>7;
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
    if ( zSig == 0 ) zExp = 0;
    return packFloat32( zSign, zExp, zSig );

}
    1284:	c3 a0 00 00 	ret
            zExp = 0;
            roundBits = zSig & 0x7F;
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
        }
    }
    if ( roundBits ) float_exception_flags |= float_flag_inexact;
    1288:	78 07 00 00 	mvhi r7,0x0
    128c:	38 e7 31 0c 	ori r7,r7,0x310c
    1290:	28 e3 00 00 	lw r3,(r7+0)
    zSig = ( zSig + roundIncrement )>>7;
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
    1294:	64 c6 00 40 	cmpei r6,r6,64
            roundBits = zSig & 0x7F;
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
        }
    }
    if ( roundBits ) float_exception_flags |= float_flag_inexact;
    zSig = ( zSig + roundIncrement )>>7;
    1298:	01 08 00 07 	srui r8,r8,7
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
    129c:	a0 c5 28 00 	and r5,r6,r5
            zExp = 0;
            roundBits = zSig & 0x7F;
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
        }
    }
    if ( roundBits ) float_exception_flags |= float_flag_inexact;
    12a0:	38 63 00 01 	ori r3,r3,0x1
    zSig = ( zSig + roundIncrement )>>7;
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
    12a4:	a4 a0 28 00 	not r5,r5
            zExp = 0;
            roundBits = zSig & 0x7F;
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
        }
    }
    if ( roundBits ) float_exception_flags |= float_flag_inexact;
    12a8:	58 e3 00 00 	sw (r7+0),r3
    zSig = ( zSig + roundIncrement )>>7;
    zSig &= ~ ( ( ( roundBits ^ 0x40 ) == 0 ) & roundNearestEven );
    12ac:	a0 a8 40 00 	and r8,r5,r8
    if ( zSig == 0 ) zExp = 0;
    12b0:	34 03 00 00 	mvi r3,0
    12b4:	45 00 ff ec 	be r8,r0,1264 <roundAndPackFloat32+0x78>
    12b8:	e3 ff ff ef 	bi 1274 <roundAndPackFloat32+0x88>
    }
    roundBits = zSig & 0x7F;
    if ( 0xFD <= (bits16) zExp ) {
        if (    ( 0xFD < zExp )
             || (    ( zExp == 0xFD )
                  && ( (sbits32) ( zSig + roundIncrement ) < 0 ) )
    12bc:	4d 00 ff e2 	bge r8,r0,1244 <roundAndPackFloat32+0x58>
    12c0:	78 02 00 00 	mvhi r2,0x0
    12c4:	38 42 31 0c 	ori r2,r2,0x310c
    12c8:	28 43 00 00 	lw r3,(r2+0)
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    12cc:	3c 21 00 1f 	sli r1,r1,31
        if (    ( 0xFD < zExp )
             || (    ( zExp == 0xFD )
                  && ( (sbits32) ( zSig + roundIncrement ) < 0 ) )
           ) {
            float_raise( float_flag_overflow | float_flag_inexact );
            return packFloat32( zSign, 0xFF, 0 ) - ( roundIncrement == 0 );
    12d0:	64 84 00 00 	cmpei r4,r4,0
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    12d4:	78 05 7f 80 	mvhi r5,0x7f80
    12d8:	38 63 00 09 	ori r3,r3,0x9
    12dc:	b4 25 08 00 	add r1,r1,r5
    12e0:	58 43 00 00 	sw (r2+0),r3
        if (    ( 0xFD < zExp )
             || (    ( zExp == 0xFD )
                  && ( (sbits32) ( zSig + roundIncrement ) < 0 ) )
           ) {
            float_raise( float_flag_overflow | float_flag_inexact );
            return packFloat32( zSign, 0xFF, 0 ) - ( roundIncrement == 0 );
    12e4:	c8 24 08 00 	sub r1,r1,r4
    12e8:	c3 a0 00 00 	ret
    if ( ! roundNearestEven ) {
        if ( roundingMode == float_round_to_zero ) {
            roundIncrement = 0;
        }
        else {
            roundIncrement = 0x7F;
    12ec:	7c c4 00 03 	cmpnei r4,r6,3
    12f0:	c8 04 20 00 	sub r4,r0,r4
    12f4:	20 84 00 7f 	andi r4,r4,0x7f
    12f8:	e3 ff ff ca 	bi 1220 <roundAndPackFloat32+0x34>
            float_raise( float_flag_overflow | float_flag_inexact );
            return packFloat32( zSign, 0xFF, 0 ) - ( roundIncrement == 0 );
        }
        if ( zExp < 0 ) {
            isTiny =
                   ( float_detect_tininess == float_tininess_before_rounding )
    12fc:	78 06 00 00 	mvhi r6,0x0
    1300:	38 c6 31 10 	ori r6,r6,0x3110
    1304:	28 c6 00 00 	lw r6,(r6+0)
                || ( zExp < -1 )
    1308:	34 09 ff ff 	mvi r9,-1
    130c:	e9 22 48 00 	cmpg r9,r9,r2
            float_raise( float_flag_overflow | float_flag_inexact );
            return packFloat32( zSign, 0xFF, 0 ) - ( roundIncrement == 0 );
        }
        if ( zExp < 0 ) {
            isTiny =
                   ( float_detect_tininess == float_tininess_before_rounding )
    1310:	64 c6 00 01 	cmpei r6,r6,1
           ) {
            float_raise( float_flag_overflow | float_flag_inexact );
            return packFloat32( zSign, 0xFF, 0 ) - ( roundIncrement == 0 );
        }
        if ( zExp < 0 ) {
            isTiny =
    1314:	34 07 00 01 	mvi r7,1
    1318:	b9 26 30 00 	or r6,r9,r6
    131c:	44 c0 00 09 	be r6,r0,1340 <roundAndPackFloat32+0x154>
                   ( float_detect_tininess == float_tininess_before_rounding )
                || ( zExp < -1 )
                || ( zSig + roundIncrement < 0x80000000 );
            shift32RightJamming( zSig, - zExp, &zSig );
    1320:	c8 02 30 00 	sub r6,r0,r2
    bits32 z;

    if ( count == 0 ) {
        z = a;
    }
    else if ( count < 32 ) {
    1324:	34 08 00 1f 	mvi r8,31
    1328:	48 c8 00 08 	bg r6,r8,1348 <roundAndPackFloat32+0x15c>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    132c:	bc 62 10 00 	sl r2,r3,r2
    1330:	80 66 30 00 	sru r6,r3,r6
    1334:	7c 43 00 00 	cmpnei r3,r2,0
    1338:	b8 66 18 00 	or r3,r3,r6
    133c:	e0 00 00 04 	bi 134c <roundAndPackFloat32+0x160>
           ) {
            float_raise( float_flag_overflow | float_flag_inexact );
            return packFloat32( zSign, 0xFF, 0 ) - ( roundIncrement == 0 );
        }
        if ( zExp < 0 ) {
            isTiny =
    1340:	6d 07 00 00 	cmpgei r7,r8,0
    1344:	e3 ff ff f7 	bi 1320 <roundAndPackFloat32+0x134>
    }
    else {
        z = ( a != 0 );
    1348:	7c 63 00 00 	cmpnei r3,r3,0
                   ( float_detect_tininess == float_tininess_before_rounding )
                || ( zExp < -1 )
                || ( zSig + roundIncrement < 0x80000000 );
            shift32RightJamming( zSig, - zExp, &zSig );
            zExp = 0;
            roundBits = zSig & 0x7F;
    134c:	20 66 00 7f 	andi r6,r3,0x7f
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
    1350:	7c c2 00 00 	cmpnei r2,r6,0
    1354:	b4 64 40 00 	add r8,r3,r4
    1358:	a0 e2 38 00 	and r7,r7,r2
            isTiny =
                   ( float_detect_tininess == float_tininess_before_rounding )
                || ( zExp < -1 )
                || ( zSig + roundIncrement < 0x80000000 );
            shift32RightJamming( zSig, - zExp, &zSig );
            zExp = 0;
    135c:	34 02 00 00 	mvi r2,0
            roundBits = zSig & 0x7F;
            if ( isTiny && roundBits ) float_raise( float_flag_underflow );
    1360:	44 e0 ff b9 	be r7,r0,1244 <roundAndPackFloat32+0x58>
    1364:	78 07 00 00 	mvhi r7,0x0
    1368:	38 e7 31 0c 	ori r7,r7,0x310c
    136c:	28 e9 00 00 	lw r9,(r7+0)
    1370:	b4 83 40 00 	add r8,r4,r3
            isTiny =
                   ( float_detect_tininess == float_tininess_before_rounding )
                || ( zExp < -1 )
                || ( zSig + roundIncrement < 0x80000000 );
            shift32RightJamming( zSig, - zExp, &zSig );
            zExp = 0;
    1374:	34 02 00 00 	mvi r2,0
    1378:	39 23 00 04 	ori r3,r9,0x4
    137c:	e3 ff ff c6 	bi 1294 <roundAndPackFloat32+0xa8>

00001380 <normalizeRoundAndPackFloat32>:
point exponent.
-------------------------------------------------------------------------------
*/
static float32
 normalizeRoundAndPackFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    1380:	37 9c ff fc 	addi sp,sp,-4
    1384:	5b 9d 00 04 	sw (sp+4),ra
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
    1388:	38 05 ff ff 	mvu r5,0xffff
    138c:	b8 60 20 00 	mv r4,r3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };
    int8 shiftCount;
      
    shiftCount = 0;
    1390:	34 06 00 00 	mvi r6,0
    if ( a < 0x10000 ) {
    1394:	54 65 00 03 	bgu r3,r5,13a0 <normalizeRoundAndPackFloat32+0x20>
        shiftCount += 16;
        a <<= 16;
    1398:	3c 64 00 10 	sli r4,r3,16
    };
    int8 shiftCount;
      
    shiftCount = 0;
    if ( a < 0x10000 ) {
        shiftCount += 16;
    139c:	34 06 00 10 	mvi r6,16
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
    13a0:	78 07 00 00 	mvhi r7,0x0
    13a4:	38 e7 2c 74 	ori r7,r7,0x2c74
    13a8:	28 e5 00 00 	lw r5,(r7+0)
    13ac:	54 85 00 03 	bgu r4,r5,13b8 <normalizeRoundAndPackFloat32+0x38>
        shiftCount += 8;
        a <<= 8;
    13b0:	3c 84 00 08 	sli r4,r4,8
    if ( a < 0x10000 ) {
        shiftCount += 16;
        a <<= 16;
    }
    if ( a < 0x1000000 ) {
        shiftCount += 8;
    13b4:	34 c6 00 08 	addi r6,r6,8
        a <<= 8;
    }
    shiftCount += countLeadingZerosHigh[ a>>24 ];
    13b8:	00 84 00 18 	srui r4,r4,24
    13bc:	78 05 00 00 	mvhi r5,0x0
    13c0:	3c 84 00 02 	sli r4,r4,2
    13c4:	38 a5 2c 90 	ori r5,r5,0x2c90
    13c8:	b4 a4 28 00 	add r5,r5,r4
    int8 shiftCount;
	
    shiftCount = countLeadingZeros32( zSig ) - 1;
    13cc:	28 a4 00 00 	lw r4,(r5+0)
    13d0:	34 c6 ff ff 	addi r6,r6,-1
    13d4:	b4 c4 30 00 	add r6,r6,r4
    return roundAndPackFloat32( zSign, zExp - shiftCount, zSig<<shiftCount );
    13d8:	bc 66 18 00 	sl r3,r3,r6
    13dc:	c8 46 10 00 	sub r2,r2,r6
    13e0:	fb ff ff 83 	calli 11ec <roundAndPackFloat32>

}
    13e4:	2b 9d 00 04 	lw ra,(sp+4)
    13e8:	37 9c 00 04 	addi sp,sp,4
    13ec:	c3 a0 00 00 	ret

000013f0 <addFloat32Sigs>:
addition is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 addFloat32Sigs( float32 a, float32 b, flag zSign )
{
    13f0:	37 9c ff fc 	addi sp,sp,-4
    13f4:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    13f8:	78 05 00 00 	mvhi r5,0x0
    13fc:	38 a5 2c 78 	ori r5,r5,0x2c78
    1400:	28 a7 00 00 	lw r7,(r5+0)
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1404:	00 48 00 17 	srui r8,r2,23
    1408:	00 25 00 17 	srui r5,r1,23
    140c:	21 08 00 ff 	andi r8,r8,0xff
    1410:	20 a5 00 ff 	andi r5,r5,0xff
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1414:	a0 27 48 00 	and r9,r1,r7

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    1418:	c8 a8 30 00 	sub r6,r5,r8
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    141c:	a0 47 38 00 	and r7,r2,r7
addition is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 addFloat32Sigs( float32 a, float32 b, flag zSign )
{
    1420:	b8 20 20 00 	mv r4,r1
    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 6;
    1424:	3d 29 00 06 	sli r9,r9,6
    bSig <<= 6;
    1428:	3c e7 00 06 	sli r7,r7,6
    if ( 0 < expDiff ) {
    142c:	4c 06 00 20 	bge r0,r6,14ac <addFloat32Sigs+0xbc>
        if ( aExp == 0xFF ) {
    1430:	34 0a 00 ff 	mvi r10,255
    1434:	44 aa 00 27 	be r5,r10,14d0 <addFloat32Sigs+0xe0>
            if ( aSig ) return propagateFloat32NaN( a, b );
            return a;
        }
        if ( bExp == 0 ) {
    1438:	5d 00 00 12 	bne r8,r0,1480 <addFloat32Sigs+0x90>
            --expDiff;
    143c:	34 c6 ff ff 	addi r6,r6,-1
*/
INLINE void shift32RightJamming( bits32 a, int16 count, bits32 *zPtr )
{
    bits32 z;

    if ( count == 0 ) {
    1440:	b8 a0 10 00 	mv r2,r5
    1444:	5c c8 00 11 	bne r6,r8,1488 <addFloat32Sigs+0x98>
        if ( aExp == 0 ) return packFloat32( zSign, 0, ( aSig + bSig )>>6 );
        zSig = 0x40000000 + aSig + bSig;
        zExp = aExp;
        goto roundAndPack;
    }
    aSig |= 0x20000000;
    1448:	78 01 20 00 	mvhi r1,0x2000
    144c:	b9 21 48 00 	or r9,r9,r1
    zSig = ( aSig + bSig )<<1;
    1450:	b5 27 38 00 	add r7,r9,r7
    1454:	3c e4 00 01 	sli r4,r7,1
    --zExp;
    if ( (sbits32) zSig < 0 ) {
    1458:	48 04 00 34 	bg r0,r4,1528 <addFloat32Sigs+0x138>
        zExp = aExp;
        goto roundAndPack;
    }
    aSig |= 0x20000000;
    zSig = ( aSig + bSig )<<1;
    --zExp;
    145c:	34 42 ff ff 	addi r2,r2,-1
    if ( (sbits32) zSig < 0 ) {
        zSig = aSig + bSig;
        ++zExp;
    }
 roundAndPack:
    return roundAndPackFloat32( zSign, zExp, zSig );
    1460:	b8 60 08 00 	mv r1,r3
    1464:	b8 80 18 00 	mv r3,r4
    1468:	fb ff ff 61 	calli 11ec <roundAndPackFloat32>
    146c:	b8 20 20 00 	mv r4,r1

}
    1470:	b8 80 08 00 	mv r1,r4
    1474:	2b 9d 00 04 	lw ra,(sp+4)
    1478:	37 9c 00 04 	addi sp,sp,4
    147c:	c3 a0 00 00 	ret
        }
        if ( bExp == 0 ) {
            --expDiff;
        }
        else {
            bSig |= 0x20000000;
    1480:	78 01 20 00 	mvhi r1,0x2000
    1484:	b8 e1 38 00 	or r7,r7,r1
        z = a;
    }
    else if ( count < 32 ) {
    1488:	34 01 00 1f 	mvi r1,31
    148c:	48 c1 00 15 	bg r6,r1,14e0 <addFloat32Sigs+0xf0>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    1490:	c8 06 08 00 	sub r1,r0,r6
    1494:	bc e1 08 00 	sl r1,r7,r1
    1498:	80 e6 30 00 	sru r6,r7,r6
    149c:	7c 27 00 00 	cmpnei r7,r1,0
    14a0:	b8 a0 10 00 	mv r2,r5
    14a4:	b8 e6 38 00 	or r7,r7,r6
    14a8:	e3 ff ff e8 	bi 1448 <addFloat32Sigs+0x58>
        }
        shift32RightJamming( bSig, expDiff, &bSig );
        zExp = aExp;
    }
    else if ( expDiff < 0 ) {
    14ac:	5c c0 00 10 	bne r6,r0,14ec <addFloat32Sigs+0xfc>
        }
        shift32RightJamming( aSig, - expDiff, &aSig );
        zExp = bExp;
    }
    else {
        if ( aExp == 0xFF ) {
    14b0:	34 06 00 ff 	mvi r6,255
    14b4:	44 a6 00 24 	be r5,r6,1544 <addFloat32Sigs+0x154>
            if ( aSig | bSig ) return propagateFloat32NaN( a, b );
            return a;
        }
        if ( aExp == 0 ) return packFloat32( zSign, 0, ( aSig + bSig )>>6 );
    14b8:	44 a0 00 1e 	be r5,r0,1530 <addFloat32Sigs+0x140>
        zSig = 0x40000000 + aSig + bSig;
    14bc:	78 04 40 00 	mvhi r4,0x4000
    14c0:	b5 24 48 00 	add r9,r9,r4
    14c4:	b5 27 20 00 	add r4,r9,r7
        zExp = aExp;
        goto roundAndPack;
    14c8:	b8 a0 10 00 	mv r2,r5
    14cc:	e3 ff ff e5 	bi 1460 <addFloat32Sigs+0x70>
    expDiff = aExp - bExp;
    aSig <<= 6;
    bSig <<= 6;
    if ( 0 < expDiff ) {
        if ( aExp == 0xFF ) {
            if ( aSig ) return propagateFloat32NaN( a, b );
    14d0:	45 20 ff e8 	be r9,r0,1470 <addFloat32Sigs+0x80>
        shift32RightJamming( aSig, - expDiff, &aSig );
        zExp = bExp;
    }
    else {
        if ( aExp == 0xFF ) {
            if ( aSig | bSig ) return propagateFloat32NaN( a, b );
    14d4:	fb ff ff 01 	calli 10d8 <propagateFloat32NaN>
    14d8:	b8 20 20 00 	mv r4,r1
    14dc:	e3 ff ff e5 	bi 1470 <addFloat32Sigs+0x80>
    }
    else {
        z = ( a != 0 );
    14e0:	7c e7 00 00 	cmpnei r7,r7,0
    14e4:	b8 a0 10 00 	mv r2,r5
    14e8:	e3 ff ff d8 	bi 1448 <addFloat32Sigs+0x58>
        }
        shift32RightJamming( bSig, expDiff, &bSig );
        zExp = aExp;
    }
    else if ( expDiff < 0 ) {
        if ( bExp == 0xFF ) {
    14ec:	34 04 00 ff 	mvi r4,255
    14f0:	45 04 00 1a 	be r8,r4,1558 <addFloat32Sigs+0x168>
            if ( bSig ) return propagateFloat32NaN( a, b );
            return packFloat32( zSign, 0xFF, 0 );
        }
        if ( aExp == 0 ) {
    14f4:	44 a0 00 17 	be r5,r0,1550 <addFloat32Sigs+0x160>
            ++expDiff;
        }
        else {
            aSig |= 0x20000000;
    14f8:	78 01 20 00 	mvhi r1,0x2000
    14fc:	b9 21 48 00 	or r9,r9,r1
        }
        shift32RightJamming( aSig, - expDiff, &aSig );
    1500:	c8 06 08 00 	sub r1,r0,r6
*/
INLINE void shift32RightJamming( bits32 a, int16 count, bits32 *zPtr )
{
    bits32 z;

    if ( count == 0 ) {
    1504:	b9 00 10 00 	mv r2,r8
    1508:	44 20 ff d0 	be r1,r0,1448 <addFloat32Sigs+0x58>
        z = a;
    }
    else if ( count < 32 ) {
    150c:	34 04 00 1f 	mvi r4,31
    1510:	48 24 00 17 	bg r1,r4,156c <addFloat32Sigs+0x17c>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    1514:	bd 26 30 00 	sl r6,r9,r6
    1518:	81 21 08 00 	sru r1,r9,r1
    151c:	7c c9 00 00 	cmpnei r9,r6,0
    1520:	b9 21 48 00 	or r9,r9,r1
    1524:	e3 ff ff c9 	bi 1448 <addFloat32Sigs+0x58>
    }
    aSig |= 0x20000000;
    zSig = ( aSig + bSig )<<1;
    --zExp;
    if ( (sbits32) zSig < 0 ) {
        zSig = aSig + bSig;
    1528:	b8 e0 20 00 	mv r4,r7
    152c:	e3 ff ff cd 	bi 1460 <addFloat32Sigs+0x70>
    else {
        if ( aExp == 0xFF ) {
            if ( aSig | bSig ) return propagateFloat32NaN( a, b );
            return a;
        }
        if ( aExp == 0 ) return packFloat32( zSign, 0, ( aSig + bSig )>>6 );
    1530:	b4 e9 20 00 	add r4,r7,r9
    1534:	00 84 00 06 	srui r4,r4,6
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1538:	3c 63 00 1f 	sli r3,r3,31
    153c:	b4 83 20 00 	add r4,r4,r3
    else {
        if ( aExp == 0xFF ) {
            if ( aSig | bSig ) return propagateFloat32NaN( a, b );
            return a;
        }
        if ( aExp == 0 ) return packFloat32( zSign, 0, ( aSig + bSig )>>6 );
    1540:	e3 ff ff cc 	bi 1470 <addFloat32Sigs+0x80>
        shift32RightJamming( aSig, - expDiff, &aSig );
        zExp = bExp;
    }
    else {
        if ( aExp == 0xFF ) {
            if ( aSig | bSig ) return propagateFloat32NaN( a, b );
    1544:	b8 e9 38 00 	or r7,r7,r9
    1548:	44 e0 ff ca 	be r7,r0,1470 <addFloat32Sigs+0x80>
    154c:	e3 ff ff e2 	bi 14d4 <addFloat32Sigs+0xe4>
        if ( bExp == 0xFF ) {
            if ( bSig ) return propagateFloat32NaN( a, b );
            return packFloat32( zSign, 0xFF, 0 );
        }
        if ( aExp == 0 ) {
            ++expDiff;
    1550:	34 c6 00 01 	addi r6,r6,1
    1554:	e3 ff ff eb 	bi 1500 <addFloat32Sigs+0x110>
        shift32RightJamming( bSig, expDiff, &bSig );
        zExp = aExp;
    }
    else if ( expDiff < 0 ) {
        if ( bExp == 0xFF ) {
            if ( bSig ) return propagateFloat32NaN( a, b );
    1558:	5c e0 ff df 	bne r7,r0,14d4 <addFloat32Sigs+0xe4>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    155c:	3c 63 00 1f 	sli r3,r3,31
    1560:	78 01 7f 80 	mvhi r1,0x7f80
    1564:	b4 61 20 00 	add r4,r3,r1
        zExp = aExp;
    }
    else if ( expDiff < 0 ) {
        if ( bExp == 0xFF ) {
            if ( bSig ) return propagateFloat32NaN( a, b );
            return packFloat32( zSign, 0xFF, 0 );
    1568:	e3 ff ff c2 	bi 1470 <addFloat32Sigs+0x80>
    }
    else {
        z = ( a != 0 );
    156c:	7d 29 00 00 	cmpnei r9,r9,0
    1570:	e3 ff ff b6 	bi 1448 <addFloat32Sigs+0x58>

00001574 <subFloat32Sigs>:
result is a NaN.  The subtraction is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 subFloat32Sigs( float32 a, float32 b, flag zSign )
{
    1574:	37 9c ff fc 	addi sp,sp,-4
    1578:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    157c:	78 05 00 00 	mvhi r5,0x0
    1580:	38 a5 2c 78 	ori r5,r5,0x2c78
    1584:	28 a8 00 00 	lw r8,(r5+0)
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1588:	00 27 00 17 	srui r7,r1,23
    158c:	00 49 00 17 	srui r9,r2,23
    1590:	20 e7 00 ff 	andi r7,r7,0xff
    1594:	21 29 00 ff 	andi r9,r9,0xff
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1598:	a0 28 28 00 	and r5,r1,r8
    159c:	a0 48 30 00 	and r6,r2,r8

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    15a0:	c8 e9 40 00 	sub r8,r7,r9
result is a NaN.  The subtraction is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
static float32 subFloat32Sigs( float32 a, float32 b, flag zSign )
{
    15a4:	b8 20 20 00 	mv r4,r1
    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    expDiff = aExp - bExp;
    aSig <<= 7;
    15a8:	3c a5 00 07 	sli r5,r5,7
    bSig <<= 7;
    15ac:	3c c6 00 07 	sli r6,r6,7
    if ( 0 < expDiff ) goto aExpBigger;
    15b0:	49 00 00 0f 	bg r8,r0,15ec <subFloat32Sigs+0x78>
    if ( expDiff < 0 ) goto bExpBigger;
    15b4:	5d 00 00 2f 	bne r8,r0,1670 <subFloat32Sigs+0xfc>
    if ( aExp == 0xFF ) {
    15b8:	34 04 00 ff 	mvi r4,255
    15bc:	44 e4 00 40 	be r7,r4,16bc <subFloat32Sigs+0x148>
        if ( aSig | bSig ) return propagateFloat32NaN( a, b );
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( aExp == 0 ) {
    15c0:	5c e0 00 03 	bne r7,r0,15cc <subFloat32Sigs+0x58>
        aExp = 1;
        bExp = 1;
    15c4:	34 09 00 01 	mvi r9,1
        if ( aSig | bSig ) return propagateFloat32NaN( a, b );
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( aExp == 0 ) {
        aExp = 1;
    15c8:	34 07 00 01 	mvi r7,1
        bExp = 1;
    }
    if ( bSig < aSig ) goto aBigger;
    15cc:	54 a6 00 0f 	bgu r5,r6,1608 <subFloat32Sigs+0x94>
    if ( aSig < bSig ) goto bBigger;
    15d0:	54 c5 00 37 	bgu r6,r5,16ac <subFloat32Sigs+0x138>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    15d4:	78 01 00 00 	mvhi r1,0x0
    15d8:	38 21 31 08 	ori r1,r1,0x3108
    15dc:	28 24 00 00 	lw r4,(r1+0)
    15e0:	64 84 00 03 	cmpei r4,r4,3
    15e4:	3c 84 00 1f 	sli r4,r4,31
        aExp = 1;
        bExp = 1;
    }
    if ( bSig < aSig ) goto aBigger;
    if ( aSig < bSig ) goto bBigger;
    return packFloat32( float_rounding_mode == float_round_down, 0, 0 );
    15e8:	e0 00 00 0e 	bi 1620 <subFloat32Sigs+0xac>
    zSig = bSig - aSig;
    zExp = bExp;
    zSign ^= 1;
    goto normalizeRoundAndPack;
 aExpBigger:
    if ( aExp == 0xFF ) {
    15ec:	34 0a 00 ff 	mvi r10,255
    15f0:	44 ea 00 1a 	be r7,r10,1658 <subFloat32Sigs+0xe4>
        if ( aSig ) return propagateFloat32NaN( a, b );
        return a;
    }
    if ( bExp == 0 ) {
    15f4:	5d 20 00 0f 	bne r9,r0,1630 <subFloat32Sigs+0xbc>
        --expDiff;
    15f8:	35 08 ff ff 	addi r8,r8,-1
*/
INLINE void shift32RightJamming( bits32 a, int16 count, bits32 *zPtr )
{
    bits32 z;

    if ( count == 0 ) {
    15fc:	5d 09 00 0f 	bne r8,r9,1638 <subFloat32Sigs+0xc4>
    }
    else {
        bSig |= 0x40000000;
    }
    shift32RightJamming( bSig, expDiff, &bSig );
    aSig |= 0x40000000;
    1600:	78 01 40 00 	mvhi r1,0x4000
    1604:	b8 a1 28 00 	or r5,r5,r1
 aBigger:
    zSig = aSig - bSig;
    1608:	c8 a6 28 00 	sub r5,r5,r6
    zExp = aExp;
 normalizeRoundAndPack:
    --zExp;
    return normalizeRoundAndPackFloat32( zSign, zExp, zSig );
    160c:	b8 60 08 00 	mv r1,r3
    1610:	34 e2 ff ff 	addi r2,r7,-1
    1614:	b8 a0 18 00 	mv r3,r5
    1618:	fb ff ff 5a 	calli 1380 <normalizeRoundAndPackFloat32>
    161c:	b8 20 20 00 	mv r4,r1

}
    1620:	b8 80 08 00 	mv r1,r4
    1624:	2b 9d 00 04 	lw ra,(sp+4)
    1628:	37 9c 00 04 	addi sp,sp,4
    162c:	c3 a0 00 00 	ret
    }
    if ( bExp == 0 ) {
        --expDiff;
    }
    else {
        bSig |= 0x40000000;
    1630:	78 01 40 00 	mvhi r1,0x4000
    1634:	b8 c1 30 00 	or r6,r6,r1
        z = a;
    }
    else if ( count < 32 ) {
    1638:	34 01 00 1f 	mvi r1,31
    163c:	49 01 00 0b 	bg r8,r1,1668 <subFloat32Sigs+0xf4>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    1640:	c8 08 08 00 	sub r1,r0,r8
    1644:	bc c1 08 00 	sl r1,r6,r1
    1648:	80 c8 40 00 	sru r8,r6,r8
    164c:	7c 26 00 00 	cmpnei r6,r1,0
    1650:	b8 c8 30 00 	or r6,r6,r8
    1654:	e3 ff ff eb 	bi 1600 <subFloat32Sigs+0x8c>
    zExp = bExp;
    zSign ^= 1;
    goto normalizeRoundAndPack;
 aExpBigger:
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, b );
    1658:	44 a0 ff f2 	be r5,r0,1620 <subFloat32Sigs+0xac>
    165c:	fb ff fe 9f 	calli 10d8 <propagateFloat32NaN>
    1660:	b8 20 20 00 	mv r4,r1
    1664:	e3 ff ff ef 	bi 1620 <subFloat32Sigs+0xac>
    }
    else {
        z = ( a != 0 );
    1668:	7c c6 00 00 	cmpnei r6,r6,0
    166c:	e3 ff ff e5 	bi 1600 <subFloat32Sigs+0x8c>
    }
    if ( bSig < aSig ) goto aBigger;
    if ( aSig < bSig ) goto bBigger;
    return packFloat32( float_rounding_mode == float_round_down, 0, 0 );
 bExpBigger:
    if ( bExp == 0xFF ) {
    1670:	34 04 00 ff 	mvi r4,255
    1674:	45 24 00 1d 	be r9,r4,16e8 <subFloat32Sigs+0x174>
        if ( bSig ) return propagateFloat32NaN( a, b );
        return packFloat32( zSign ^ 1, 0xFF, 0 );
    }
    if ( aExp == 0 ) {
    1678:	44 e0 00 1a 	be r7,r0,16e0 <subFloat32Sigs+0x16c>
        ++expDiff;
    }
    else {
        aSig |= 0x40000000;
    167c:	78 01 40 00 	mvhi r1,0x4000
    1680:	b8 a1 28 00 	or r5,r5,r1
    }
    shift32RightJamming( aSig, - expDiff, &aSig );
    1684:	c8 08 08 00 	sub r1,r0,r8
*/
INLINE void shift32RightJamming( bits32 a, int16 count, bits32 *zPtr )
{
    bits32 z;

    if ( count == 0 ) {
    1688:	44 20 00 07 	be r1,r0,16a4 <subFloat32Sigs+0x130>
        z = a;
    }
    else if ( count < 32 ) {
    168c:	34 02 00 1f 	mvi r2,31
    1690:	48 22 00 1c 	bg r1,r2,1700 <subFloat32Sigs+0x18c>
        z = ( a>>count ) | ( ( a<<( ( - count ) & 31 ) ) != 0 );
    1694:	bc a8 40 00 	sl r8,r5,r8
    1698:	80 a1 08 00 	sru r1,r5,r1
    169c:	7d 05 00 00 	cmpnei r5,r8,0
    16a0:	b8 a1 28 00 	or r5,r5,r1
    bSig |= 0x40000000;
    16a4:	78 01 40 00 	mvhi r1,0x4000
    16a8:	b8 c1 30 00 	or r6,r6,r1
 bBigger:
    zSig = bSig - aSig;
    16ac:	c8 c5 28 00 	sub r5,r6,r5
    zExp = bExp;
    zSign ^= 1;
    16b0:	18 63 00 01 	xori r3,r3,0x1
    }
    shift32RightJamming( aSig, - expDiff, &aSig );
    bSig |= 0x40000000;
 bBigger:
    zSig = bSig - aSig;
    zExp = bExp;
    16b4:	b9 20 38 00 	mv r7,r9
    zSign ^= 1;
    goto normalizeRoundAndPack;
    16b8:	e3 ff ff d5 	bi 160c <subFloat32Sigs+0x98>
    aSig <<= 7;
    bSig <<= 7;
    if ( 0 < expDiff ) goto aExpBigger;
    if ( expDiff < 0 ) goto bExpBigger;
    if ( aExp == 0xFF ) {
        if ( aSig | bSig ) return propagateFloat32NaN( a, b );
    16bc:	b8 c5 28 00 	or r5,r6,r5
    16c0:	5c a0 ff e7 	bne r5,r0,165c <subFloat32Sigs+0xe8>
    16c4:	78 01 00 00 	mvhi r1,0x0
    16c8:	38 21 31 0c 	ori r1,r1,0x310c
    16cc:	28 22 00 00 	lw r2,(r1+0)
        float_raise( float_flag_invalid );
        return float32_default_nan;
    16d0:	34 04 ff ff 	mvi r4,-1
    16d4:	38 42 00 10 	ori r2,r2,0x10
    16d8:	58 22 00 00 	sw (r1+0),r2
    16dc:	e3 ff ff d1 	bi 1620 <subFloat32Sigs+0xac>
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
        return packFloat32( zSign ^ 1, 0xFF, 0 );
    }
    if ( aExp == 0 ) {
        ++expDiff;
    16e0:	35 08 00 01 	addi r8,r8,1
    16e4:	e3 ff ff e8 	bi 1684 <subFloat32Sigs+0x110>
    if ( bSig < aSig ) goto aBigger;
    if ( aSig < bSig ) goto bBigger;
    return packFloat32( float_rounding_mode == float_round_down, 0, 0 );
 bExpBigger:
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    16e8:	5c c0 ff dd 	bne r6,r0,165c <subFloat32Sigs+0xe8>
        return packFloat32( zSign ^ 1, 0xFF, 0 );
    16ec:	18 63 00 01 	xori r3,r3,0x1
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    16f0:	3c 64 00 1f 	sli r4,r3,31
    16f4:	78 01 7f 80 	mvhi r1,0x7f80
    16f8:	b4 81 20 00 	add r4,r4,r1
    if ( aSig < bSig ) goto bBigger;
    return packFloat32( float_rounding_mode == float_round_down, 0, 0 );
 bExpBigger:
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
        return packFloat32( zSign ^ 1, 0xFF, 0 );
    16fc:	e3 ff ff c9 	bi 1620 <subFloat32Sigs+0xac>
    }
    else {
        z = ( a != 0 );
    1700:	7c a5 00 00 	cmpnei r5,r5,0
    1704:	e3 ff ff e8 	bi 16a4 <subFloat32Sigs+0x130>

00001708 <estimateDiv64To32.clone.0>:
zero, the approximation returned lies between q and q + 2 inclusive.  If
the exact quotient q is larger than 32 bits, the maximum positive 32-bit
unsigned integer is returned.
-------------------------------------------------------------------------------
*/
static bits32 estimateDiv64To32( bits32 a0, bits32 a1, bits32 b )
    1708:	37 9c ff fc 	addi sp,sp,-4
    170c:	5b 8b 00 04 	sw (sp+4),r11
{
    bits32 b0, b1;
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
    1710:	34 06 ff ff 	mvi r6,-1
    1714:	50 22 00 28 	bgeu r1,r2,17b4 <estimateDiv64To32.clone.0+0xac>
    b0 = b>>16;
    1718:	00 47 00 10 	srui r7,r2,16
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
    171c:	3c e8 00 10 	sli r8,r7,16
    1720:	55 01 00 29 	bgu r8,r1,17c4 <estimateDiv64To32.clone.0+0xbc>
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    1724:	20 44 ff ff 	andi r4,r2,0xffff
    1728:	3c 85 00 10 	sli r5,r4,16
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    172c:	c9 07 18 00 	sub r3,r8,r7
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    1730:	c8 a4 20 00 	sub r4,r5,r4
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
    1734:	78 06 ff ff 	mvhi r6,0xffff
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    1738:	34 05 00 00 	mvi r5,0
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    173c:	34 0a 00 00 	mvi r10,0
    zMiddleA <<= 16;
    1740:	3c 89 00 10 	sli r9,r4,16
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1744:	00 84 00 10 	srui r4,r4,16
    zMiddleA <<= 16;
    z1 += zMiddleA;
    1748:	b5 25 28 00 	add r5,r9,r5
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    174c:	c8 23 18 00 	sub r3,r1,r3
    zMiddleA <<= 16;
    z1 += zMiddleA;
    z0 += ( z1 < zMiddleA );
    1750:	f5 25 48 00 	cmpgu r9,r9,r5
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1754:	c8 64 18 00 	sub r3,r3,r4
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    1758:	7c a1 00 00 	cmpnei r1,r5,0
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    zMiddleA <<= 16;
    z1 += zMiddleA;
    z0 += ( z1 < zMiddleA );
    175c:	c8 69 18 00 	sub r3,r3,r9
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    1760:	c8 61 18 00 	sub r3,r3,r1
INLINE void
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    1764:	c8 05 28 00 	sub r5,r0,r5
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    1768:	c8 6a 18 00 	sub r3,r3,r10
INLINE void
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    176c:	b8 a0 20 00 	mv r4,r5
    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
    mul32To64( b, z, &term0, &term1 );
    sub64( a0, a1, term0, term1, &rem0, &rem1 );
    while ( ( (sbits32) rem0 ) < 0 ) {
    1770:	4c 60 00 0a 	bge r3,r0,1798 <estimateDiv64To32.clone.0+0x90>
    1774:	3c 42 00 10 	sli r2,r2,16
        z -= 0x10000;
    1778:	78 01 ff ff 	mvhi r1,0xffff
 add64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{
    bits32 z1;

    z1 = a1 + b1;
    177c:	b4 a2 20 00 	add r4,r5,r2
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
    1780:	f4 a4 28 00 	cmpgu r5,r5,r4
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
    mul32To64( b, z, &term0, &term1 );
    sub64( a0, a1, term0, term1, &rem0, &rem1 );
    while ( ( (sbits32) rem0 ) < 0 ) {
        z -= 0x10000;
    1784:	b4 c1 30 00 	add r6,r6,r1
{
    bits32 z1;

    z1 = a1 + b1;
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
    1788:	b4 a7 28 00 	add r5,r5,r7
    178c:	b4 65 18 00 	add r3,r3,r5
 add64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{
    bits32 z1;

    z1 = a1 + b1;
    1790:	b8 80 28 00 	mv r5,r4
    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
    mul32To64( b, z, &term0, &term1 );
    sub64( a0, a1, term0, term1, &rem0, &rem1 );
    while ( ( (sbits32) rem0 ) < 0 ) {
    1794:	48 03 ff fa 	bg r0,r3,177c <estimateDiv64To32.clone.0+0x74>
        z -= 0x10000;
        b1 = b<<16;
        add64( rem0, rem1, b0, b1, &rem0, &rem1 );
    }
    rem0 = ( rem0<<16 ) | ( rem1>>16 );
    1798:	00 84 00 10 	srui r4,r4,16
    179c:	3c 63 00 10 	sli r3,r3,16
    z |= ( b0<<16 <= rem0 ) ? 0xFFFF : rem0 / b0;
    17a0:	38 01 ff ff 	mvu r1,0xffff
    while ( ( (sbits32) rem0 ) < 0 ) {
        z -= 0x10000;
        b1 = b<<16;
        add64( rem0, rem1, b0, b1, &rem0, &rem1 );
    }
    rem0 = ( rem0<<16 ) | ( rem1>>16 );
    17a4:	b8 83 18 00 	or r3,r4,r3
    z |= ( b0<<16 <= rem0 ) ? 0xFFFF : rem0 / b0;
    17a8:	50 68 00 02 	bgeu r3,r8,17b0 <estimateDiv64To32.clone.0+0xa8>
    17ac:	8c 67 08 00 	divu r1,r3,r7
    17b0:	b8 26 30 00 	or r6,r1,r6
    return z;

}
    17b4:	b8 c0 08 00 	mv r1,r6
    17b8:	2b 8b 00 04 	lw r11,(sp+4)
    17bc:	37 9c 00 04 	addi sp,sp,4
    17c0:	c3 a0 00 00 	ret
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
    17c4:	8c 27 30 00 	divu r6,r1,r7
    17c8:	20 45 ff ff 	andi r5,r2,0xffff
    17cc:	3c c6 00 10 	sli r6,r6,16
    17d0:	20 e3 ff ff 	andi r3,r7,0xffff
    17d4:	00 c9 00 10 	srui r9,r6,16
    17d8:	20 cb ff ff 	andi r11,r6,0xffff
    17dc:	89 63 50 00 	mul r10,r11,r3
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    17e0:	88 a9 20 00 	mul r4,r5,r9
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    17e4:	89 23 18 00 	mul r3,r9,r3
    bits32 rem0, rem1, term0, term1;
    bits32 z;

    if ( b <= a0 ) return 0xFFFFFFFF;
    b0 = b>>16;
    z = ( b0<<16 <= a0 ) ? 0xFFFF0000 : ( a0 / b0 )<<16;
    17e8:	89 65 28 00 	mul r5,r11,r5
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    17ec:	b4 8a 20 00 	add r4,r4,r10
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    17f0:	f5 44 50 00 	cmpgu r10,r10,r4
    17f4:	3d 4a 00 10 	sli r10,r10,16
    17f8:	e3 ff ff d2 	bi 1740 <estimateDiv64To32.clone.0+0x38>

000017fc <float_raise>:
    17fc:	78 02 00 00 	mvhi r2,0x0
    1800:	38 42 31 0c 	ori r2,r2,0x310c
    1804:	28 43 00 00 	lw r3,(r2+0)
    1808:	b8 23 08 00 	or r1,r1,r3
    180c:	58 41 00 00 	sw (r2+0),r1

}
    1810:	c3 a0 00 00 	ret

00001814 <float32_is_nan>:
-------------------------------------------------------------------------------
*/
flag float32_is_nan( float32 a )
{

    return ( 0xFF000000 < (bits32) ( a<<1 ) );
    1814:	3c 21 00 01 	sli r1,r1,1
    1818:	78 02 ff 00 	mvhi r2,0xff00

}
    181c:	f4 22 08 00 	cmpgu r1,r1,r2
    1820:	c3 a0 00 00 	ret

00001824 <float32_is_signaling_nan>:
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    1824:	00 24 00 16 	srui r4,r1,22
    1828:	34 03 01 fe 	mvi r3,510
    182c:	20 84 01 ff 	andi r4,r4,0x1ff
Returns 1 if the single-precision floating-point value `a' is a signaling
NaN; otherwise returns 0.
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{
    1830:	b8 20 10 00 	mv r2,r1

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    1834:	34 01 00 00 	mvi r1,0
    1838:	44 83 00 02 	be r4,r3,1840 <float32_is_signaling_nan+0x1c>

}
    183c:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    1840:	78 03 00 00 	mvhi r3,0x0
    1844:	38 63 2c 70 	ori r3,r3,0x2c70
    1848:	28 61 00 00 	lw r1,(r3+0)
    184c:	a0 41 08 00 	and r1,r2,r1
    1850:	7c 21 00 00 	cmpnei r1,r1,0

}
    1854:	c3 a0 00 00 	ret

00001858 <int32_to_float32>:
the single-precision floating-point format.  The conversion is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 int32_to_float32( int32 a )
{
    1858:	37 9c ff fc 	addi sp,sp,-4
    185c:	5b 9d 00 04 	sw (sp+4),ra
    1860:	b8 20 18 00 	mv r3,r1
    flag zSign;

    if ( a == 0 ) return 0;
    1864:	34 01 00 00 	mvi r1,0
    1868:	44 60 00 08 	be r3,r0,1888 <int32_to_float32+0x30>
    if ( a == 0x80000000 ) return packFloat32( 1, 0x9E, 0 );
    186c:	78 02 80 00 	mvhi r2,0x8000
    1870:	78 01 cf 00 	mvhi r1,0xcf00
    1874:	44 62 00 05 	be r3,r2,1888 <int32_to_float32+0x30>
    zSign = ( a < 0 );
    1878:	00 61 00 1f 	srui r1,r3,31
    return normalizeRoundAndPackFloat32( zSign, 0x9C, zSign ? - a : a );
    187c:	5c 20 00 06 	bne r1,r0,1894 <int32_to_float32+0x3c>
    1880:	34 02 00 9c 	mvi r2,156
    1884:	fb ff fe bf 	calli 1380 <normalizeRoundAndPackFloat32>

}
    1888:	2b 9d 00 04 	lw ra,(sp+4)
    188c:	37 9c 00 04 	addi sp,sp,4
    1890:	c3 a0 00 00 	ret
    flag zSign;

    if ( a == 0 ) return 0;
    if ( a == 0x80000000 ) return packFloat32( 1, 0x9E, 0 );
    zSign = ( a < 0 );
    return normalizeRoundAndPackFloat32( zSign, 0x9C, zSign ? - a : a );
    1894:	c8 03 18 00 	sub r3,r0,r3
    1898:	e3 ff ff fa 	bi 1880 <int32_to_float32+0x28>

0000189c <float32_to_int32>:
positive integer is returned.  Otherwise, if the conversion overflows, the
largest integer with the same sign as `a' is returned.
-------------------------------------------------------------------------------
*/
int32 float32_to_int32( float32 a )
{
    189c:	b8 20 10 00 	mv r2,r1
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    18a0:	00 23 00 17 	srui r3,r1,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    18a4:	78 01 00 00 	mvhi r1,0x0
    18a8:	38 21 2c 78 	ori r1,r1,0x2c78
    18ac:	28 26 00 00 	lw r6,(r1+0)
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    18b0:	20 63 00 ff 	andi r3,r3,0xff
    int8 roundingMode;

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    shiftCount = aExp - 0x96;
    18b4:	34 64 ff 6a 	addi r4,r3,-150
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    18b8:	a0 46 30 00 	and r6,r2,r6
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    18bc:	00 45 00 1f 	srui r5,r2,31

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    shiftCount = aExp - 0x96;
    if ( 0 <= shiftCount ) {
    18c0:	48 04 00 20 	bg r0,r4,1940 <float32_to_int32+0xa4>
        if ( 0x9E <= aExp ) {
    18c4:	34 01 00 9d 	mvi r1,157
    18c8:	4c 23 00 14 	bge r1,r3,1918 <float32_to_int32+0x7c>
            if ( a == 0xCF000000 ) return 0x80000000;
    18cc:	78 04 cf 00 	mvhi r4,0xcf00
    18d0:	78 01 80 00 	mvhi r1,0x8000
    18d4:	44 44 00 1a 	be r2,r4,193c <float32_to_int32+0xa0>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    18d8:	78 02 00 00 	mvhi r2,0x0
    18dc:	38 42 31 0c 	ori r2,r2,0x310c
    18e0:	28 44 00 00 	lw r4,(r2+0)
            float_raise( float_flag_invalid );
            if ( ! aSign || ( ( aExp == 0xFF ) && aSig ) ) return 0x7FFFFFFF;
    18e4:	78 07 00 00 	mvhi r7,0x0
    18e8:	38 e7 2c 7c 	ori r7,r7,0x2c7c
    18ec:	38 84 00 10 	ori r4,r4,0x10
    18f0:	58 44 00 00 	sw (r2+0),r4
    18f4:	28 e1 00 00 	lw r1,(r7+0)
    18f8:	44 a0 00 11 	be r5,r0,193c <float32_to_int32+0xa0>
    18fc:	64 61 00 ff 	cmpei r1,r3,255
    1900:	7c c6 00 00 	cmpnei r6,r6,0
    1904:	28 e2 00 00 	lw r2,(r7+0)
    1908:	a0 26 08 00 	and r1,r1,r6
    190c:	64 21 00 00 	cmpei r1,r1,0
    1910:	b4 22 08 00 	add r1,r1,r2
    1914:	c3 a0 00 00 	ret
            return 0x80000000;
        }
        z = ( aSig | 0x00800000 )<<shiftCount;
    1918:	78 01 00 80 	mvhi r1,0x80
    191c:	b8 c1 08 00 	or r1,r6,r1
    1920:	bc 24 08 00 	sl r1,r1,r4
        if ( aSign ) z = - z;
    1924:	44 a0 00 06 	be r5,r0,193c <float32_to_int32+0xa0>
        }
        else {
            zExtra = ( zExtra != 0 );
            if ( aSign ) {
                z += ( roundingMode == float_round_down ) & zExtra;
                z = - z;
    1928:	c8 01 08 00 	sub r1,r0,r1
    192c:	c3 a0 00 00 	ret
            }
            else {
                z += ( roundingMode == float_round_up ) & zExtra;
    1930:	64 42 00 02 	cmpei r2,r2,2
    1934:	a0 62 18 00 	and r3,r3,r2
    1938:	b4 61 08 00 	add r1,r3,r1
            }
        }
    }
    return z;

}
    193c:	c3 a0 00 00 	ret
        }
        z = ( aSig | 0x00800000 )<<shiftCount;
        if ( aSign ) z = - z;
    }
    else {
        if ( aExp < 0x7E ) {
    1940:	34 01 00 7d 	mvi r1,125
    1944:	48 61 00 15 	bg r3,r1,1998 <float32_to_int32+0xfc>
            zExtra = aExp | aSig;
    1948:	b8 66 18 00 	or r3,r3,r6
            z = 0;
    194c:	34 01 00 00 	mvi r1,0
        else {
            aSig |= 0x00800000;
            zExtra = aSig<<( shiftCount & 31 );
            z = aSig>>( - shiftCount );
        }
        if ( zExtra ) float_exception_flags |= float_flag_inexact;
    1950:	44 60 00 06 	be r3,r0,1968 <float32_to_int32+0xcc>
    1954:	78 02 00 00 	mvhi r2,0x0
    1958:	38 42 31 0c 	ori r2,r2,0x310c
    195c:	28 44 00 00 	lw r4,(r2+0)
    1960:	38 84 00 01 	ori r4,r4,0x1
    1964:	58 44 00 00 	sw (r2+0),r4
        roundingMode = float_rounding_mode;
    1968:	78 02 00 00 	mvhi r2,0x0
    196c:	38 42 31 08 	ori r2,r2,0x3108
    1970:	28 42 00 00 	lw r2,(r2+0)
        if ( roundingMode == float_round_nearest_even ) {
    1974:	5c 40 00 0f 	bne r2,r0,19b0 <float32_to_int32+0x114>
            if ( (sbits32) zExtra < 0 ) {
    1978:	4c 62 00 06 	bge r3,r2,1990 <float32_to_int32+0xf4>
                ++z;
                if ( (bits32) ( zExtra<<1 ) == 0 ) z &= ~1;
    197c:	3c 63 00 01 	sli r3,r3,1
        }
        if ( zExtra ) float_exception_flags |= float_flag_inexact;
        roundingMode = float_rounding_mode;
        if ( roundingMode == float_round_nearest_even ) {
            if ( (sbits32) zExtra < 0 ) {
                ++z;
    1980:	34 21 00 01 	addi r1,r1,1
                if ( (bits32) ( zExtra<<1 ) == 0 ) z &= ~1;
    1984:	5c 60 00 03 	bne r3,r0,1990 <float32_to_int32+0xf4>
    1988:	34 02 ff fe 	mvi r2,-2
    198c:	a0 22 08 00 	and r1,r1,r2
            }
            if ( aSign ) z = - z;
    1990:	44 a0 ff eb 	be r5,r0,193c <float32_to_int32+0xa0>
    1994:	e3 ff ff e5 	bi 1928 <float32_to_int32+0x8c>
        if ( aExp < 0x7E ) {
            zExtra = aExp | aSig;
            z = 0;
        }
        else {
            aSig |= 0x00800000;
    1998:	78 01 00 80 	mvhi r1,0x80
    199c:	b8 c1 30 00 	or r6,r6,r1
            zExtra = aSig<<( shiftCount & 31 );
            z = aSig>>( - shiftCount );
    19a0:	c8 04 08 00 	sub r1,r0,r4
            zExtra = aExp | aSig;
            z = 0;
        }
        else {
            aSig |= 0x00800000;
            zExtra = aSig<<( shiftCount & 31 );
    19a4:	bc c4 18 00 	sl r3,r6,r4
            z = aSig>>( - shiftCount );
    19a8:	80 c1 08 00 	sru r1,r6,r1
    19ac:	e3 ff ff e9 	bi 1950 <float32_to_int32+0xb4>
                if ( (bits32) ( zExtra<<1 ) == 0 ) z &= ~1;
            }
            if ( aSign ) z = - z;
        }
        else {
            zExtra = ( zExtra != 0 );
    19b0:	7c 63 00 00 	cmpnei r3,r3,0
            if ( aSign ) {
    19b4:	44 a0 ff df 	be r5,r0,1930 <float32_to_int32+0x94>
                z += ( roundingMode == float_round_down ) & zExtra;
    19b8:	64 42 00 03 	cmpei r2,r2,3
    19bc:	a0 62 18 00 	and r3,r3,r2
    19c0:	b4 61 08 00 	add r1,r3,r1
    19c4:	e3 ff ff d9 	bi 1928 <float32_to_int32+0x8c>

000019c8 <float32_to_int32_round_to_zero>:
conversion overflows, the largest integer with the same sign as `a' is
returned.
-------------------------------------------------------------------------------
*/
int32 float32_to_int32_round_to_zero( float32 a )
{
    19c8:	b8 20 10 00 	mv r2,r1
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    19cc:	00 23 00 17 	srui r3,r1,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    19d0:	78 01 00 00 	mvhi r1,0x0
    19d4:	38 21 2c 78 	ori r1,r1,0x2c78
    19d8:	28 25 00 00 	lw r5,(r1+0)
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    19dc:	20 63 00 ff 	andi r3,r3,0xff
    int32 z;

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    shiftCount = aExp - 0x9E;
    19e0:	34 64 ff 62 	addi r4,r3,-158
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    19e4:	a0 45 28 00 	and r5,r2,r5
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    19e8:	00 46 00 1f 	srui r6,r2,31

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    shiftCount = aExp - 0x9E;
    if ( 0 <= shiftCount ) {
    19ec:	48 04 00 14 	bg r0,r4,1a3c <float32_to_int32_round_to_zero+0x74>
        if ( a == 0xCF000000 ) return 0x80000000;
    19f0:	78 04 cf 00 	mvhi r4,0xcf00
    19f4:	78 01 80 00 	mvhi r1,0x8000
    19f8:	44 44 00 2a 	be r2,r4,1aa0 <float32_to_int32_round_to_zero+0xd8>
    19fc:	78 02 00 00 	mvhi r2,0x0
    1a00:	38 42 31 0c 	ori r2,r2,0x310c
    1a04:	28 44 00 00 	lw r4,(r2+0)
        float_raise( float_flag_invalid );
        if ( ! aSign || ( ( aExp == 0xFF ) && aSig ) ) return 0x7FFFFFFF;
    1a08:	78 07 00 00 	mvhi r7,0x0
    1a0c:	38 e7 2c 7c 	ori r7,r7,0x2c7c
    1a10:	38 84 00 10 	ori r4,r4,0x10
    1a14:	58 44 00 00 	sw (r2+0),r4
    1a18:	28 e1 00 00 	lw r1,(r7+0)
    1a1c:	44 c0 00 21 	be r6,r0,1aa0 <float32_to_int32_round_to_zero+0xd8>
    1a20:	64 61 00 ff 	cmpei r1,r3,255
    1a24:	7c a5 00 00 	cmpnei r5,r5,0
    1a28:	28 e2 00 00 	lw r2,(r7+0)
    1a2c:	a0 25 08 00 	and r1,r1,r5
    1a30:	64 21 00 00 	cmpei r1,r1,0
    1a34:	b4 22 08 00 	add r1,r1,r2
    1a38:	c3 a0 00 00 	ret
        return 0x80000000;
    }
    else if ( aExp <= 0x7E ) {
    1a3c:	34 01 00 7e 	mvi r1,126
    1a40:	48 61 00 0a 	bg r3,r1,1a68 <float32_to_int32_round_to_zero+0xa0>
        if ( aExp | aSig ) float_exception_flags |= float_flag_inexact;
    1a44:	b8 65 18 00 	or r3,r3,r5
        return 0;
    1a48:	34 01 00 00 	mvi r1,0
        float_raise( float_flag_invalid );
        if ( ! aSign || ( ( aExp == 0xFF ) && aSig ) ) return 0x7FFFFFFF;
        return 0x80000000;
    }
    else if ( aExp <= 0x7E ) {
        if ( aExp | aSig ) float_exception_flags |= float_flag_inexact;
    1a4c:	44 60 00 15 	be r3,r0,1aa0 <float32_to_int32_round_to_zero+0xd8>
    1a50:	78 02 00 00 	mvhi r2,0x0
    1a54:	38 42 31 0c 	ori r2,r2,0x310c
    1a58:	28 43 00 00 	lw r3,(r2+0)
    1a5c:	38 63 00 01 	ori r3,r3,0x1
    1a60:	58 43 00 00 	sw (r2+0),r3
    1a64:	c3 a0 00 00 	ret
        return 0;
    }
    aSig = ( aSig | 0x00800000 )<<8;
    1a68:	78 01 00 80 	mvhi r1,0x80
    1a6c:	b8 a1 28 00 	or r5,r5,r1
    1a70:	3c a5 00 08 	sli r5,r5,8
    z = aSig>>( - shiftCount );
    1a74:	c8 04 08 00 	sub r1,r0,r4
    if ( (bits32) ( aSig<<( shiftCount & 31 ) ) ) {
    1a78:	bc a4 20 00 	sl r4,r5,r4
    else if ( aExp <= 0x7E ) {
        if ( aExp | aSig ) float_exception_flags |= float_flag_inexact;
        return 0;
    }
    aSig = ( aSig | 0x00800000 )<<8;
    z = aSig>>( - shiftCount );
    1a7c:	80 a1 08 00 	sru r1,r5,r1
    if ( (bits32) ( aSig<<( shiftCount & 31 ) ) ) {
    1a80:	44 80 00 06 	be r4,r0,1a98 <float32_to_int32_round_to_zero+0xd0>
        float_exception_flags |= float_flag_inexact;
    1a84:	78 02 00 00 	mvhi r2,0x0
    1a88:	38 42 31 0c 	ori r2,r2,0x310c
    1a8c:	28 43 00 00 	lw r3,(r2+0)
    1a90:	38 63 00 01 	ori r3,r3,0x1
    1a94:	58 43 00 00 	sw (r2+0),r3
    }
    return aSign ? - z : z;
    1a98:	44 c0 00 02 	be r6,r0,1aa0 <float32_to_int32_round_to_zero+0xd8>
    1a9c:	c8 01 08 00 	sub r1,r0,r1

}
    1aa0:	c3 a0 00 00 	ret

00001aa4 <float32_round_to_int>:
operation is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_round_to_int( float32 a )
{
    1aa4:	37 9c ff fc 	addi sp,sp,-4
    1aa8:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1aac:	00 23 00 17 	srui r3,r1,23
    bits32 lastBitMask, roundBitsMask;
    int8 roundingMode;
    float32 z;

    aExp = extractFloat32Exp( a );
    if ( 0x96 <= aExp ) {
    1ab0:	34 04 00 95 	mvi r4,149
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1ab4:	20 63 00 ff 	andi r3,r3,0xff
operation is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_round_to_int( float32 a )
{
    1ab8:	b8 20 10 00 	mv r2,r1
    bits32 lastBitMask, roundBitsMask;
    int8 roundingMode;
    float32 z;

    aExp = extractFloat32Exp( a );
    if ( 0x96 <= aExp ) {
    1abc:	4c 83 00 07 	bge r4,r3,1ad8 <float32_round_to_int+0x34>
        if ( ( aExp == 0xFF ) && extractFloat32Frac( a ) ) {
    1ac0:	34 04 00 ff 	mvi r4,255
    1ac4:	44 64 00 35 	be r3,r4,1b98 <float32_round_to_int+0xf4>
    }
    z &= ~ roundBitsMask;
    if ( z != a ) float_exception_flags |= float_flag_inexact;
    return z;

}
    1ac8:	b8 40 08 00 	mv r1,r2
    1acc:	2b 9d 00 04 	lw ra,(sp+4)
    1ad0:	37 9c 00 04 	addi sp,sp,4
    1ad4:	c3 a0 00 00 	ret
        if ( ( aExp == 0xFF ) && extractFloat32Frac( a ) ) {
            return propagateFloat32NaN( a, a );
        }
        return a;
    }
    if ( aExp <= 0x7E ) {
    1ad8:	34 04 00 7e 	mvi r4,126
    1adc:	48 64 00 13 	bg r3,r4,1b28 <float32_round_to_int+0x84>
        if ( (bits32) ( a<<1 ) == 0 ) return a;
    1ae0:	3c 21 00 01 	sli r1,r1,1
    1ae4:	44 20 ff f9 	be r1,r0,1ac8 <float32_round_to_int+0x24>
        float_exception_flags |= float_flag_inexact;
    1ae8:	78 01 00 00 	mvhi r1,0x0
    1aec:	38 21 31 0c 	ori r1,r1,0x310c
    1af0:	28 26 00 00 	lw r6,(r1+0)
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
    1af4:	78 05 00 00 	mvhi r5,0x0
    1af8:	38 a5 31 08 	ori r5,r5,0x3108
    1afc:	28 a5 00 00 	lw r5,(r5+0)
        }
        return a;
    }
    if ( aExp <= 0x7E ) {
        if ( (bits32) ( a<<1 ) == 0 ) return a;
        float_exception_flags |= float_flag_inexact;
    1b00:	38 c6 00 01 	ori r6,r6,0x1
    1b04:	58 26 00 00 	sw (r1+0),r6
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
    1b08:	34 06 00 02 	mvi r6,2
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    1b0c:	00 41 00 1f 	srui r1,r2,31
    }
    if ( aExp <= 0x7E ) {
        if ( (bits32) ( a<<1 ) == 0 ) return a;
        float_exception_flags |= float_flag_inexact;
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
    1b10:	44 a6 00 41 	be r5,r6,1c14 <float32_round_to_int+0x170>
    1b14:	34 06 00 03 	mvi r6,3
    1b18:	44 a6 00 39 	be r5,r6,1bfc <float32_round_to_int+0x158>
    1b1c:	44 a0 00 2e 	be r5,r0,1bd4 <float32_round_to_int+0x130>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1b20:	3c 22 00 1f 	sli r2,r1,31
         case float_round_down:
            return aSign ? 0xBF800000 : 0;
         case float_round_up:
            return aSign ? 0x80000000 : 0x3F800000;
        }
        return packFloat32( aSign, 0, 0 );
    1b24:	e3 ff ff e9 	bi 1ac8 <float32_round_to_int+0x24>
    }
    lastBitMask = 1;
    lastBitMask <<= 0x96 - aExp;
    roundBitsMask = lastBitMask - 1;
    z = a;
    roundingMode = float_rounding_mode;
    1b28:	78 01 00 00 	mvhi r1,0x0
            return aSign ? 0x80000000 : 0x3F800000;
        }
        return packFloat32( aSign, 0, 0 );
    }
    lastBitMask = 1;
    lastBitMask <<= 0x96 - aExp;
    1b2c:	34 04 00 96 	mvi r4,150
    roundBitsMask = lastBitMask - 1;
    z = a;
    roundingMode = float_rounding_mode;
    1b30:	38 21 31 08 	ori r1,r1,0x3108
            return aSign ? 0x80000000 : 0x3F800000;
        }
        return packFloat32( aSign, 0, 0 );
    }
    lastBitMask = 1;
    lastBitMask <<= 0x96 - aExp;
    1b34:	c8 83 18 00 	sub r3,r4,r3
    1b38:	34 06 00 01 	mvi r6,1
    roundBitsMask = lastBitMask - 1;
    z = a;
    roundingMode = float_rounding_mode;
    1b3c:	28 24 00 00 	lw r4,(r1+0)
            return aSign ? 0x80000000 : 0x3F800000;
        }
        return packFloat32( aSign, 0, 0 );
    }
    lastBitMask = 1;
    lastBitMask <<= 0x96 - aExp;
    1b40:	bc c3 18 00 	sl r3,r6,r3
    roundBitsMask = lastBitMask - 1;
    1b44:	34 65 ff ff 	addi r5,r3,-1
    z = a;
    roundingMode = float_rounding_mode;
    if ( roundingMode == float_round_nearest_even ) {
    1b48:	44 80 00 1c 	be r4,r0,1bb8 <float32_round_to_int+0x114>
        z += lastBitMask>>1;
        if ( ( z & roundBitsMask ) == 0 ) z &= ~ lastBitMask;
    }
    else if ( roundingMode != float_round_to_zero ) {
    1b4c:	b8 40 08 00 	mv r1,r2
    1b50:	44 86 00 05 	be r4,r6,1b64 <float32_round_to_int+0xc0>
        if ( extractFloat32Sign( z ) ^ ( roundingMode == float_round_up ) ) {
    1b54:	64 84 00 02 	cmpei r4,r4,2
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    1b58:	00 43 00 1f 	srui r3,r2,31
    if ( roundingMode == float_round_nearest_even ) {
        z += lastBitMask>>1;
        if ( ( z & roundBitsMask ) == 0 ) z &= ~ lastBitMask;
    }
    else if ( roundingMode != float_round_to_zero ) {
        if ( extractFloat32Sign( z ) ^ ( roundingMode == float_round_up ) ) {
    1b5c:	44 83 00 02 	be r4,r3,1b64 <float32_round_to_int+0xc0>
            z += roundBitsMask;
    1b60:	b4 a2 08 00 	add r1,r5,r2
        }
    }
    z &= ~ roundBitsMask;
    1b64:	a4 a0 28 00 	not r5,r5
    1b68:	a0 25 08 00 	and r1,r1,r5
    if ( z != a ) float_exception_flags |= float_flag_inexact;
    1b6c:	44 22 ff d7 	be r1,r2,1ac8 <float32_round_to_int+0x24>
    1b70:	78 03 00 00 	mvhi r3,0x0
    1b74:	38 63 31 0c 	ori r3,r3,0x310c
    1b78:	28 64 00 00 	lw r4,(r3+0)
    1b7c:	b8 20 10 00 	mv r2,r1
    1b80:	38 81 00 01 	ori r1,r4,0x1
    1b84:	58 61 00 00 	sw (r3+0),r1
    return z;

}
    1b88:	b8 40 08 00 	mv r1,r2
    1b8c:	2b 9d 00 04 	lw ra,(sp+4)
    1b90:	37 9c 00 04 	addi sp,sp,4
    1b94:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1b98:	78 04 00 00 	mvhi r4,0x0
    1b9c:	38 84 2c 78 	ori r4,r4,0x2c78
    1ba0:	28 83 00 00 	lw r3,(r4+0)
    1ba4:	a0 23 18 00 	and r3,r1,r3
    int8 roundingMode;
    float32 z;

    aExp = extractFloat32Exp( a );
    if ( 0x96 <= aExp ) {
        if ( ( aExp == 0xFF ) && extractFloat32Frac( a ) ) {
    1ba8:	44 60 ff c8 	be r3,r0,1ac8 <float32_round_to_int+0x24>
            return propagateFloat32NaN( a, a );
    1bac:	fb ff fd 4b 	calli 10d8 <propagateFloat32NaN>
    1bb0:	b8 20 10 00 	mv r2,r1
    1bb4:	e3 ff ff c5 	bi 1ac8 <float32_round_to_int+0x24>
    lastBitMask <<= 0x96 - aExp;
    roundBitsMask = lastBitMask - 1;
    z = a;
    roundingMode = float_rounding_mode;
    if ( roundingMode == float_round_nearest_even ) {
        z += lastBitMask>>1;
    1bb8:	00 61 00 01 	srui r1,r3,1
    1bbc:	b4 22 08 00 	add r1,r1,r2
        if ( ( z & roundBitsMask ) == 0 ) z &= ~ lastBitMask;
    1bc0:	a0 25 30 00 	and r6,r1,r5
    1bc4:	5c c4 ff e8 	bne r6,r4,1b64 <float32_round_to_int+0xc0>
    1bc8:	a4 60 18 00 	not r3,r3
    1bcc:	a0 23 08 00 	and r1,r1,r3
    1bd0:	e3 ff ff e5 	bi 1b64 <float32_round_to_int+0xc0>
        if ( (bits32) ( a<<1 ) == 0 ) return a;
        float_exception_flags |= float_flag_inexact;
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
         case float_round_nearest_even:
            if ( ( aExp == 0x7E ) && extractFloat32Frac( a ) ) {
    1bd4:	5c 64 ff d3 	bne r3,r4,1b20 <float32_round_to_int+0x7c>
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1bd8:	78 04 00 00 	mvhi r4,0x0
    1bdc:	38 84 2c 78 	ori r4,r4,0x2c78
    1be0:	28 83 00 00 	lw r3,(r4+0)
    1be4:	a0 43 10 00 	and r2,r2,r3
        if ( (bits32) ( a<<1 ) == 0 ) return a;
        float_exception_flags |= float_flag_inexact;
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
         case float_round_nearest_even:
            if ( ( aExp == 0x7E ) && extractFloat32Frac( a ) ) {
    1be8:	44 40 ff ce 	be r2,r0,1b20 <float32_round_to_int+0x7c>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1bec:	3c 21 00 1f 	sli r1,r1,31
    1bf0:	78 02 3f 80 	mvhi r2,0x3f80
    1bf4:	b4 22 10 00 	add r2,r1,r2
        float_exception_flags |= float_flag_inexact;
        aSign = extractFloat32Sign( a );
        switch ( float_rounding_mode ) {
         case float_round_nearest_even:
            if ( ( aExp == 0x7E ) && extractFloat32Frac( a ) ) {
                return packFloat32( aSign, 0x7F, 0 );
    1bf8:	e3 ff ff b4 	bi 1ac8 <float32_round_to_int+0x24>
            }
            break;
         case float_round_down:
            return aSign ? 0xBF800000 : 0;
    1bfc:	64 22 00 00 	cmpei r2,r1,0
    1c00:	78 03 40 80 	mvhi r3,0x4080
    1c04:	c8 02 10 00 	sub r2,r0,r2
    1c08:	a0 43 10 00 	and r2,r2,r3
    1c0c:	c8 43 10 00 	sub r2,r2,r3
    1c10:	e3 ff ff ae 	bi 1ac8 <float32_round_to_int+0x24>
         case float_round_up:
            return aSign ? 0x80000000 : 0x3F800000;
    1c14:	64 21 00 00 	cmpei r1,r1,0
    1c18:	78 02 bf 80 	mvhi r2,0xbf80
    1c1c:	c8 01 08 00 	sub r1,r0,r1
    1c20:	a0 22 10 00 	and r2,r1,r2
    1c24:	78 01 80 00 	mvhi r1,0x8000
    1c28:	b4 41 10 00 	add r2,r2,r1
    1c2c:	e3 ff ff a7 	bi 1ac8 <float32_round_to_int+0x24>

00001c30 <float32_add>:
and `b'.  The operation is performed according to the IEC/IEEE Standard for
Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_add( float32 a, float32 b )
{
    1c30:	37 9c ff fc 	addi sp,sp,-4
    1c34:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    1c38:	00 23 00 1f 	srui r3,r1,31
    1c3c:	00 44 00 1f 	srui r4,r2,31
{
    flag aSign, bSign;

    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign == bSign ) {
    1c40:	44 64 00 05 	be r3,r4,1c54 <float32_add+0x24>
        return addFloat32Sigs( a, b, aSign );
    }
    else {
        return subFloat32Sigs( a, b, aSign );
    1c44:	fb ff fe 4c 	calli 1574 <subFloat32Sigs>
    }

}
    1c48:	2b 9d 00 04 	lw ra,(sp+4)
    1c4c:	37 9c 00 04 	addi sp,sp,4
    1c50:	c3 a0 00 00 	ret
    flag aSign, bSign;

    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign == bSign ) {
        return addFloat32Sigs( a, b, aSign );
    1c54:	fb ff fd e7 	calli 13f0 <addFloat32Sigs>
    }
    else {
        return subFloat32Sigs( a, b, aSign );
    }

}
    1c58:	2b 9d 00 04 	lw ra,(sp+4)
    1c5c:	37 9c 00 04 	addi sp,sp,4
    1c60:	c3 a0 00 00 	ret

00001c64 <float32_sub>:
`a' and `b'.  The operation is performed according to the IEC/IEEE Standard
for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_sub( float32 a, float32 b )
{
    1c64:	37 9c ff fc 	addi sp,sp,-4
    1c68:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    1c6c:	00 23 00 1f 	srui r3,r1,31
    1c70:	00 44 00 1f 	srui r4,r2,31
{
    flag aSign, bSign;

    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign == bSign ) {
    1c74:	44 64 00 05 	be r3,r4,1c88 <float32_sub+0x24>
        return subFloat32Sigs( a, b, aSign );
    }
    else {
        return addFloat32Sigs( a, b, aSign );
    1c78:	fb ff fd de 	calli 13f0 <addFloat32Sigs>
    }

}
    1c7c:	2b 9d 00 04 	lw ra,(sp+4)
    1c80:	37 9c 00 04 	addi sp,sp,4
    1c84:	c3 a0 00 00 	ret
    flag aSign, bSign;

    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign == bSign ) {
        return subFloat32Sigs( a, b, aSign );
    1c88:	fb ff fe 3b 	calli 1574 <subFloat32Sigs>
    }
    else {
        return addFloat32Sigs( a, b, aSign );
    }

}
    1c8c:	2b 9d 00 04 	lw ra,(sp+4)
    1c90:	37 9c 00 04 	addi sp,sp,4
    1c94:	c3 a0 00 00 	ret

00001c98 <float32_mul>:
`a' and `b'.  The operation is performed according to the IEC/IEEE Standard
for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_mul( float32 a, float32 b )
{
    1c98:	37 9c ff e8 	addi sp,sp,-24
    1c9c:	5b 8b 00 08 	sw (sp+8),r11
    1ca0:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1ca4:	78 04 00 00 	mvhi r4,0x0
    1ca8:	38 84 2c 78 	ori r4,r4,0x2c78
    1cac:	28 86 00 00 	lw r6,(r4+0)
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1cb0:	00 27 00 17 	srui r7,r1,23
    1cb4:	00 44 00 17 	srui r4,r2,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1cb8:	a0 26 40 00 	and r8,r1,r6
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1cbc:	20 e7 00 ff 	andi r7,r7,0xff
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1cc0:	a0 46 30 00 	and r6,r2,r6
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1cc4:	20 84 00 ff 	andi r4,r4,0xff
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    1cc8:	98 22 58 00 	xor r11,r1,r2
{
    flag aSign, bSign, zSign;
    int16 aExp, bExp, zExp;
    bits32 aSig, bSig, zSig0, zSig1;

    aSig = extractFloat32Frac( a );
    1ccc:	5b 88 00 10 	sw (sp+16),r8
    aExp = extractFloat32Exp( a );
    1cd0:	5b 87 00 18 	sw (sp+24),r7
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    1cd4:	5b 86 00 0c 	sw (sp+12),r6
    bExp = extractFloat32Exp( b );
    1cd8:	5b 84 00 14 	sw (sp+20),r4
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
    1cdc:	34 09 00 ff 	mvi r9,255
`a' and `b'.  The operation is performed according to the IEC/IEEE Standard
for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_mul( float32 a, float32 b )
{
    1ce0:	b8 20 28 00 	mv r5,r1
    1ce4:	b8 40 18 00 	mv r3,r2
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    1ce8:	01 6b 00 1f 	srui r11,r11,31
    if ( aExp == 0xFF ) {
    1cec:	44 e9 00 3f 	be r7,r9,1de8 <float32_mul+0x150>
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
    1cf0:	44 89 00 49 	be r4,r9,1e14 <float32_mul+0x17c>
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( aExp == 0 ) {
    1cf4:	5c e0 00 0d 	bne r7,r0,1d28 <float32_mul+0x90>
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
    1cf8:	5d 07 00 06 	bne r8,r7,1d10 <float32_mul+0x78>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1cfc:	3d 61 00 1f 	sli r1,r11,31
        zSig0 <<= 1;
        --zExp;
    }
    return roundAndPackFloat32( zSign, zExp, zSig0 );

}
    1d00:	2b 9d 00 04 	lw ra,(sp+4)
    1d04:	2b 8b 00 08 	lw r11,(sp+8)
    1d08:	37 9c 00 18 	addi sp,sp,24
    1d0c:	c3 a0 00 00 	ret
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    1d10:	b9 00 08 00 	mv r1,r8
    1d14:	37 82 00 18 	addi r2,sp,24
    1d18:	37 83 00 10 	addi r3,sp,16
    1d1c:	fb ff fd 1a 	calli 1184 <normalizeFloat32Subnormal>
    1d20:	2b 84 00 14 	lw r4,(sp+20)
    1d24:	2b 86 00 0c 	lw r6,(sp+12)
    }
    if ( bExp == 0 ) {
    1d28:	5c 80 00 08 	bne r4,r0,1d48 <float32_mul+0xb0>
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
    1d2c:	44 c4 ff f4 	be r6,r4,1cfc <float32_mul+0x64>
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    1d30:	b8 c0 08 00 	mv r1,r6
    1d34:	37 82 00 14 	addi r2,sp,20
    1d38:	37 83 00 0c 	addi r3,sp,12
    1d3c:	fb ff fd 12 	calli 1184 <normalizeFloat32Subnormal>
    1d40:	2b 84 00 14 	lw r4,(sp+20)
    1d44:	2b 86 00 0c 	lw r6,(sp+12)
    }
    zExp = aExp + bExp - 0x7F;
    aSig = ( aSig | 0x00800000 )<<7;
    1d48:	2b 82 00 10 	lw r2,(sp+16)
    1d4c:	78 01 00 80 	mvhi r1,0x80
    bSig = ( bSig | 0x00800000 )<<8;
    1d50:	b8 c1 30 00 	or r6,r6,r1
    if ( bExp == 0 ) {
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    zExp = aExp + bExp - 0x7F;
    aSig = ( aSig | 0x00800000 )<<7;
    1d54:	b8 41 08 00 	or r1,r2,r1
    1d58:	3c 21 00 07 	sli r1,r1,7
    bSig = ( bSig | 0x00800000 )<<8;
    1d5c:	3c c6 00 08 	sli r6,r6,8
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    1d60:	00 25 00 10 	srui r5,r1,16
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    1d64:	00 c8 00 10 	srui r8,r6,16

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    1d68:	20 c9 ff ff 	andi r9,r6,0xffff
    1d6c:	20 23 ff ff 	andi r3,r1,0xffff
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    1d70:	89 25 38 00 	mul r7,r9,r5
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    1d74:	89 03 10 00 	mul r2,r8,r3

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    1d78:	89 23 18 00 	mul r3,r9,r3
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    1d7c:	89 05 40 00 	mul r8,r8,r5
    zMiddleA += zMiddleB;
    1d80:	b4 47 10 00 	add r2,r2,r7
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    zMiddleA <<= 16;
    1d84:	3c 45 00 10 	sli r5,r2,16
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1d88:	f4 e2 38 00 	cmpgu r7,r7,r2
    zMiddleA <<= 16;
    z1 += zMiddleA;
    1d8c:	b4 a3 18 00 	add r3,r5,r3
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1d90:	00 42 00 10 	srui r2,r2,16
    zMiddleA <<= 16;
    z1 += zMiddleA;
    z0 += ( z1 < zMiddleA );
    1d94:	f4 a3 48 00 	cmpgu r9,r5,r3
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1d98:	3c e7 00 10 	sli r7,r7,16
    1d9c:	b4 48 28 00 	add r5,r2,r8
    mul32To64( aSig, bSig, &zSig0, &zSig1 );
    zSig0 |= ( zSig1 != 0 );
    1da0:	7c 63 00 00 	cmpnei r3,r3,0
    1da4:	b4 a9 28 00 	add r5,r5,r9
    zMiddleA <<= 16;
    z1 += zMiddleA;
    z0 += ( z1 < zMiddleA );
    1da8:	b4 a7 28 00 	add r5,r5,r7
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    zExp = aExp + bExp - 0x7F;
    1dac:	2b 82 00 18 	lw r2,(sp+24)
    aSig = ( aSig | 0x00800000 )<<7;
    bSig = ( bSig | 0x00800000 )<<8;
    mul32To64( aSig, bSig, &zSig0, &zSig1 );
    zSig0 |= ( zSig1 != 0 );
    1db0:	b8 a3 28 00 	or r5,r5,r3
    if ( 0 <= (sbits32) ( zSig0<<1 ) ) {
    1db4:	3c a3 00 01 	sli r3,r5,1
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    zExp = aExp + bExp - 0x7F;
    1db8:	34 42 ff 81 	addi r2,r2,-127
    aSig = ( aSig | 0x00800000 )<<7;
    1dbc:	5b 81 00 10 	sw (sp+16),r1
    bSig = ( bSig | 0x00800000 )<<8;
    1dc0:	5b 86 00 0c 	sw (sp+12),r6
    }
    if ( bExp == 0 ) {
        if ( bSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    zExp = aExp + bExp - 0x7F;
    1dc4:	b4 44 10 00 	add r2,r2,r4
    aSig = ( aSig | 0x00800000 )<<7;
    bSig = ( bSig | 0x00800000 )<<8;
    mul32To64( aSig, bSig, &zSig0, &zSig1 );
    zSig0 |= ( zSig1 != 0 );
    if ( 0 <= (sbits32) ( zSig0<<1 ) ) {
    1dc8:	48 03 00 27 	bg r0,r3,1e64 <float32_mul+0x1cc>
        zSig0 <<= 1;
        --zExp;
    1dcc:	34 42 ff ff 	addi r2,r2,-1
    }
    return roundAndPackFloat32( zSign, zExp, zSig0 );
    1dd0:	b9 60 08 00 	mv r1,r11
    1dd4:	fb ff fd 06 	calli 11ec <roundAndPackFloat32>

}
    1dd8:	2b 9d 00 04 	lw ra,(sp+4)
    1ddc:	2b 8b 00 08 	lw r11,(sp+8)
    1de0:	37 9c 00 18 	addi sp,sp,24
    1de4:	c3 a0 00 00 	ret
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
        if ( aSig || ( ( bExp == 0xFF ) && bSig ) ) {
    1de8:	5d 00 00 18 	bne r8,r0,1e48 <float32_mul+0x1b0>
    1dec:	64 82 00 ff 	cmpei r2,r4,255
    1df0:	7c c1 00 00 	cmpnei r1,r6,0
    1df4:	a0 41 08 00 	and r1,r2,r1
    1df8:	5c 28 00 14 	bne r1,r8,1e48 <float32_mul+0x1b0>
            return propagateFloat32NaN( a, b );
        }
        if ( ( bExp | bSig ) == 0 ) {
    1dfc:	b8 86 20 00 	or r4,r4,r6
    1e00:	44 81 00 08 	be r4,r1,1e20 <float32_mul+0x188>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1e04:	3d 61 00 1f 	sli r1,r11,31
    1e08:	78 02 7f 80 	mvhi r2,0x7f80
    1e0c:	b4 22 08 00 	add r1,r1,r2
        if ( bSig ) return propagateFloat32NaN( a, b );
        if ( ( aExp | aSig ) == 0 ) {
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    1e10:	e3 ff ff bc 	bi 1d00 <float32_mul+0x68>
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    1e14:	5c c0 00 16 	bne r6,r0,1e6c <float32_mul+0x1d4>
        if ( ( aExp | aSig ) == 0 ) {
    1e18:	b8 e8 38 00 	or r7,r7,r8
    1e1c:	5c e6 ff fa 	bne r7,r6,1e04 <float32_mul+0x16c>
    1e20:	78 02 00 00 	mvhi r2,0x0
    1e24:	38 42 31 0c 	ori r2,r2,0x310c
    1e28:	28 43 00 00 	lw r3,(r2+0)
            float_raise( float_flag_invalid );
            return float32_default_nan;
    1e2c:	34 01 ff ff 	mvi r1,-1
    1e30:	38 63 00 10 	ori r3,r3,0x10
    1e34:	58 43 00 00 	sw (r2+0),r3
        zSig0 <<= 1;
        --zExp;
    }
    return roundAndPackFloat32( zSign, zExp, zSig0 );

}
    1e38:	2b 9d 00 04 	lw ra,(sp+4)
    1e3c:	2b 8b 00 08 	lw r11,(sp+8)
    1e40:	37 9c 00 18 	addi sp,sp,24
    1e44:	c3 a0 00 00 	ret
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
        if ( aSig || ( ( bExp == 0xFF ) && bSig ) ) {
            return propagateFloat32NaN( a, b );
    1e48:	b8 a0 08 00 	mv r1,r5
    1e4c:	b8 60 10 00 	mv r2,r3
    1e50:	fb ff fc a2 	calli 10d8 <propagateFloat32NaN>
        zSig0 <<= 1;
        --zExp;
    }
    return roundAndPackFloat32( zSign, zExp, zSig0 );

}
    1e54:	2b 9d 00 04 	lw ra,(sp+4)
    1e58:	2b 8b 00 08 	lw r11,(sp+8)
    1e5c:	37 9c 00 18 	addi sp,sp,24
    1e60:	c3 a0 00 00 	ret
    }
    zExp = aExp + bExp - 0x7F;
    aSig = ( aSig | 0x00800000 )<<7;
    bSig = ( bSig | 0x00800000 )<<8;
    mul32To64( aSig, bSig, &zSig0, &zSig1 );
    zSig0 |= ( zSig1 != 0 );
    1e64:	b8 a0 18 00 	mv r3,r5
    1e68:	e3 ff ff da 	bi 1dd0 <float32_mul+0x138>
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    1e6c:	fb ff fc 9b 	calli 10d8 <propagateFloat32NaN>
    1e70:	e3 ff ff a4 	bi 1d00 <float32_mul+0x68>

00001e74 <float32_div>:
by the corresponding value `b'.  The operation is performed according to
the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_div( float32 a, float32 b )
{
    1e74:	37 9c ff dc 	addi sp,sp,-36
    1e78:	5b 8b 00 14 	sw (sp+20),r11
    1e7c:	5b 8c 00 10 	sw (sp+16),r12
    1e80:	5b 8d 00 0c 	sw (sp+12),r13
    1e84:	5b 8e 00 08 	sw (sp+8),r14
    1e88:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1e8c:	78 03 00 00 	mvhi r3,0x0
    1e90:	38 63 2c 78 	ori r3,r3,0x2c78
    1e94:	28 68 00 00 	lw r8,(r3+0)
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1e98:	00 47 00 17 	srui r7,r2,23
    1e9c:	00 23 00 17 	srui r3,r1,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1ea0:	a0 28 30 00 	and r6,r1,r8
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1ea4:	20 63 00 ff 	andi r3,r3,0xff
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    1ea8:	a0 48 40 00 	and r8,r2,r8
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    1eac:	20 e7 00 ff 	andi r7,r7,0xff
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    1eb0:	98 22 20 00 	xor r4,r1,r2
    int16 aExp, bExp, zExp;
    bits32 aSig, bSig, zSig;
    bits32 rem0, rem1;
    bits32 term0, term1;

    aSig = extractFloat32Frac( a );
    1eb4:	5b 86 00 1c 	sw (sp+28),r6
    aExp = extractFloat32Exp( a );
    1eb8:	5b 83 00 24 	sw (sp+36),r3
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    1ebc:	5b 88 00 18 	sw (sp+24),r8
    bExp = extractFloat32Exp( b );
    1ec0:	5b 87 00 20 	sw (sp+32),r7
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
    1ec4:	34 09 00 ff 	mvi r9,255
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    1ec8:	00 8c 00 1f 	srui r12,r4,31
    if ( aExp == 0xFF ) {
    1ecc:	44 69 00 6d 	be r3,r9,2080 <float32_div+0x20c>
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
    1ed0:	44 e9 00 79 	be r7,r9,20b4 <float32_div+0x240>
        if ( bSig ) return propagateFloat32NaN( a, b );
        return packFloat32( zSign, 0, 0 );
    }
    if ( bExp == 0 ) {
    1ed4:	5c e0 00 18 	bne r7,r0,1f34 <float32_div+0xc0>
        if ( bSig == 0 ) {
    1ed8:	5d 07 00 11 	bne r8,r7,1f1c <float32_div+0xa8>
            if ( ( aExp | aSig ) == 0 ) {
    1edc:	b8 66 18 00 	or r3,r3,r6
    1ee0:	5c 68 00 85 	bne r3,r8,20f4 <float32_div+0x280>
    1ee4:	78 01 00 00 	mvhi r1,0x0
    1ee8:	38 21 31 0c 	ori r1,r1,0x310c
    1eec:	28 22 00 00 	lw r2,(r1+0)
                float_raise( float_flag_invalid );
                return float32_default_nan;
    1ef0:	34 03 ff ff 	mvi r3,-1
    1ef4:	38 42 00 10 	ori r2,r2,0x10
    1ef8:	58 22 00 00 	sw (r1+0),r2
        }
        zSig |= ( rem1 != 0 );
    }
    return roundAndPackFloat32( zSign, zExp, zSig );

}
    1efc:	b8 60 08 00 	mv r1,r3
    1f00:	2b 9d 00 04 	lw ra,(sp+4)
    1f04:	2b 8b 00 14 	lw r11,(sp+20)
    1f08:	2b 8c 00 10 	lw r12,(sp+16)
    1f0c:	2b 8d 00 0c 	lw r13,(sp+12)
    1f10:	2b 8e 00 08 	lw r14,(sp+8)
    1f14:	37 9c 00 24 	addi sp,sp,36
    1f18:	c3 a0 00 00 	ret
                return float32_default_nan;
            }
            float_raise( float_flag_divbyzero );
            return packFloat32( zSign, 0xFF, 0 );
        }
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    1f1c:	37 83 00 18 	addi r3,sp,24
    1f20:	b9 00 08 00 	mv r1,r8
    1f24:	37 82 00 20 	addi r2,sp,32
    1f28:	fb ff fc 97 	calli 1184 <normalizeFloat32Subnormal>
    1f2c:	2b 83 00 24 	lw r3,(sp+36)
    1f30:	2b 86 00 1c 	lw r6,(sp+28)
    }
    if ( aExp == 0 ) {
    1f34:	5c 60 00 11 	bne r3,r0,1f78 <float32_div+0x104>
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
    1f38:	5c c3 00 0a 	bne r6,r3,1f60 <float32_div+0xec>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    1f3c:	3d 83 00 1f 	sli r3,r12,31
        }
        zSig |= ( rem1 != 0 );
    }
    return roundAndPackFloat32( zSign, zExp, zSig );

}
    1f40:	b8 60 08 00 	mv r1,r3
    1f44:	2b 9d 00 04 	lw ra,(sp+4)
    1f48:	2b 8b 00 14 	lw r11,(sp+20)
    1f4c:	2b 8c 00 10 	lw r12,(sp+16)
    1f50:	2b 8d 00 0c 	lw r13,(sp+12)
    1f54:	2b 8e 00 08 	lw r14,(sp+8)
    1f58:	37 9c 00 24 	addi sp,sp,36
    1f5c:	c3 a0 00 00 	ret
        }
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    1f60:	b8 c0 08 00 	mv r1,r6
    1f64:	37 83 00 1c 	addi r3,sp,28
    1f68:	37 82 00 24 	addi r2,sp,36
    1f6c:	fb ff fc 86 	calli 1184 <normalizeFloat32Subnormal>
    1f70:	2b 83 00 24 	lw r3,(sp+36)
    1f74:	2b 86 00 1c 	lw r6,(sp+28)
    }
    zExp = aExp - bExp + 0x7D;
    aSig = ( aSig | 0x00800000 )<<7;
    bSig = ( bSig | 0x00800000 )<<8;
    1f78:	2b 8b 00 18 	lw r11,(sp+24)
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = aExp - bExp + 0x7D;
    aSig = ( aSig | 0x00800000 )<<7;
    1f7c:	78 01 00 80 	mvhi r1,0x80
    1f80:	b8 c1 30 00 	or r6,r6,r1
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = aExp - bExp + 0x7D;
    1f84:	2b 8e 00 20 	lw r14,(sp+32)
    aSig = ( aSig | 0x00800000 )<<7;
    bSig = ( bSig | 0x00800000 )<<8;
    1f88:	b9 61 58 00 	or r11,r11,r1
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = aExp - bExp + 0x7D;
    aSig = ( aSig | 0x00800000 )<<7;
    1f8c:	3c cd 00 07 	sli r13,r6,7
    bSig = ( bSig | 0x00800000 )<<8;
    1f90:	3d 6b 00 08 	sli r11,r11,8
    if ( bSig <= ( aSig + aSig ) ) {
    1f94:	3c c6 00 08 	sli r6,r6,8
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = aExp - bExp + 0x7D;
    1f98:	c8 6e 18 00 	sub r3,r3,r14
    aSig = ( aSig | 0x00800000 )<<7;
    1f9c:	5b 8d 00 1c 	sw (sp+28),r13
    bSig = ( bSig | 0x00800000 )<<8;
    1fa0:	5b 8b 00 18 	sw (sp+24),r11
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return packFloat32( zSign, 0, 0 );
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = aExp - bExp + 0x7D;
    1fa4:	34 6e 00 7d 	addi r14,r3,125
    aSig = ( aSig | 0x00800000 )<<7;
    bSig = ( bSig | 0x00800000 )<<8;
    if ( bSig <= ( aSig + aSig ) ) {
    1fa8:	55 66 00 04 	bgu r11,r6,1fb8 <float32_div+0x144>
        aSig >>= 1;
    1fac:	01 ad 00 01 	srui r13,r13,1
        ++zExp;
    1fb0:	35 ce 00 01 	addi r14,r14,1
    }
    zExp = aExp - bExp + 0x7D;
    aSig = ( aSig | 0x00800000 )<<7;
    bSig = ( bSig | 0x00800000 )<<8;
    if ( bSig <= ( aSig + aSig ) ) {
        aSig >>= 1;
    1fb4:	5b 8d 00 1c 	sw (sp+28),r13
        ++zExp;
    }
    zSig = estimateDiv64To32( aSig, 0, bSig );
    1fb8:	b9 60 10 00 	mv r2,r11
    1fbc:	b9 a0 08 00 	mv r1,r13
    1fc0:	fb ff fd d2 	calli 1708 <estimateDiv64To32.clone.0>
    1fc4:	b8 20 18 00 	mv r3,r1
    if ( ( zSig & 0x3F ) <= 2 ) {
    1fc8:	20 22 00 3f 	andi r2,r1,0x3f
    1fcc:	34 01 00 02 	mvi r1,2
    1fd0:	54 41 00 20 	bgu r2,r1,2050 <float32_div+0x1dc>
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    1fd4:	01 62 00 10 	srui r2,r11,16
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    1fd8:	00 64 00 10 	srui r4,r3,16

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    1fdc:	21 65 ff ff 	andi r5,r11,0xffff
    1fe0:	20 68 ff ff 	andi r8,r3,0xffff
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    1fe4:	89 02 30 00 	mul r6,r8,r2
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    1fe8:	88 85 08 00 	mul r1,r4,r5

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    1fec:	89 05 40 00 	mul r8,r8,r5
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    1ff0:	88 82 20 00 	mul r4,r4,r2
    zMiddleA += zMiddleB;
    1ff4:	b4 26 08 00 	add r1,r1,r6
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    zMiddleA <<= 16;
    1ff8:	3c 22 00 10 	sli r2,r1,16
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    1ffc:	00 27 00 10 	srui r7,r1,16
    zMiddleA <<= 16;
    z1 += zMiddleA;
    2000:	b4 48 40 00 	add r8,r2,r8
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    2004:	f4 c1 08 00 	cmpgu r1,r6,r1
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    2008:	7d 05 00 00 	cmpnei r5,r8,0
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    200c:	c9 a4 68 00 	sub r13,r13,r4
    2010:	c9 a7 68 00 	sub r13,r13,r7
    zMiddleA <<= 16;
    z1 += zMiddleA;
    z0 += ( z1 < zMiddleA );
    2014:	f4 48 10 00 	cmpgu r2,r2,r8
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    2018:	3c 21 00 10 	sli r1,r1,16
    zMiddleA <<= 16;
    z1 += zMiddleA;
    z0 += ( z1 < zMiddleA );
    201c:	c9 a5 30 00 	sub r6,r13,r5
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    2020:	c8 c2 30 00 	sub r6,r6,r2
INLINE void
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    2024:	c8 08 40 00 	sub r8,r0,r8
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    2028:	c8 c1 30 00 	sub r6,r6,r1
INLINE void
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    202c:	b9 00 38 00 	mv r7,r8
        mul32To64( bSig, zSig, &term0, &term1 );
        sub64( aSig, 0, term0, term1, &rem0, &rem1 );
        while ( (sbits32) rem0 < 0 ) {
    2030:	4c c0 00 06 	bge r6,r0,2048 <float32_div+0x1d4>
 add64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{
    bits32 z1;

    z1 = a1 + b1;
    2034:	b5 0b 38 00 	add r7,r8,r11
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
    2038:	f5 07 40 00 	cmpgu r8,r8,r7
            --zSig;
    203c:	34 63 ff ff 	addi r3,r3,-1
    2040:	b4 c8 30 00 	add r6,r6,r8
    }
    zSig = estimateDiv64To32( aSig, 0, bSig );
    if ( ( zSig & 0x3F ) <= 2 ) {
        mul32To64( bSig, zSig, &term0, &term1 );
        sub64( aSig, 0, term0, term1, &rem0, &rem1 );
        while ( (sbits32) rem0 < 0 ) {
    2044:	48 06 00 28 	bg r0,r6,20e4 <float32_div+0x270>
            --zSig;
            add64( rem0, rem1, 0, bSig, &rem0, &rem1 );
        }
        zSig |= ( rem1 != 0 );
    2048:	7c e7 00 00 	cmpnei r7,r7,0
    204c:	b8 67 18 00 	or r3,r3,r7
    }
    return roundAndPackFloat32( zSign, zExp, zSig );
    2050:	b9 80 08 00 	mv r1,r12
    2054:	b9 c0 10 00 	mv r2,r14
    2058:	fb ff fc 65 	calli 11ec <roundAndPackFloat32>
    205c:	b8 20 18 00 	mv r3,r1

}
    2060:	b8 60 08 00 	mv r1,r3
    2064:	2b 9d 00 04 	lw ra,(sp+4)
    2068:	2b 8b 00 14 	lw r11,(sp+20)
    206c:	2b 8c 00 10 	lw r12,(sp+16)
    2070:	2b 8d 00 0c 	lw r13,(sp+12)
    2074:	2b 8e 00 08 	lw r14,(sp+8)
    2078:	37 9c 00 24 	addi sp,sp,36
    207c:	c3 a0 00 00 	ret
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, b );
    2080:	5c c0 00 0f 	bne r6,r0,20bc <float32_div+0x248>
        if ( bExp == 0xFF ) {
    2084:	44 e3 00 1a 	be r7,r3,20ec <float32_div+0x278>
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    2088:	3d 83 00 1f 	sli r3,r12,31
    208c:	78 01 7f 80 	mvhi r1,0x7f80
    2090:	b4 61 18 00 	add r3,r3,r1
        }
        zSig |= ( rem1 != 0 );
    }
    return roundAndPackFloat32( zSign, zExp, zSig );

}
    2094:	b8 60 08 00 	mv r1,r3
    2098:	2b 9d 00 04 	lw ra,(sp+4)
    209c:	2b 8b 00 14 	lw r11,(sp+20)
    20a0:	2b 8c 00 10 	lw r12,(sp+16)
    20a4:	2b 8d 00 0c 	lw r13,(sp+12)
    20a8:	2b 8e 00 08 	lw r14,(sp+8)
    20ac:	37 9c 00 24 	addi sp,sp,36
    20b0:	c3 a0 00 00 	ret
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    20b4:	3d 83 00 1f 	sli r3,r12,31
            return float32_default_nan;
        }
        return packFloat32( zSign, 0xFF, 0 );
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    20b8:	45 00 ff ea 	be r8,r0,2060 <float32_div+0x1ec>
    20bc:	fb ff fc 07 	calli 10d8 <propagateFloat32NaN>
    20c0:	b8 20 18 00 	mv r3,r1
        }
        zSig |= ( rem1 != 0 );
    }
    return roundAndPackFloat32( zSign, zExp, zSig );

}
    20c4:	b8 60 08 00 	mv r1,r3
    20c8:	2b 9d 00 04 	lw ra,(sp+4)
    20cc:	2b 8b 00 14 	lw r11,(sp+20)
    20d0:	2b 8c 00 10 	lw r12,(sp+16)
    20d4:	2b 8d 00 0c 	lw r13,(sp+12)
    20d8:	2b 8e 00 08 	lw r14,(sp+8)
    20dc:	37 9c 00 24 	addi sp,sp,36
    20e0:	c3 a0 00 00 	ret
 add64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{
    bits32 z1;

    z1 = a1 + b1;
    20e4:	b8 e0 40 00 	mv r8,r7
    20e8:	e3 ff ff d3 	bi 2034 <float32_div+0x1c0>
    bSign = extractFloat32Sign( b );
    zSign = aSign ^ bSign;
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, b );
        if ( bExp == 0xFF ) {
            if ( bSig ) return propagateFloat32NaN( a, b );
    20ec:	45 00 ff 7e 	be r8,r0,1ee4 <float32_div+0x70>
    20f0:	e3 ff ff f3 	bi 20bc <float32_div+0x248>
    20f4:	78 01 00 00 	mvhi r1,0x0
    20f8:	38 21 31 0c 	ori r1,r1,0x310c
    20fc:	28 22 00 00 	lw r2,(r1+0)
significand.
-------------------------------------------------------------------------------
*/
INLINE float32 packFloat32( flag zSign, int16 zExp, bits32 zSig )
{
    return ( ( (bits32) zSign )<<31 ) + ( ( (bits32) zExp )<<23 ) + zSig;
    2100:	3d 83 00 1f 	sli r3,r12,31
    2104:	38 42 00 02 	ori r2,r2,0x2
    2108:	58 22 00 00 	sw (r1+0),r2
    210c:	78 01 7f 80 	mvhi r1,0x7f80
    2110:	b4 61 18 00 	add r3,r3,r1
            if ( ( aExp | aSig ) == 0 ) {
                float_raise( float_flag_invalid );
                return float32_default_nan;
            }
            float_raise( float_flag_divbyzero );
            return packFloat32( zSign, 0xFF, 0 );
    2114:	e3 ff ff d3 	bi 2060 <float32_div+0x1ec>

00002118 <float32_rem>:
with respect to the corresponding value `b'.  The operation is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_rem( float32 a, float32 b )
{
    2118:	37 9c ff d0 	addi sp,sp,-48
    211c:	5b 8b 00 20 	sw (sp+32),r11
    2120:	5b 8c 00 1c 	sw (sp+28),r12
    2124:	5b 8d 00 18 	sw (sp+24),r13
    2128:	5b 8e 00 14 	sw (sp+20),r14
    212c:	5b 8f 00 10 	sw (sp+16),r15
    2130:	5b 90 00 0c 	sw (sp+12),r16
    2134:	5b 91 00 08 	sw (sp+8),r17
    2138:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    213c:	78 04 00 00 	mvhi r4,0x0
    2140:	38 84 2c 78 	ori r4,r4,0x2c78
    2144:	28 85 00 00 	lw r5,(r4+0)
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    2148:	00 2d 00 17 	srui r13,r1,23
    214c:	00 44 00 17 	srui r4,r2,23
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    2150:	a0 25 58 00 	and r11,r1,r5
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    2154:	21 ad 00 ff 	andi r13,r13,0xff
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    2158:	a0 45 28 00 	and r5,r2,r5
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    215c:	20 84 00 ff 	andi r4,r4,0xff
    int16 aExp, bExp, expDiff;
    bits32 aSig, bSig;
    bits32 q, alternateASig;
    sbits32 sigMean;

    aSig = extractFloat32Frac( a );
    2160:	5b 8b 00 28 	sw (sp+40),r11
    aExp = extractFloat32Exp( a );
    2164:	5b 8d 00 30 	sw (sp+48),r13
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    2168:	5b 85 00 24 	sw (sp+36),r5
    bExp = extractFloat32Exp( b );
    216c:	5b 84 00 2c 	sw (sp+44),r4
    bSign = extractFloat32Sign( b );
    if ( aExp == 0xFF ) {
    2170:	34 06 00 ff 	mvi r6,255
with respect to the corresponding value `b'.  The operation is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_rem( float32 a, float32 b )
{
    2174:	b8 20 60 00 	mv r12,r1
    2178:	b8 40 18 00 	mv r3,r2
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    if ( aExp == 0xFF ) {
    217c:	45 a6 00 60 	be r13,r6,22fc <float32_rem+0x1e4>
            return propagateFloat32NaN( a, b );
        }
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( bExp == 0xFF ) {
    2180:	44 86 00 69 	be r4,r6,2324 <float32_rem+0x20c>
        if ( bSig ) return propagateFloat32NaN( a, b );
        return a;
    }
    if ( bExp == 0 ) {
    2184:	5c 80 00 19 	bne r4,r0,21e8 <float32_rem+0xd0>
        if ( bSig == 0 ) {
    2188:	5c a4 00 12 	bne r5,r4,21d0 <float32_rem+0xb8>
    218c:	78 01 00 00 	mvhi r1,0x0
    2190:	38 21 31 0c 	ori r1,r1,0x310c
    2194:	28 22 00 00 	lw r2,(r1+0)
            float_raise( float_flag_invalid );
            return float32_default_nan;
    2198:	34 0c ff ff 	mvi r12,-1
    219c:	38 42 00 10 	ori r2,r2,0x10
    21a0:	58 22 00 00 	sw (r1+0),r2
    }
    zSign = ( (sbits32) aSig < 0 );
    if ( zSign ) aSig = - aSig;
    return normalizeRoundAndPackFloat32( aSign ^ zSign, bExp, aSig );

}
    21a4:	b9 80 08 00 	mv r1,r12
    21a8:	2b 9d 00 04 	lw ra,(sp+4)
    21ac:	2b 8b 00 20 	lw r11,(sp+32)
    21b0:	2b 8c 00 1c 	lw r12,(sp+28)
    21b4:	2b 8d 00 18 	lw r13,(sp+24)
    21b8:	2b 8e 00 14 	lw r14,(sp+20)
    21bc:	2b 8f 00 10 	lw r15,(sp+16)
    21c0:	2b 90 00 0c 	lw r16,(sp+12)
    21c4:	2b 91 00 08 	lw r17,(sp+8)
    21c8:	37 9c 00 30 	addi sp,sp,48
    21cc:	c3 a0 00 00 	ret
    if ( bExp == 0 ) {
        if ( bSig == 0 ) {
            float_raise( float_flag_invalid );
            return float32_default_nan;
        }
        normalizeFloat32Subnormal( bSig, &bExp, &bSig );
    21d0:	b8 a0 08 00 	mv r1,r5
    21d4:	37 82 00 2c 	addi r2,sp,44
    21d8:	37 83 00 24 	addi r3,sp,36
    21dc:	fb ff fb ea 	calli 1184 <normalizeFloat32Subnormal>
    21e0:	2b 8d 00 30 	lw r13,(sp+48)
    21e4:	2b 8b 00 28 	lw r11,(sp+40)
    }
    if ( aExp == 0 ) {
    21e8:	5d a0 00 08 	bne r13,r0,2208 <float32_rem+0xf0>
        if ( aSig == 0 ) return a;
    21ec:	45 6d ff ee 	be r11,r13,21a4 <float32_rem+0x8c>
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    21f0:	b9 60 08 00 	mv r1,r11
    21f4:	37 82 00 30 	addi r2,sp,48
    21f8:	37 83 00 28 	addi r3,sp,40
    21fc:	fb ff fb e2 	calli 1184 <normalizeFloat32Subnormal>
    2200:	2b 8d 00 30 	lw r13,(sp+48)
    2204:	2b 8b 00 28 	lw r11,(sp+40)
    }
    expDiff = aExp - bExp;
    2208:	2b 91 00 2c 	lw r17,(sp+44)
    aSig = ( aSig | 0x00800000 )<<8;
    bSig = ( bSig | 0x00800000 )<<8;
    220c:	2b 8f 00 24 	lw r15,(sp+36)
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return a;
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    expDiff = aExp - bExp;
    aSig = ( aSig | 0x00800000 )<<8;
    2210:	78 01 00 80 	mvhi r1,0x80
    2214:	b9 61 58 00 	or r11,r11,r1
    bSig = ( bSig | 0x00800000 )<<8;
    2218:	b9 e1 78 00 	or r15,r15,r1
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return a;
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    expDiff = aExp - bExp;
    221c:	c9 b1 68 00 	sub r13,r13,r17
    aSig = ( aSig | 0x00800000 )<<8;
    2220:	3d 6b 00 08 	sli r11,r11,8
    bSig = ( bSig | 0x00800000 )<<8;
    2224:	3d ef 00 08 	sli r15,r15,8
    if ( expDiff < 0 ) {
    2228:	4d a0 00 04 	bge r13,r0,2238 <float32_rem+0x120>
        if ( expDiff < -1 ) return a;
    222c:	34 01 ff ff 	mvi r1,-1
    2230:	5d a1 ff dd 	bne r13,r1,21a4 <float32_rem+0x8c>
        aSig >>= 1;
    2234:	01 6b 00 01 	srui r11,r11,1
    }
    q = ( bSig <= aSig );
    2238:	f1 6f 20 00 	cmpgeu r4,r11,r15
    if ( q ) aSig -= bSig;
    223c:	44 80 00 02 	be r4,r0,2244 <float32_rem+0x12c>
    2240:	c9 6f 58 00 	sub r11,r11,r15
    expDiff -= 32;
    2244:	35 ad ff e0 	addi r13,r13,-32
    while ( 0 < expDiff ) {
    2248:	01 ee 00 02 	srui r14,r15,2
        q = estimateDiv64To32( aSig, 0, bSig );
        q = ( 2 < q ) ? q - 2 : 0;
    224c:	34 10 00 02 	mvi r16,2
        aSig >>= 1;
    }
    q = ( bSig <= aSig );
    if ( q ) aSig -= bSig;
    expDiff -= 32;
    while ( 0 < expDiff ) {
    2250:	49 a0 00 39 	bg r13,r0,2334 <float32_rem+0x21c>
        q = estimateDiv64To32( aSig, 0, bSig );
        q = ( 2 < q ) ? q - 2 : 0;
        aSig = - ( ( bSig>>2 ) * q );
        expDiff -= 30;
    }
    expDiff += 32;
    2254:	35 ad 00 20 	addi r13,r13,32
    if ( 0 < expDiff ) {
    2258:	4c 0d 00 49 	bge r0,r13,237c <float32_rem+0x264>
        q = estimateDiv64To32( aSig, 0, bSig );
    225c:	b9 e0 10 00 	mv r2,r15
    2260:	b9 60 08 00 	mv r1,r11
    2264:	fb ff fd 29 	calli 1708 <estimateDiv64To32.clone.0>
        q = ( 2 < q ) ? q - 2 : 0;
    2268:	34 03 00 02 	mvi r3,2
    226c:	34 02 00 00 	mvi r2,0
    2270:	34 04 00 00 	mvi r4,0
    2274:	50 61 00 05 	bgeu r3,r1,2288 <float32_rem+0x170>
    2278:	c8 0d 10 00 	sub r2,r0,r13
    227c:	34 21 ff fe 	addi r1,r1,-2
    2280:	80 22 20 00 	sru r4,r1,r2
    2284:	88 8e 10 00 	mul r2,r4,r14
        q >>= 32 - expDiff;
        bSig >>= 2;
        aSig = ( ( aSig>>1 )<<( expDiff - 1 ) ) - bSig * q;
    2288:	01 63 00 01 	srui r3,r11,1
    228c:	35 ad ff ff 	addi r13,r13,-1
    2290:	bc 6d 18 00 	sl r3,r3,r13
    expDiff += 32;
    if ( 0 < expDiff ) {
        q = estimateDiv64To32( aSig, 0, bSig );
        q = ( 2 < q ) ? q - 2 : 0;
        q >>= 32 - expDiff;
        bSig >>= 2;
    2294:	5b 8e 00 24 	sw (sp+36),r14
        aSig = ( ( aSig>>1 )<<( expDiff - 1 ) ) - bSig * q;
    2298:	c8 62 18 00 	sub r3,r3,r2
Returns the remainder of the single-precision floating-point value `a'
with respect to the corresponding value `b'.  The operation is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_rem( float32 a, float32 b )
    229c:	c8 0e 40 00 	sub r8,r0,r14
    22a0:	c8 6e 18 00 	sub r3,r3,r14
        aSig >>= 2;
        bSig >>= 2;
    }
    do {
        alternateASig = aSig;
        ++q;
    22a4:	b4 68 08 00 	add r1,r3,r8
Returns the remainder of the single-precision floating-point value `a'
with respect to the corresponding value `b'.  The operation is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_rem( float32 a, float32 b )
    22a8:	b4 2e 28 00 	add r5,r1,r14
    22ac:	b4 6e 38 00 	add r7,r3,r14
        aSig >>= 2;
        bSig >>= 2;
    }
    do {
        alternateASig = aSig;
        ++q;
    22b0:	b8 60 30 00 	mv r6,r3
    22b4:	34 84 00 01 	addi r4,r4,1
        aSig -= bSig;
    } while ( 0 <= (sbits32) aSig );
    22b8:	4c a0 00 2f 	bge r5,r0,2374 <float32_rem+0x25c>
    22bc:	5b 83 00 28 	sw (sp+40),r3
    sigMean = aSig + alternateASig;
    22c0:	b4 e3 08 00 	add r1,r7,r3
    if ( ( sigMean < 0 ) || ( ( sigMean == 0 ) && ( q & 1 ) ) ) {
    22c4:	48 01 00 28 	bg r0,r1,2364 <float32_rem+0x24c>
    22c8:	5c 20 00 03 	bne r1,r0,22d4 <float32_rem+0x1bc>
    22cc:	20 84 00 01 	andi r4,r4,0x1
    22d0:	5c 81 00 25 	bne r4,r1,2364 <float32_rem+0x24c>
        aSig = alternateASig;
    }
    zSign = ( (sbits32) aSig < 0 );
    22d4:	00 c6 00 1f 	srui r6,r6,31
    if ( zSign ) aSig = - aSig;
    22d8:	44 c0 00 03 	be r6,r0,22e4 <float32_rem+0x1cc>
    22dc:	c8 03 18 00 	sub r3,r0,r3
    22e0:	5b 83 00 28 	sw (sp+40),r3
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    22e4:	01 81 00 1f 	srui r1,r12,31
    if ( ( sigMean < 0 ) || ( ( sigMean == 0 ) && ( q & 1 ) ) ) {
        aSig = alternateASig;
    }
    zSign = ( (sbits32) aSig < 0 );
    if ( zSign ) aSig = - aSig;
    return normalizeRoundAndPackFloat32( aSign ^ zSign, bExp, aSig );
    22e8:	ba 20 10 00 	mv r2,r17
    22ec:	98 c1 08 00 	xor r1,r6,r1
    22f0:	fb ff fc 24 	calli 1380 <normalizeRoundAndPackFloat32>
    22f4:	b8 20 60 00 	mv r12,r1
    22f8:	e3 ff ff ab 	bi 21a4 <float32_rem+0x8c>
    aSign = extractFloat32Sign( a );
    bSig = extractFloat32Frac( b );
    bExp = extractFloat32Exp( b );
    bSign = extractFloat32Sign( b );
    if ( aExp == 0xFF ) {
        if ( aSig || ( ( bExp == 0xFF ) && bSig ) ) {
    22fc:	5d 60 00 05 	bne r11,r0,2310 <float32_rem+0x1f8>
    2300:	64 84 00 ff 	cmpei r4,r4,255
    2304:	7c a5 00 00 	cmpnei r5,r5,0
    2308:	a0 85 20 00 	and r4,r4,r5
    230c:	44 8b ff a0 	be r4,r11,218c <float32_rem+0x74>
            return propagateFloat32NaN( a, b );
    2310:	b9 80 08 00 	mv r1,r12
    2314:	b8 60 10 00 	mv r2,r3
    2318:	fb ff fb 70 	calli 10d8 <propagateFloat32NaN>
    231c:	b8 20 60 00 	mv r12,r1
    2320:	e3 ff ff a1 	bi 21a4 <float32_rem+0x8c>
        }
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( bExp == 0xFF ) {
        if ( bSig ) return propagateFloat32NaN( a, b );
    2324:	44 a0 ff a0 	be r5,r0,21a4 <float32_rem+0x8c>
    2328:	fb ff fb 6c 	calli 10d8 <propagateFloat32NaN>
    232c:	b8 20 60 00 	mv r12,r1
    2330:	e3 ff ff 9d 	bi 21a4 <float32_rem+0x8c>
    }
    q = ( bSig <= aSig );
    if ( q ) aSig -= bSig;
    expDiff -= 32;
    while ( 0 < expDiff ) {
        q = estimateDiv64To32( aSig, 0, bSig );
    2334:	b9 60 08 00 	mv r1,r11
    2338:	b9 e0 10 00 	mv r2,r15
    233c:	fb ff fc f3 	calli 1708 <estimateDiv64To32.clone.0>
        q = ( 2 < q ) ? q - 2 : 0;
        aSig = - ( ( bSig>>2 ) * q );
        expDiff -= 30;
    2340:	35 ad ff e2 	addi r13,r13,-30
    q = ( bSig <= aSig );
    if ( q ) aSig -= bSig;
    expDiff -= 32;
    while ( 0 < expDiff ) {
        q = estimateDiv64To32( aSig, 0, bSig );
        q = ( 2 < q ) ? q - 2 : 0;
    2344:	34 0b 00 00 	mvi r11,0
    2348:	34 04 00 00 	mvi r4,0
    234c:	52 01 00 04 	bgeu r16,r1,235c <float32_rem+0x244>
    2350:	34 24 ff fe 	addi r4,r1,-2
    2354:	88 8e 58 00 	mul r11,r4,r14
    2358:	c8 0b 58 00 	sub r11,r0,r11
        aSig >>= 1;
    }
    q = ( bSig <= aSig );
    if ( q ) aSig -= bSig;
    expDiff -= 32;
    while ( 0 < expDiff ) {
    235c:	49 a0 ff f6 	bg r13,r0,2334 <float32_rem+0x21c>
    2360:	e3 ff ff bd 	bi 2254 <float32_rem+0x13c>
        ++q;
        aSig -= bSig;
    } while ( 0 <= (sbits32) aSig );
    sigMean = aSig + alternateASig;
    if ( ( sigMean < 0 ) || ( ( sigMean == 0 ) && ( q & 1 ) ) ) {
        aSig = alternateASig;
    2364:	b8 e0 30 00 	mv r6,r7
    2368:	5b 87 00 28 	sw (sp+40),r7
    else {
        aSig >>= 2;
        bSig >>= 2;
    }
    do {
        alternateASig = aSig;
    236c:	b8 e0 18 00 	mv r3,r7
    2370:	e3 ff ff d9 	bi 22d4 <float32_rem+0x1bc>
        ++q;
        aSig -= bSig;
    } while ( 0 <= (sbits32) aSig );
    2374:	b8 20 18 00 	mv r3,r1
    2378:	e3 ff ff cb 	bi 22a4 <float32_rem+0x18c>
        q >>= 32 - expDiff;
        bSig >>= 2;
        aSig = ( ( aSig>>1 )<<( expDiff - 1 ) ) - bSig * q;
    }
    else {
        aSig >>= 2;
    237c:	01 63 00 02 	srui r3,r11,2
        bSig >>= 2;
    2380:	5b 8e 00 24 	sw (sp+36),r14
    2384:	e3 ff ff c6 	bi 229c <float32_rem+0x184>

00002388 <float32_sqrt>:
The operation is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_sqrt( float32 a )
{
    2388:	37 9c ff e4 	addi sp,sp,-28
    238c:	5b 8b 00 14 	sw (sp+20),r11
    2390:	5b 8c 00 10 	sw (sp+16),r12
    2394:	5b 8d 00 0c 	sw (sp+12),r13
    2398:	5b 8e 00 08 	sw (sp+8),r14
    239c:	5b 9d 00 04 	sw (sp+4),ra
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    23a0:	78 05 00 00 	mvhi r5,0x0
    23a4:	38 a5 2c 78 	ori r5,r5,0x2c78
    23a8:	28 a4 00 00 	lw r4,(r5+0)
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    23ac:	00 23 00 17 	srui r3,r1,23
    bits32 term0, term1;

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    if ( aExp == 0xFF ) {
    23b0:	34 06 00 ff 	mvi r6,255
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    23b4:	a0 24 20 00 	and r4,r1,r4
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    23b8:	20 63 00 ff 	andi r3,r3,0xff
    int16 aExp, zExp;
    bits32 aSig, zSig;
    bits32 rem0, rem1;
    bits32 term0, term1;

    aSig = extractFloat32Frac( a );
    23bc:	5b 84 00 18 	sw (sp+24),r4
    aExp = extractFloat32Exp( a );
    23c0:	5b 83 00 1c 	sw (sp+28),r3
The operation is performed according to the IEC/IEEE Standard for Binary
Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
float32 float32_sqrt( float32 a )
{
    23c4:	b8 20 10 00 	mv r2,r1
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    23c8:	00 25 00 1f 	srui r5,r1,31
    bits32 term0, term1;

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    if ( aExp == 0xFF ) {
    23cc:	44 66 00 4d 	be r3,r6,2500 <float32_sqrt+0x178>
        if ( aSig ) return propagateFloat32NaN( a, 0 );
        if ( ! aSign ) return a;
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( aSign ) {
    23d0:	44 a0 00 11 	be r5,r0,2414 <float32_sqrt+0x8c>
        if ( ( aExp | aSig ) == 0 ) return a;
    23d4:	b8 64 18 00 	or r3,r3,r4
    23d8:	44 60 00 07 	be r3,r0,23f4 <float32_sqrt+0x6c>
    23dc:	78 01 00 00 	mvhi r1,0x0
    23e0:	38 21 31 0c 	ori r1,r1,0x310c
    23e4:	28 23 00 00 	lw r3,(r1+0)
        float_raise( float_flag_invalid );
        return float32_default_nan;
    23e8:	34 02 ff ff 	mvi r2,-1
    23ec:	38 63 00 10 	ori r3,r3,0x10
    23f0:	58 23 00 00 	sw (r1+0),r3
        }
    }
    shift32RightJamming( zSig, 1, &zSig );
    return roundAndPackFloat32( 0, zExp, zSig );

}
    23f4:	b8 40 08 00 	mv r1,r2
    23f8:	2b 9d 00 04 	lw ra,(sp+4)
    23fc:	2b 8b 00 14 	lw r11,(sp+20)
    2400:	2b 8c 00 10 	lw r12,(sp+16)
    2404:	2b 8d 00 0c 	lw r13,(sp+12)
    2408:	2b 8e 00 08 	lw r14,(sp+8)
    240c:	37 9c 00 1c 	addi sp,sp,28
    2410:	c3 a0 00 00 	ret
    if ( aSign ) {
        if ( ( aExp | aSig ) == 0 ) return a;
        float_raise( float_flag_invalid );
        return float32_default_nan;
    }
    if ( aExp == 0 ) {
    2414:	5c 65 00 09 	bne r3,r5,2438 <float32_sqrt+0xb0>
        if ( aSig == 0 ) return 0;
    2418:	34 02 00 00 	mvi r2,0
    241c:	44 83 ff f6 	be r4,r3,23f4 <float32_sqrt+0x6c>
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    2420:	b8 80 08 00 	mv r1,r4
    2424:	37 83 00 18 	addi r3,sp,24
    2428:	37 82 00 1c 	addi r2,sp,28
    242c:	fb ff fb 56 	calli 1184 <normalizeFloat32Subnormal>
    2430:	2b 83 00 1c 	lw r3,(sp+28)
    2434:	2b 84 00 18 	lw r4,(sp+24)
    }
    zExp = ( ( aExp - 0x7F )>>1 ) + 0x7E;
    aSig = ( aSig | 0x00800000 )<<8;
    2438:	78 0b 00 80 	mvhi r11,0x80
    243c:	b8 8b 20 00 	or r4,r4,r11
    2440:	3c 8b 00 08 	sli r11,r4,8
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return 0;
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = ( ( aExp - 0x7F )>>1 ) + 0x7E;
    2444:	34 6e ff 81 	addi r14,r3,-127
    2448:	15 ce 00 01 	sri r14,r14,1
        0x0200, 0x0179, 0x0109, 0x00AF, 0x0068, 0x0034, 0x0012, 0x0002
    };
    int8 index;
    bits32 z;

    index = ( a>>27 ) & 15;
    244c:	01 62 00 1b 	srui r2,r11,27
    aSig = ( aSig | 0x00800000 )<<8;
    2450:	5b 8b 00 18 	sw (sp+24),r11
    if ( aExp & 1 ) {
    2454:	20 6d 00 01 	andi r13,r3,0x1
    }
    if ( aExp == 0 ) {
        if ( aSig == 0 ) return 0;
        normalizeFloat32Subnormal( aSig, &aExp, &aSig );
    }
    zExp = ( ( aExp - 0x7F )>>1 ) + 0x7E;
    2458:	35 ce 00 7e 	addi r14,r14,126
        0x0200, 0x0179, 0x0109, 0x00AF, 0x0068, 0x0034, 0x0012, 0x0002
    };
    int8 index;
    bits32 z;

    index = ( a>>27 ) & 15;
    245c:	20 42 00 0f 	andi r2,r2,0xf
    if ( aExp & 1 ) {
    2460:	5d a0 00 2b 	bne r13,r0,250c <float32_sqrt+0x184>
        z = 0x4000 + ( a>>17 ) - sqrtOddAdjustments[ index ];
        z = ( ( a / z )<<14 ) + ( z<<15 );
        a >>= 1;
    }
    else {
        z = 0x8000 + ( a>>17 ) - sqrtEvenAdjustments[ index ];
    2464:	3c 42 00 01 	sli r2,r2,1
    2468:	78 01 00 00 	mvhi r1,0x0
    246c:	38 21 30 90 	ori r1,r1,0x3090
    2470:	b4 22 08 00 	add r1,r1,r2
    2474:	2c 22 00 00 	lhu r2,(r1+0)
    2478:	01 63 00 11 	srui r3,r11,17
    247c:	38 01 80 00 	mvu r1,0x8000
    2480:	b4 61 08 00 	add r1,r3,r1
    2484:	c8 22 08 00 	sub r1,r1,r2
        z = a / z + z;
    2488:	8d 61 10 00 	divu r2,r11,r1
        z = ( 0x20000 <= z ) ? 0xFFFF8000 : ( z<<15 );
    248c:	78 03 00 00 	mvhi r3,0x0
    2490:	38 63 2c 80 	ori r3,r3,0x2c80
        z = ( ( a / z )<<14 ) + ( z<<15 );
        a >>= 1;
    }
    else {
        z = 0x8000 + ( a>>17 ) - sqrtEvenAdjustments[ index ];
        z = a / z + z;
    2494:	b4 41 08 00 	add r1,r2,r1
        z = ( 0x20000 <= z ) ? 0xFFFF8000 : ( z<<15 );
    2498:	28 62 00 00 	lw r2,(r3+0)
    249c:	34 0c 80 00 	mvi r12,-32768
    24a0:	54 22 00 02 	bgu r1,r2,24a8 <float32_sqrt+0x120>
    24a4:	3c 2c 00 0f 	sli r12,r1,15
        if ( z <= a ) return (bits32) ( ( (sbits32) a )>>1 );
    24a8:	b9 60 08 00 	mv r1,r11
    24ac:	55 8b 00 25 	bgu r12,r11,2540 <float32_sqrt+0x1b8>
    24b0:	15 61 00 01 	sri r1,r11,1
    aSig = ( aSig | 0x00800000 )<<8;
    zSig = estimateSqrt32( aExp, aSig ) + 2;
    24b4:	34 21 00 02 	addi r1,r1,2
    if ( ( zSig & 0x7F ) <= 5 ) {
    24b8:	20 22 00 7f 	andi r2,r1,0x7f
    24bc:	34 03 00 05 	mvi r3,5
    24c0:	50 62 00 26 	bgeu r3,r2,2558 <float32_sqrt+0x1d0>
                --zSig;
                shortShift64Left( 0, zSig, 1, &term0, &term1 );
                term1 |= 1;
                add64( rem0, rem1, term0, term1, &rem0, &rem1 );
            }
            zSig |= ( ( rem0 | rem1 ) != 0 );
    24c4:	00 22 00 01 	srui r2,r1,1
    24c8:	20 21 00 01 	andi r1,r1,0x1
    24cc:	b8 22 18 00 	or r3,r1,r2
        }
    }
    shift32RightJamming( zSig, 1, &zSig );
    return roundAndPackFloat32( 0, zExp, zSig );
    24d0:	b9 c0 10 00 	mv r2,r14
    24d4:	34 01 00 00 	mvi r1,0
    24d8:	fb ff fb 45 	calli 11ec <roundAndPackFloat32>
    24dc:	b8 20 10 00 	mv r2,r1

}
    24e0:	b8 40 08 00 	mv r1,r2
    24e4:	2b 9d 00 04 	lw ra,(sp+4)
    24e8:	2b 8b 00 14 	lw r11,(sp+20)
    24ec:	2b 8c 00 10 	lw r12,(sp+16)
    24f0:	2b 8d 00 0c 	lw r13,(sp+12)
    24f4:	2b 8e 00 08 	lw r14,(sp+8)
    24f8:	37 9c 00 1c 	addi sp,sp,28
    24fc:	c3 a0 00 00 	ret

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, 0 );
    2500:	5c 80 00 40 	bne r4,r0,2600 <float32_sqrt+0x278>
        if ( ! aSign ) return a;
    2504:	5c a4 ff b6 	bne r5,r4,23dc <float32_sqrt+0x54>
    2508:	e3 ff ff bb 	bi 23f4 <float32_sqrt+0x6c>
    int8 index;
    bits32 z;

    index = ( a>>27 ) & 15;
    if ( aExp & 1 ) {
        z = 0x4000 + ( a>>17 ) - sqrtOddAdjustments[ index ];
    250c:	3c 42 00 01 	sli r2,r2,1
    2510:	78 04 00 00 	mvhi r4,0x0
    2514:	38 84 30 b0 	ori r4,r4,0x30b0
    2518:	b4 82 20 00 	add r4,r4,r2
    251c:	2c 83 00 00 	lhu r3,(r4+0)
    2520:	01 62 00 11 	srui r2,r11,17
        z = ( ( a / z )<<14 ) + ( z<<15 );
        a >>= 1;
    2524:	01 61 00 01 	srui r1,r11,1
    int8 index;
    bits32 z;

    index = ( a>>27 ) & 15;
    if ( aExp & 1 ) {
        z = 0x4000 + ( a>>17 ) - sqrtOddAdjustments[ index ];
    2528:	34 42 40 00 	addi r2,r2,16384
    252c:	c8 43 10 00 	sub r2,r2,r3
        z = ( ( a / z )<<14 ) + ( z<<15 );
    2530:	8d 62 60 00 	divu r12,r11,r2
    2534:	3c 42 00 0f 	sli r2,r2,15
    2538:	3d 8c 00 0e 	sli r12,r12,14
    253c:	b5 82 60 00 	add r12,r12,r2
        z = 0x8000 + ( a>>17 ) - sqrtEvenAdjustments[ index ];
        z = a / z + z;
        z = ( 0x20000 <= z ) ? 0xFFFF8000 : ( z<<15 );
        if ( z <= a ) return (bits32) ( ( (sbits32) a )>>1 );
    }
    return ( ( estimateDiv64To32( a, 0, z ) )>>1 ) + ( z>>1 );
    2540:	b9 80 10 00 	mv r2,r12
    2544:	fb ff fc 71 	calli 1708 <estimateDiv64To32.clone.0>
    2548:	00 21 00 01 	srui r1,r1,1
    254c:	01 8c 00 01 	srui r12,r12,1
    2550:	b5 81 08 00 	add r1,r12,r1
    2554:	e3 ff ff d8 	bi 24b4 <float32_sqrt+0x12c>
    }
    zExp = ( ( aExp - 0x7F )>>1 ) + 0x7E;
    aSig = ( aSig | 0x00800000 )<<8;
    zSig = estimateSqrt32( aExp, aSig ) + 2;
    if ( ( zSig & 0x7F ) <= 5 ) {
        if ( zSig < 2 ) {
    2558:	78 05 00 00 	mvhi r5,0x0
    255c:	38 a5 2c 7c 	ori r5,r5,0x2c7c
    2560:	34 02 00 01 	mvi r2,1
    2564:	28 a3 00 00 	lw r3,(r5+0)
    2568:	50 41 ff da 	bgeu r2,r1,24d0 <float32_sqrt+0x148>
    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    256c:	00 23 00 10 	srui r3,r1,16

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    2570:	20 25 ff ff 	andi r5,r1,0xffff
    zMiddleA = ( (bits32) aLow ) * bHigh;
    2574:	88 65 30 00 	mul r6,r3,r5

    aLow = a;
    aHigh = a>>16;
    bLow = b;
    bHigh = b>>16;
    z1 = ( (bits32) aLow ) * bLow;
    2578:	88 a5 28 00 	mul r5,r5,r5
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    257c:	88 63 18 00 	mul r3,r3,r3
    zMiddleA += zMiddleB;
    2580:	3c c4 00 01 	sli r4,r6,1
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    zMiddleA <<= 16;
    2584:	3c c2 00 11 	sli r2,r6,17
            zSig = 0xFFFFFFFF;
        }
        else {
            aSig >>= aExp & 1;
    2588:	81 6d 58 00 	sru r11,r11,r13
    z1 += zMiddleA;
    258c:	b4 45 28 00 	add r5,r2,r5
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    2590:	00 88 00 10 	srui r8,r4,16
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    2594:	7c a7 00 00 	cmpnei r7,r5,0
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    2598:	f4 c4 20 00 	cmpgu r4,r6,r4
    259c:	c9 63 18 00 	sub r3,r11,r3
    zMiddleA <<= 16;
    z1 += zMiddleA;
    z0 += ( z1 < zMiddleA );
    25a0:	f4 45 10 00 	cmpgu r2,r2,r5
    z1 = ( (bits32) aLow ) * bLow;
    zMiddleA = ( (bits32) aLow ) * bHigh;
    zMiddleB = ( (bits32) aHigh ) * bLow;
    z0 = ( (bits32) aHigh ) * bHigh;
    zMiddleA += zMiddleB;
    z0 += ( ( (bits32) ( zMiddleA < zMiddleB ) )<<16 ) + ( zMiddleA>>16 );
    25a4:	c8 68 18 00 	sub r3,r3,r8
    25a8:	3c 84 00 10 	sli r4,r4,16
    zMiddleA <<= 16;
    z1 += zMiddleA;
    z0 += ( z1 < zMiddleA );
    25ac:	c8 67 18 00 	sub r3,r3,r7
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    25b0:	c8 62 18 00 	sub r3,r3,r2
INLINE void
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    25b4:	c8 05 28 00 	sub r5,r0,r5
    *z0Ptr = a0 - b0 - ( a1 < b1 );
    25b8:	c8 64 18 00 	sub r3,r3,r4
    25bc:	5b 8b 00 18 	sw (sp+24),r11
INLINE void
 sub64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1 - b1;
    25c0:	b8 a0 20 00 	mv r4,r5
            mul32To64( zSig, zSig, &term0, &term1 );
            sub64( aSig, 0, term0, term1, &rem0, &rem1 );
            while ( (sbits32) rem0 < 0 ) {
    25c4:	4c 60 00 0b 	bge r3,r0,25f0 <float32_sqrt+0x268>
                --zSig;
    25c8:	34 21 ff ff 	addi r1,r1,-1
INLINE void
 shortShift64Left(
     bits32 a0, bits32 a1, int16 count, bits32 *z0Ptr, bits32 *z1Ptr )
{

    *z1Ptr = a1<<count;
    25cc:	3c 24 00 01 	sli r4,r1,1
    *z0Ptr =
        ( count == 0 ) ? a0 : ( a0<<count ) | ( a1>>( ( - count ) & 31 ) );
    25d0:	00 27 00 1f 	srui r7,r1,31
                shortShift64Left( 0, zSig, 1, &term0, &term1 );
                term1 |= 1;
    25d4:	38 84 00 01 	ori r4,r4,0x1
 add64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{
    bits32 z1;

    z1 = a1 + b1;
    25d8:	b4 85 20 00 	add r4,r4,r5
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
    25dc:	f4 a4 30 00 	cmpgu r6,r5,r4
 add64(
     bits32 a0, bits32 a1, bits32 b0, bits32 b1, bits32 *z0Ptr, bits32 *z1Ptr )
{
    bits32 z1;

    z1 = a1 + b1;
    25e0:	b8 80 28 00 	mv r5,r4
    *z1Ptr = z1;
    *z0Ptr = a0 + b0 + ( z1 < a1 );
    25e4:	b4 e6 30 00 	add r6,r7,r6
    25e8:	b4 66 18 00 	add r3,r3,r6
        }
        else {
            aSig >>= aExp & 1;
            mul32To64( zSig, zSig, &term0, &term1 );
            sub64( aSig, 0, term0, term1, &rem0, &rem1 );
            while ( (sbits32) rem0 < 0 ) {
    25ec:	48 03 ff f7 	bg r0,r3,25c8 <float32_sqrt+0x240>
                --zSig;
                shortShift64Left( 0, zSig, 1, &term0, &term1 );
                term1 |= 1;
                add64( rem0, rem1, term0, term1, &rem0, &rem1 );
            }
            zSig |= ( ( rem0 | rem1 ) != 0 );
    25f0:	b8 64 18 00 	or r3,r3,r4
    25f4:	7c 63 00 00 	cmpnei r3,r3,0
    25f8:	b8 61 08 00 	or r1,r3,r1
    25fc:	e3 ff ff b2 	bi 24c4 <float32_sqrt+0x13c>

    aSig = extractFloat32Frac( a );
    aExp = extractFloat32Exp( a );
    aSign = extractFloat32Sign( a );
    if ( aExp == 0xFF ) {
        if ( aSig ) return propagateFloat32NaN( a, 0 );
    2600:	34 02 00 00 	mvi r2,0
    2604:	fb ff fa b5 	calli 10d8 <propagateFloat32NaN>
    2608:	b8 20 10 00 	mv r2,r1
    260c:	e3 ff ff 7a 	bi 23f4 <float32_sqrt+0x6c>

00002610 <float32_eq>:
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    2610:	00 24 00 17 	srui r4,r1,23
corresponding value `b', and 0 otherwise.  The comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_eq( float32 a, float32 b )
{
    2614:	b8 20 18 00 	mv r3,r1
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    2618:	20 84 00 ff 	andi r4,r4,0xff
-------------------------------------------------------------------------------
*/
flag float32_eq( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    261c:	34 01 00 ff 	mvi r1,255
    2620:	44 81 00 0b 	be r4,r1,264c <float32_eq+0x3c>
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    2624:	00 44 00 17 	srui r4,r2,23
*/
flag float32_eq( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    2628:	34 01 00 ff 	mvi r1,255
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    262c:	20 84 00 ff 	andi r4,r4,0xff
*/
flag float32_eq( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    2630:	44 81 00 16 	be r4,r1,2688 <float32_eq+0x78>
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );
    2634:	34 01 00 01 	mvi r1,1
    2638:	44 62 00 04 	be r3,r2,2648 <float32_eq+0x38>
    263c:	b8 43 08 00 	or r1,r2,r3
    2640:	3c 21 00 01 	sli r1,r1,1
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
       ) {
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    2644:	64 21 00 00 	cmpei r1,r1,0
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );

}
    2648:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    264c:	78 04 00 00 	mvhi r4,0x0
    2650:	38 84 2c 78 	ori r4,r4,0x2c78
    2654:	28 81 00 00 	lw r1,(r4+0)
    2658:	a0 61 08 00 	and r1,r3,r1
-------------------------------------------------------------------------------
*/
flag float32_eq( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    265c:	44 20 ff f2 	be r1,r0,2624 <float32_eq+0x14>
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    2660:	00 64 00 16 	srui r4,r3,22
    2664:	34 01 01 fe 	mvi r1,510
    2668:	20 84 01 ff 	andi r4,r4,0x1ff
    266c:	44 81 00 10 	be r4,r1,26ac <float32_eq+0x9c>
    2670:	00 43 00 16 	srui r3,r2,22
    2674:	34 01 01 fe 	mvi r1,510
    2678:	20 63 01 ff 	andi r3,r3,0x1ff
    267c:	44 61 00 18 	be r3,r1,26dc <float32_eq+0xcc>
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
       ) {
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    2680:	34 01 00 00 	mvi r1,0
    2684:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    2688:	78 04 00 00 	mvhi r4,0x0
    268c:	38 84 2c 78 	ori r4,r4,0x2c78
    2690:	28 81 00 00 	lw r1,(r4+0)
    2694:	a0 41 08 00 	and r1,r2,r1
*/
flag float32_eq( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    2698:	44 20 ff e7 	be r1,r0,2634 <float32_eq+0x24>
    269c:	00 64 00 16 	srui r4,r3,22
    26a0:	34 01 01 fe 	mvi r1,510
    26a4:	20 84 01 ff 	andi r4,r4,0x1ff
    26a8:	5c 81 ff f2 	bne r4,r1,2670 <float32_eq+0x60>
    26ac:	78 04 00 00 	mvhi r4,0x0
    26b0:	38 84 2c 70 	ori r4,r4,0x2c70
    26b4:	28 81 00 00 	lw r1,(r4+0)
    26b8:	a0 61 18 00 	and r3,r3,r1
    26bc:	44 60 ff ed 	be r3,r0,2670 <float32_eq+0x60>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    26c0:	78 02 00 00 	mvhi r2,0x0
    26c4:	38 42 31 0c 	ori r2,r2,0x310c
    26c8:	28 43 00 00 	lw r3,(r2+0)
       ) {
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    26cc:	34 01 00 00 	mvi r1,0
    26d0:	38 63 00 10 	ori r3,r3,0x10
    26d4:	58 43 00 00 	sw (r2+0),r3
    26d8:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    26dc:	78 04 00 00 	mvhi r4,0x0
    26e0:	38 84 2c 70 	ori r4,r4,0x2c70
    26e4:	28 83 00 00 	lw r3,(r4+0)
    26e8:	34 01 00 00 	mvi r1,0
    26ec:	a0 43 10 00 	and r2,r2,r3
    26f0:	44 40 ff d6 	be r2,r0,2648 <float32_eq+0x38>
    26f4:	e3 ff ff f3 	bi 26c0 <float32_eq+0xb0>

000026f8 <float32_le>:
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    26f8:	00 24 00 17 	srui r4,r1,23
performed according to the IEC/IEEE Standard for Binary Floating-point
Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_le( float32 a, float32 b )
{
    26fc:	b8 20 18 00 	mv r3,r1
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    2700:	20 84 00 ff 	andi r4,r4,0xff
*/
flag float32_le( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2704:	34 01 00 ff 	mvi r1,255
    2708:	44 81 00 13 	be r4,r1,2754 <float32_le+0x5c>
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    270c:	00 44 00 17 	srui r4,r2,23
flag float32_le( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    2710:	34 01 00 ff 	mvi r1,255
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    2714:	20 84 00 ff 	andi r4,r4,0xff
flag float32_le( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    2718:	44 81 00 1b 	be r4,r1,2784 <float32_le+0x8c>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    271c:	00 64 00 1f 	srui r4,r3,31
    2720:	00 41 00 1f 	srui r1,r2,31
        float_raise( float_flag_invalid );
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    2724:	44 81 00 07 	be r4,r1,2740 <float32_le+0x48>
    2728:	34 01 00 01 	mvi r1,1
    272c:	5c 80 00 09 	bne r4,r0,2750 <float32_le+0x58>
    2730:	b8 43 08 00 	or r1,r2,r3
    2734:	3c 21 00 01 	sli r1,r1,1

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
       ) {
        float_raise( float_flag_invalid );
        return 0;
    2738:	64 21 00 00 	cmpei r1,r1,0
    273c:	c3 a0 00 00 	ret
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );
    2740:	34 01 00 01 	mvi r1,1
    2744:	44 62 00 03 	be r3,r2,2750 <float32_le+0x58>
    2748:	f4 43 18 00 	cmpgu r3,r2,r3

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
       ) {
        float_raise( float_flag_invalid );
        return 0;
    274c:	fc 64 08 00 	cmpne r1,r3,r4
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );

}
    2750:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    2754:	78 04 00 00 	mvhi r4,0x0
    2758:	38 84 2c 78 	ori r4,r4,0x2c78
    275c:	28 81 00 00 	lw r1,(r4+0)
    2760:	a0 61 08 00 	and r1,r3,r1
*/
flag float32_le( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2764:	44 20 ff ea 	be r1,r0,270c <float32_le+0x14>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    2768:	78 02 00 00 	mvhi r2,0x0
    276c:	38 42 31 0c 	ori r2,r2,0x310c
    2770:	28 43 00 00 	lw r3,(r2+0)
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
       ) {
        float_raise( float_flag_invalid );
        return 0;
    2774:	34 01 00 00 	mvi r1,0
    2778:	38 63 00 10 	ori r3,r3,0x10
    277c:	58 43 00 00 	sw (r2+0),r3
    2780:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    2784:	78 04 00 00 	mvhi r4,0x0
    2788:	38 84 2c 78 	ori r4,r4,0x2c78
    278c:	28 81 00 00 	lw r1,(r4+0)
    2790:	a0 41 08 00 	and r1,r2,r1
flag float32_le( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    2794:	44 20 ff e2 	be r1,r0,271c <float32_le+0x24>
    2798:	e3 ff ff f4 	bi 2768 <float32_le+0x70>

0000279c <float32_lt>:
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    279c:	00 24 00 17 	srui r4,r1,23
the corresponding value `b', and 0 otherwise.  The comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt( float32 a, float32 b )
{
    27a0:	b8 20 18 00 	mv r3,r1
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    27a4:	20 84 00 ff 	andi r4,r4,0xff
*/
flag float32_lt( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    27a8:	34 01 00 ff 	mvi r1,255
    27ac:	44 81 00 13 	be r4,r1,27f8 <float32_lt+0x5c>
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    27b0:	00 44 00 17 	srui r4,r2,23
flag float32_lt( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    27b4:	34 01 00 ff 	mvi r1,255
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    27b8:	20 84 00 ff 	andi r4,r4,0xff
flag float32_lt( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    27bc:	44 81 00 1b 	be r4,r1,2828 <float32_lt+0x8c>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    27c0:	00 64 00 1f 	srui r4,r3,31
    27c4:	00 41 00 1f 	srui r1,r2,31
        float_raise( float_flag_invalid );
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    27c8:	44 81 00 07 	be r4,r1,27e4 <float32_lt+0x48>
    27cc:	34 01 00 00 	mvi r1,0
    27d0:	44 80 00 09 	be r4,r0,27f4 <float32_lt+0x58>
    27d4:	b8 43 08 00 	or r1,r2,r3
    27d8:	3c 21 00 01 	sli r1,r1,1
Returns 1 if the single-precision floating-point value `a' is less than
the corresponding value `b', and 0 otherwise.  The comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt( float32 a, float32 b )
    27dc:	7c 21 00 00 	cmpnei r1,r1,0
    27e0:	c3 a0 00 00 	ret
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    return ( a != b ) && ( aSign ^ ( a < b ) );
    27e4:	34 01 00 00 	mvi r1,0
    27e8:	44 62 00 03 	be r3,r2,27f4 <float32_lt+0x58>
    27ec:	f4 43 18 00 	cmpgu r3,r2,r3
Returns 1 if the single-precision floating-point value `a' is less than
the corresponding value `b', and 0 otherwise.  The comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt( float32 a, float32 b )
    27f0:	fc 64 08 00 	cmpne r1,r3,r4
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    return ( a != b ) && ( aSign ^ ( a < b ) );

}
    27f4:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    27f8:	78 04 00 00 	mvhi r4,0x0
    27fc:	38 84 2c 78 	ori r4,r4,0x2c78
    2800:	28 81 00 00 	lw r1,(r4+0)
    2804:	a0 61 08 00 	and r1,r3,r1
*/
flag float32_lt( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2808:	44 20 ff ea 	be r1,r0,27b0 <float32_lt+0x14>
    280c:	78 02 00 00 	mvhi r2,0x0
    2810:	38 42 31 0c 	ori r2,r2,0x310c
    2814:	28 43 00 00 	lw r3,(r2+0)
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
       ) {
        float_raise( float_flag_invalid );
        return 0;
    2818:	34 01 00 00 	mvi r1,0
    281c:	38 63 00 10 	ori r3,r3,0x10
    2820:	58 43 00 00 	sw (r2+0),r3
    2824:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    2828:	78 04 00 00 	mvhi r4,0x0
    282c:	38 84 2c 78 	ori r4,r4,0x2c78
    2830:	28 81 00 00 	lw r1,(r4+0)
    2834:	a0 41 08 00 	and r1,r2,r1
flag float32_lt( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    2838:	44 20 ff e2 	be r1,r0,27c0 <float32_lt+0x24>
    283c:	e3 ff ff f4 	bi 280c <float32_lt+0x70>

00002840 <float32_eq_signaling>:
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    2840:	00 24 00 17 	srui r4,r1,23
if either operand is a NaN.  Otherwise, the comparison is performed
according to the IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_eq_signaling( float32 a, float32 b )
{
    2844:	b8 20 18 00 	mv r3,r1
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    2848:	20 84 00 ff 	andi r4,r4,0xff
-------------------------------------------------------------------------------
*/
flag float32_eq_signaling( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    284c:	34 01 00 ff 	mvi r1,255
    2850:	44 81 00 0b 	be r4,r1,287c <float32_eq_signaling+0x3c>
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    2854:	00 44 00 17 	srui r4,r2,23
*/
flag float32_eq_signaling( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    2858:	34 01 00 ff 	mvi r1,255
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    285c:	20 84 00 ff 	andi r4,r4,0xff
*/
flag float32_eq_signaling( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    2860:	44 81 00 13 	be r4,r1,28ac <float32_eq_signaling+0x6c>
       ) {
        float_raise( float_flag_invalid );
        return 0;
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );
    2864:	34 01 00 01 	mvi r1,1
    2868:	44 62 00 04 	be r3,r2,2878 <float32_eq_signaling+0x38>
    286c:	b8 43 08 00 	or r1,r2,r3
    2870:	3c 21 00 01 	sli r1,r1,1

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
       ) {
        float_raise( float_flag_invalid );
        return 0;
    2874:	64 21 00 00 	cmpei r1,r1,0
    }
    return ( a == b ) || ( (bits32) ( ( a | b )<<1 ) == 0 );

}
    2878:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    287c:	78 04 00 00 	mvhi r4,0x0
    2880:	38 84 2c 78 	ori r4,r4,0x2c78
    2884:	28 81 00 00 	lw r1,(r4+0)
    2888:	a0 61 08 00 	and r1,r3,r1
-------------------------------------------------------------------------------
*/
flag float32_eq_signaling( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    288c:	44 20 ff f2 	be r1,r0,2854 <float32_eq_signaling+0x14>
    2890:	78 02 00 00 	mvhi r2,0x0
    2894:	38 42 31 0c 	ori r2,r2,0x310c
    2898:	28 43 00 00 	lw r3,(r2+0)
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
       ) {
        float_raise( float_flag_invalid );
        return 0;
    289c:	34 01 00 00 	mvi r1,0
    28a0:	38 63 00 10 	ori r3,r3,0x10
    28a4:	58 43 00 00 	sw (r2+0),r3
    28a8:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    28ac:	78 04 00 00 	mvhi r4,0x0
    28b0:	38 84 2c 78 	ori r4,r4,0x2c78
    28b4:	28 81 00 00 	lw r1,(r4+0)
    28b8:	a0 41 08 00 	and r1,r2,r1
*/
flag float32_eq_signaling( float32 a, float32 b )
{

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    28bc:	44 20 ff ea 	be r1,r0,2864 <float32_eq_signaling+0x24>
    28c0:	e3 ff ff f4 	bi 2890 <float32_eq_signaling+0x50>

000028c4 <float32_le_quiet>:
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    28c4:	00 24 00 17 	srui r4,r1,23
cause an exception.  Otherwise, the comparison is performed according to the
IEC/IEEE Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_le_quiet( float32 a, float32 b )
{
    28c8:	b8 20 18 00 	mv r3,r1
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    28cc:	20 84 00 ff 	andi r4,r4,0xff
*/
flag float32_le_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    28d0:	34 01 00 ff 	mvi r1,255
    28d4:	44 81 00 13 	be r4,r1,2920 <float32_le_quiet+0x5c>
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    28d8:	00 44 00 17 	srui r4,r2,23
flag float32_le_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    28dc:	34 01 00 ff 	mvi r1,255
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    28e0:	20 84 00 ff 	andi r4,r4,0xff
flag float32_le_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    28e4:	44 81 00 1e 	be r4,r1,295c <float32_le_quiet+0x98>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    28e8:	00 64 00 1f 	srui r4,r3,31
    28ec:	00 41 00 1f 	srui r1,r2,31
        }
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    28f0:	44 81 00 07 	be r4,r1,290c <float32_le_quiet+0x48>
    28f4:	34 01 00 01 	mvi r1,1
    28f8:	5c 80 00 09 	bne r4,r0,291c <float32_le_quiet+0x58>
    28fc:	b8 43 08 00 	or r1,r2,r3
    2900:	3c 21 00 01 	sli r1,r1,1
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
       ) {
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    2904:	64 21 00 00 	cmpei r1,r1,0
    2908:	c3 a0 00 00 	ret
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );
    290c:	34 01 00 01 	mvi r1,1
    2910:	44 62 00 03 	be r3,r2,291c <float32_le_quiet+0x58>
    2914:	f4 43 18 00 	cmpgu r3,r2,r3
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
       ) {
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    2918:	fc 64 08 00 	cmpne r1,r3,r4
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign || ( (bits32) ( ( a | b )<<1 ) == 0 );
    return ( a == b ) || ( aSign ^ ( a < b ) );

}
    291c:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    2920:	78 04 00 00 	mvhi r4,0x0
    2924:	38 84 2c 78 	ori r4,r4,0x2c78
    2928:	28 81 00 00 	lw r1,(r4+0)
    292c:	a0 61 08 00 	and r1,r3,r1
*/
flag float32_le_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2930:	44 20 ff ea 	be r1,r0,28d8 <float32_le_quiet+0x14>
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    2934:	00 64 00 16 	srui r4,r3,22
    2938:	34 01 01 fe 	mvi r1,510
    293c:	20 84 01 ff 	andi r4,r4,0x1ff
    2940:	44 81 00 10 	be r4,r1,2980 <float32_le_quiet+0xbc>
    2944:	00 43 00 16 	srui r3,r2,22
    2948:	34 01 01 fe 	mvi r1,510
    294c:	20 63 01 ff 	andi r3,r3,0x1ff
    2950:	44 61 00 18 	be r3,r1,29b0 <float32_le_quiet+0xec>
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
       ) {
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    2954:	34 01 00 00 	mvi r1,0
    2958:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    295c:	78 04 00 00 	mvhi r4,0x0
    2960:	38 84 2c 78 	ori r4,r4,0x2c78
    2964:	28 81 00 00 	lw r1,(r4+0)
    2968:	a0 41 08 00 	and r1,r2,r1
flag float32_le_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    296c:	44 20 ff df 	be r1,r0,28e8 <float32_le_quiet+0x24>
    2970:	00 64 00 16 	srui r4,r3,22
    2974:	34 01 01 fe 	mvi r1,510
    2978:	20 84 01 ff 	andi r4,r4,0x1ff
    297c:	5c 81 ff f2 	bne r4,r1,2944 <float32_le_quiet+0x80>
    2980:	78 04 00 00 	mvhi r4,0x0
    2984:	38 84 2c 70 	ori r4,r4,0x2c70
    2988:	28 81 00 00 	lw r1,(r4+0)
    298c:	a0 61 18 00 	and r3,r3,r1
    2990:	44 60 ff ed 	be r3,r0,2944 <float32_le_quiet+0x80>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    2994:	78 02 00 00 	mvhi r2,0x0
    2998:	38 42 31 0c 	ori r2,r2,0x310c
    299c:	28 43 00 00 	lw r3,(r2+0)
       ) {
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    29a0:	34 01 00 00 	mvi r1,0
    29a4:	38 63 00 10 	ori r3,r3,0x10
    29a8:	58 43 00 00 	sw (r2+0),r3
    29ac:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    29b0:	78 04 00 00 	mvhi r4,0x0
    29b4:	38 84 2c 70 	ori r4,r4,0x2c70
    29b8:	28 83 00 00 	lw r3,(r4+0)
    29bc:	34 01 00 00 	mvi r1,0
    29c0:	a0 43 10 00 	and r2,r2,r3
    29c4:	44 40 ff d6 	be r2,r0,291c <float32_le_quiet+0x58>
    29c8:	e3 ff ff f3 	bi 2994 <float32_le_quiet+0xd0>

000029cc <float32_lt_quiet>:
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    29cc:	00 24 00 17 	srui r4,r1,23
exception.  Otherwise, the comparison is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt_quiet( float32 a, float32 b )
{
    29d0:	b8 20 18 00 	mv r3,r1
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    29d4:	20 84 00 ff 	andi r4,r4,0xff
*/
flag float32_lt_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    29d8:	34 01 00 ff 	mvi r1,255
    29dc:	44 81 00 13 	be r4,r1,2a28 <float32_lt_quiet+0x5c>
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    29e0:	00 44 00 17 	srui r4,r2,23
flag float32_lt_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    29e4:	34 01 00 ff 	mvi r1,255
-------------------------------------------------------------------------------
*/
INLINE int16 extractFloat32Exp( float32 a )
{

    return ( a>>23 ) & 0xFF;
    29e8:	20 84 00 ff 	andi r4,r4,0xff
flag float32_lt_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    29ec:	44 81 00 1e 	be r4,r1,2a64 <float32_lt_quiet+0x98>
-------------------------------------------------------------------------------
*/
INLINE flag extractFloat32Sign( float32 a )
{

    return a>>31;
    29f0:	00 64 00 1f 	srui r4,r3,31
    29f4:	00 41 00 1f 	srui r1,r2,31
        }
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    29f8:	44 81 00 07 	be r4,r1,2a14 <float32_lt_quiet+0x48>
    29fc:	34 01 00 00 	mvi r1,0
    2a00:	44 80 00 09 	be r4,r0,2a24 <float32_lt_quiet+0x58>
    2a04:	b8 43 08 00 	or r1,r2,r3
    2a08:	3c 21 00 01 	sli r1,r1,1
the corresponding value `b', and 0 otherwise.  Quiet NaNs do not cause an
exception.  Otherwise, the comparison is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt_quiet( float32 a, float32 b )
    2a0c:	7c 21 00 00 	cmpnei r1,r1,0
    2a10:	c3 a0 00 00 	ret
        return 0;
    }
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    return ( a != b ) && ( aSign ^ ( a < b ) );
    2a14:	34 01 00 00 	mvi r1,0
    2a18:	44 62 00 03 	be r3,r2,2a24 <float32_lt_quiet+0x58>
    2a1c:	f4 43 18 00 	cmpgu r3,r2,r3
the corresponding value `b', and 0 otherwise.  Quiet NaNs do not cause an
exception.  Otherwise, the comparison is performed according to the IEC/IEEE
Standard for Binary Floating-point Arithmetic.
-------------------------------------------------------------------------------
*/
flag float32_lt_quiet( float32 a, float32 b )
    2a20:	fc 64 08 00 	cmpne r1,r3,r4
    aSign = extractFloat32Sign( a );
    bSign = extractFloat32Sign( b );
    if ( aSign != bSign ) return aSign && ( (bits32) ( ( a | b )<<1 ) != 0 );
    return ( a != b ) && ( aSign ^ ( a < b ) );

}
    2a24:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    2a28:	78 04 00 00 	mvhi r4,0x0
    2a2c:	38 84 2c 78 	ori r4,r4,0x2c78
    2a30:	28 81 00 00 	lw r1,(r4+0)
    2a34:	a0 61 08 00 	and r1,r3,r1
*/
flag float32_lt_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
    2a38:	44 20 ff ea 	be r1,r0,29e0 <float32_lt_quiet+0x14>
    2a3c:	00 64 00 16 	srui r4,r3,22
    2a40:	34 01 01 fe 	mvi r1,510
    2a44:	20 84 01 ff 	andi r4,r4,0x1ff
    2a48:	44 81 00 10 	be r4,r1,2a88 <float32_lt_quiet+0xbc>
    2a4c:	00 43 00 16 	srui r3,r2,22
    2a50:	34 01 01 fe 	mvi r1,510
    2a54:	20 63 01 ff 	andi r3,r3,0x1ff
    2a58:	44 61 00 18 	be r3,r1,2ab8 <float32_lt_quiet+0xec>
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
       ) {
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    2a5c:	34 01 00 00 	mvi r1,0
    2a60:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
INLINE bits32 extractFloat32Frac( float32 a )
{

    return a & 0x007FFFFF;
    2a64:	78 04 00 00 	mvhi r4,0x0
    2a68:	38 84 2c 78 	ori r4,r4,0x2c78
    2a6c:	28 81 00 00 	lw r1,(r4+0)
    2a70:	a0 41 08 00 	and r1,r2,r1
flag float32_lt_quiet( float32 a, float32 b )
{
    flag aSign, bSign;

    if (    ( ( extractFloat32Exp( a ) == 0xFF ) && extractFloat32Frac( a ) )
         || ( ( extractFloat32Exp( b ) == 0xFF ) && extractFloat32Frac( b ) )
    2a74:	44 20 ff df 	be r1,r0,29f0 <float32_lt_quiet+0x24>
    2a78:	00 64 00 16 	srui r4,r3,22
    2a7c:	34 01 01 fe 	mvi r1,510
    2a80:	20 84 01 ff 	andi r4,r4,0x1ff
    2a84:	5c 81 ff f2 	bne r4,r1,2a4c <float32_lt_quiet+0x80>
    2a88:	78 04 00 00 	mvhi r4,0x0
    2a8c:	38 84 2c 70 	ori r4,r4,0x2c70
    2a90:	28 81 00 00 	lw r1,(r4+0)
    2a94:	a0 61 18 00 	and r3,r3,r1
    2a98:	44 60 ff ed 	be r3,r0,2a4c <float32_lt_quiet+0x80>
-------------------------------------------------------------------------------
*/
void float_raise( int8 flags )
{

    float_exception_flags |= flags;
    2a9c:	78 02 00 00 	mvhi r2,0x0
    2aa0:	38 42 31 0c 	ori r2,r2,0x310c
    2aa4:	28 43 00 00 	lw r3,(r2+0)
       ) {
        if ( float32_is_signaling_nan( a ) || float32_is_signaling_nan( b ) ) {
            float_raise( float_flag_invalid );
        }
        return 0;
    2aa8:	34 01 00 00 	mvi r1,0
    2aac:	38 63 00 10 	ori r3,r3,0x10
    2ab0:	58 43 00 00 	sw (r2+0),r3
    2ab4:	c3 a0 00 00 	ret
-------------------------------------------------------------------------------
*/
flag float32_is_signaling_nan( float32 a )
{

    return ( ( ( a>>22 ) & 0x1FF ) == 0x1FE ) && ( a & 0x003FFFFF );
    2ab8:	78 04 00 00 	mvhi r4,0x0
    2abc:	38 84 2c 70 	ori r4,r4,0x2c70
    2ac0:	28 83 00 00 	lw r3,(r4+0)
    2ac4:	34 01 00 00 	mvi r1,0
    2ac8:	a0 43 10 00 	and r2,r2,r3
    2acc:	44 40 ff d6 	be r2,r0,2a24 <float32_lt_quiet+0x58>
    2ad0:	e3 ff ff f3 	bi 2a9c <float32_lt_quiet+0xd0>

00002ad4 <float32_abs>:
-------------------------------------------------------------------------------
This is an abs function
-------------------------------------------------------------------------------
*/
float32 float32_abs(float32 a)
{
    2ad4:	37 9c ff fc 	addi sp,sp,-4
    2ad8:	5b 9d 00 04 	sw (sp+4),ra
    2adc:	b8 20 10 00 	mv r2,r1
	if ( extractFloat32Sign( a )){
    2ae0:	4c 20 00 04 	bge r1,r0,2af0 <float32_abs+0x1c>
	return float32_mul( a, 0xBF800000 ) ;
    2ae4:	78 02 bf 80 	mvhi r2,0xbf80
    2ae8:	fb ff fc 6c 	calli 1c98 <float32_mul>
    2aec:	b8 20 10 00 	mv r2,r1
	}
	else {
	return a;
	}
}
    2af0:	b8 40 08 00 	mv r1,r2
    2af4:	2b 9d 00 04 	lw ra,(sp+4)
    2af8:	37 9c 00 04 	addi sp,sp,4
    2afc:	c3 a0 00 00 	ret

00002b00 <float32_artan>:
This is an approximation of an arctan function, for values in the range [-1,1] 
Pi_4=0x3F490FD8,0.2447=0x3E7A92A3 , 0.0663=0x3D87C84B
-------------------------------------------------------------------------------
*/
float32 float32_artan( float32 a)
{
    2b00:	37 9c ff f0 	addi sp,sp,-16
    2b04:	5b 8b 00 10 	sw (sp+16),r11
    2b08:	5b 8c 00 0c 	sw (sp+12),r12
    2b0c:	5b 8d 00 08 	sw (sp+8),r13
    2b10:	5b 9d 00 04 	sw (sp+4),ra
	float32 b = float32_mul(0x3F490FD8,a);
    2b14:	78 02 00 00 	mvhi r2,0x0
    2b18:	38 42 2c 84 	ori r2,r2,0x2c84
This is an approximation of an arctan function, for values in the range [-1,1] 
Pi_4=0x3F490FD8,0.2447=0x3E7A92A3 , 0.0663=0x3D87C84B
-------------------------------------------------------------------------------
*/
float32 float32_artan( float32 a)
{
    2b1c:	b8 20 58 00 	mv r11,r1
	float32 b = float32_mul(0x3F490FD8,a);
    2b20:	28 41 00 00 	lw r1,(r2+0)
    2b24:	b9 60 10 00 	mv r2,r11
    2b28:	fb ff fc 5c 	calli 1c98 <float32_mul>
    2b2c:	b8 20 60 00 	mv r12,r1
	float32 i = float32_abs(a);
    2b30:	b9 60 08 00 	mv r1,r11
    2b34:	fb ff ff e8 	calli 2ad4 <float32_abs>
	float32 c = float32_add(i,0xBF800000);
    2b38:	78 02 bf 80 	mvhi r2,0xbf80
-------------------------------------------------------------------------------
*/
float32 float32_artan( float32 a)
{
	float32 b = float32_mul(0x3F490FD8,a);
	float32 i = float32_abs(a);
    2b3c:	b8 20 68 00 	mv r13,r1
	float32 c = float32_add(i,0xBF800000);
    2b40:	fb ff fc 3c 	calli 1c30 <float32_add>
    2b44:	b8 20 10 00 	mv r2,r1
	float32 d = float32_mul(a,c);
    2b48:	b9 60 08 00 	mv r1,r11
    2b4c:	fb ff fc 53 	calli 1c98 <float32_mul>
	float32 e = float32_mul(i,0x3D87C84B);
    2b50:	78 03 00 00 	mvhi r3,0x0
    2b54:	38 63 2c 88 	ori r3,r3,0x2c88
    2b58:	28 62 00 00 	lw r2,(r3+0)
float32 float32_artan( float32 a)
{
	float32 b = float32_mul(0x3F490FD8,a);
	float32 i = float32_abs(a);
	float32 c = float32_add(i,0xBF800000);
	float32 d = float32_mul(a,c);
    2b5c:	b8 20 58 00 	mv r11,r1
	float32 e = float32_mul(i,0x3D87C84B);
    2b60:	b9 a0 08 00 	mv r1,r13
    2b64:	fb ff fc 4d 	calli 1c98 <float32_mul>
	float32 f = float32_add(0x3E7A92A3,e);
    2b68:	78 03 00 00 	mvhi r3,0x0
    2b6c:	38 63 2c 8c 	ori r3,r3,0x2c8c
{
	float32 b = float32_mul(0x3F490FD8,a);
	float32 i = float32_abs(a);
	float32 c = float32_add(i,0xBF800000);
	float32 d = float32_mul(a,c);
	float32 e = float32_mul(i,0x3D87C84B);
    2b70:	b8 20 10 00 	mv r2,r1
	float32 f = float32_add(0x3E7A92A3,e);
    2b74:	28 61 00 00 	lw r1,(r3+0)
    2b78:	fb ff fc 2e 	calli 1c30 <float32_add>
	float32 g = float32_mul(f,d);
    2b7c:	b9 60 10 00 	mv r2,r11
    2b80:	fb ff fc 46 	calli 1c98 <float32_mul>
    2b84:	b8 20 10 00 	mv r2,r1
	//float32 j = float32_mul(g,0xBF800000);
	float32 h = float32_sub(b,g);
    2b88:	b9 80 08 00 	mv r1,r12
    2b8c:	fb ff fc 36 	calli 1c64 <float32_sub>
	return h;
}
    2b90:	2b 9d 00 04 	lw ra,(sp+4)
    2b94:	2b 8b 00 10 	lw r11,(sp+16)
    2b98:	2b 8c 00 0c 	lw r12,(sp+12)
    2b9c:	2b 8d 00 08 	lw r13,(sp+8)
    2ba0:	37 9c 00 10 	addi sp,sp,16
    2ba4:	c3 a0 00 00 	ret

00002ba8 <float32_pow2>:
-------------------------------------------------------------------------------
This is the square function
-------------------------------------------------------------------------------
*/
float32 float32_pow2( float32 a)
{
    2ba8:	37 9c ff fc 	addi sp,sp,-4
    2bac:	5b 9d 00 04 	sw (sp+4),ra
	return float32_mul(a,a);
    2bb0:	b8 20 10 00 	mv r2,r1
    2bb4:	fb ff fc 39 	calli 1c98 <float32_mul>
}
    2bb8:	2b 9d 00 04 	lw ra,(sp+4)
    2bbc:	37 9c 00 04 	addi sp,sp,4
    2bc0:	c3 a0 00 00 	ret
