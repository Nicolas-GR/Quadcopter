
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         00000a48  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000018  00000a48  00000a48  00000a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00000a60  00000a60  00000ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000578  00000a78  00000a78  00000acc  2**2
                  ALLOC
  4 .debug_abbrev 00000380  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009d1  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000008f8  00000000  00000000  0000181d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000230  00000000  00000000  00002118  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000002b9  00000000  00000000  00002348  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 00000096  00000000  00000000  00002601  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000060  00000000  00000000  00002697  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030e  00000000  00000000  000026f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  00002a05  2**0
                  CONTENTS, READONLY
 13 .debug_loc    00000338  00000000  00000000  00002a16  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  00002d4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 85 	calli 2e0 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 1f fc 	ori sp,sp,0x1ffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 0a 80 	ori gp,gp,0xa80
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 0a 78 	ori r1,r1,0xa78
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0f f0 	ori r3,r3,0xff0

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
//void buffertec_uartsend(uint32_t size);
void buffertec_clear();


int main()
{
 208:	37 9c ff fc 	addi sp,sp,-4
 20c:	5b 9d 00 04 	sw (sp+4),ra
	uart_putstr0("Hola ");
 210:	78 01 00 00 	mvhi r1,0x0
 214:	38 21 0a 48 	ori r1,r1,0xa48
 218:	f8 00 00 bc 	calli 508 <uart_putstr0>
  msleep(4000);
 21c:	34 01 0f a0 	mvi r1,4000
 220:	f8 00 00 60 	calli 3a0 <msleep>
  uart_putstr0("Pasaron 4s");
 224:	78 01 00 00 	mvhi r1,0x0
 228:	38 21 0a 50 	ori r1,r1,0xa50
 22c:	f8 00 00 b7 	calli 508 <uart_putstr0>

	uint32_t bytes;

		resetcommand(1); 
 230:	34 01 00 01 	mvi r1,1
 234:	f8 00 01 2f 	calli 6f0 <resetcommand>
    imagesize(1);
 238:	34 01 00 01 	mvi r1,1
 23c:	f8 00 01 e3 	calli 9c8 <imagesize>
    getversioncommand(1);
 240:	34 01 00 01 	mvi r1,1
 244:	f8 00 01 40 	calli 744 <getversioncommand>
		takephotocommand(1);
 248:	34 01 00 01 	mvi r1,1
 24c:	f8 00 01 53 	calli 798 <takephotocommand>
		bytes=getbufflencommand();
 250:	f8 00 01 69 	calli 7f4 <getbufflencommand>
		readphotocommand(bytes);
 254:	f8 00 01 84 	calli 864 <readphotocommand>
		}
*/
		
		//LCD
		//lcd_putchar(buffertec[0]);
   }
 258:	2b 9d 00 04 	lw ra,(sp+4)
 25c:	37 9c 00 04 	addi sp,sp,4
 260:	c3 a0 00 00 	ret

00000264 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 264:	c3 a0 00 00 	ret

00000268 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 268:	78 01 00 00 	mvhi r1,0x0
 26c:	38 21 0b e8 	ori r1,r1,0xbe8
 270:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 274:	78 02 00 00 	mvhi r2,0x0
 278:	38 42 0a 64 	ori r2,r2,0xa64
 27c:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 280:	34 63 00 01 	addi r3,r3,1
 284:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 288:	34 01 00 0e 	mvi r1,14
 28c:	58 41 00 00 	sw (r2+0),r1
}
 290:	c3 a0 00 00 	ret

00000294 <prueba>:

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 294:	78 02 00 00 	mvhi r2,0x0
 298:	38 42 0a 60 	ori r2,r2,0xa60
	   uart1->rxtx=30;
 29c:	78 01 00 00 	mvhi r1,0x0

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 2a0:	28 45 00 00 	lw r5,(r2+0)
	   uart1->rxtx=30;
 2a4:	38 21 0a 6c 	ori r1,r1,0xa6c
	   timer0->tcr0 = 0xAA;
 2a8:	78 03 00 00 	mvhi r3,0x0
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
	   uart1->rxtx=30;
 2ac:	28 24 00 00 	lw r4,(r1+0)
	   timer0->tcr0 = 0xAA;
 2b0:	38 63 0a 64 	ori r3,r3,0xa64
	   uart2->rxtx=30;
 2b4:	78 02 00 00 	mvhi r2,0x0

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 2b8:	34 01 00 1e 	mvi r1,30
	   uart1->rxtx=30;
	   timer0->tcr0 = 0xAA;
 2bc:	28 63 00 00 	lw r3,(r3+0)
	   uart2->rxtx=30;
 2c0:	38 42 0a 74 	ori r2,r2,0xa74

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 2c4:	58 a1 00 04 	sw (r5+4),r1
	   uart1->rxtx=30;
	   timer0->tcr0 = 0xAA;
	   uart2->rxtx=30;
 2c8:	28 42 00 00 	lw r2,(r2+0)
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
	   uart1->rxtx=30;
 2cc:	58 81 00 04 	sw (r4+4),r1
	   timer0->tcr0 = 0xAA;
 2d0:	34 04 00 aa 	mvi r4,170
 2d4:	58 64 00 00 	sw (r3+0),r4
	   uart2->rxtx=30;
 2d8:	58 41 00 04 	sw (r2+4),r1
	

}
 2dc:	c3 a0 00 00 	ret

000002e0 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 2e0:	37 9c ff f0 	addi sp,sp,-16
 2e4:	5b 8b 00 10 	sw (sp+16),r11
 2e8:	5b 8c 00 0c 	sw (sp+12),r12
 2ec:	5b 8d 00 08 	sw (sp+8),r13
 2f0:	5b 9d 00 04 	sw (sp+4),ra
 2f4:	78 0b 00 00 	mvhi r11,0x0
 2f8:	39 6b 0b 68 	ori r11,r11,0xb68
 2fc:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 300:	35 6d 00 80 	addi r13,r11,128
 304:	e0 00 00 04 	bi 314 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 308:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 30c:	45 6d 00 08 	be r11,r13,32c <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 310:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 314:	21 81 00 01 	andi r1,r12,0x1
 318:	44 20 ff fc 	be r1,r0,308 <irq_handler+0x28>
 31c:	29 61 00 00 	lw r1,(r11+0)
 320:	35 6b 00 04 	addi r11,r11,4
 324:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 328:	5d 6d ff fa 	bne r11,r13,310 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 32c:	2b 9d 00 04 	lw ra,(sp+4)
 330:	2b 8b 00 10 	lw r11,(sp+16)
 334:	2b 8c 00 0c 	lw r12,(sp+12)
 338:	2b 8d 00 08 	lw r13,(sp+8)
 33c:	37 9c 00 10 	addi sp,sp,16
 340:	c3 a0 00 00 	ret

00000344 <isr_init>:

void isr_init()
{
 344:	78 01 00 00 	mvhi r1,0x0
 348:	78 02 00 00 	mvhi r2,0x0
 34c:	38 21 0b 68 	ori r1,r1,0xb68
 350:	38 42 02 64 	ori r2,r2,0x264
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 354:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 358:	58 22 00 00 	sw (r1+0),r2
 35c:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 360:	5c 23 ff fe 	bne r1,r3,358 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 364:	c3 a0 00 00 	ret

00000368 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 368:	78 03 00 00 	mvhi r3,0x0
 36c:	3c 21 00 02 	sli r1,r1,2
 370:	38 63 0b 68 	ori r3,r3,0xb68
 374:	b4 61 18 00 	add r3,r3,r1
 378:	58 62 00 00 	sw (r3+0),r2
}
 37c:	c3 a0 00 00 	ret

00000380 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 380:	78 03 00 00 	mvhi r3,0x0
 384:	3c 21 00 02 	sli r1,r1,2
 388:	38 63 0b 68 	ori r3,r3,0xb68
 38c:	78 02 00 00 	mvhi r2,0x0
 390:	b4 61 18 00 	add r3,r3,r1
 394:	38 42 02 64 	ori r2,r2,0x264
 398:	58 62 00 00 	sw (r3+0),r2
}
 39c:	c3 a0 00 00 	ret

000003a0 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 3a0:	78 04 00 00 	mvhi r4,0x0
 3a4:	38 84 0a 5c 	ori r4,r4,0xa5c
 3a8:	28 83 00 00 	lw r3,(r4+0)
 3ac:	78 02 00 00 	mvhi r2,0x0
 3b0:	38 42 0a 64 	ori r2,r2,0xa64
 3b4:	28 42 00 00 	lw r2,(r2+0)
 3b8:	88 23 08 00 	mul r1,r1,r3
 3bc:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3c0:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 3c4:	34 01 00 08 	mvi r1,8
 3c8:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 3cc:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 3d0:	20 21 00 01 	andi r1,r1,0x1
 3d4:	44 20 ff fe 	be r1,r0,3cc <msleep+0x2c>
}
 3d8:	c3 a0 00 00 	ret

000003dc <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 3dc:	78 02 00 00 	mvhi r2,0x0
 3e0:	38 42 0a 64 	ori r2,r2,0xa64
 3e4:	28 42 00 00 	lw r2,(r2+0)
 3e8:	08 21 00 64 	muli r1,r1,100
 3ec:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3f0:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 3f4:	34 01 00 08 	mvi r1,8
 3f8:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 3fc:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 400:	20 21 00 01 	andi r1,r1,0x1
 404:	44 20 ff fe 	be r1,r0,3fc <nsleep+0x20>
}
 408:	c3 a0 00 00 	ret

0000040c <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 40c:	78 01 00 00 	mvhi r1,0x0
 410:	38 21 0a 64 	ori r1,r1,0xa64
 414:	28 23 00 00 	lw r3,(r1+0)
 418:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 41c:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 420:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 424:	38 21 0b e8 	ori r1,r1,0xbe8

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 428:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 42c:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 430:	78 02 00 00 	mvhi r2,0x0
 434:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 438:	34 04 00 0e 	mvi r4,14
 43c:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 440:	38 21 0b 68 	ori r1,r1,0xb68
 444:	38 42 02 68 	ori r2,r2,0x268
 448:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 44c:	c3 a0 00 00 	ret

00000450 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 450:	c3 a0 00 00 	ret

00000454 <uart_getchar1>:

char uart_getchar1()
{   
 454:	78 01 00 00 	mvhi r1,0x0
 458:	38 21 0a 6c 	ori r1,r1,0xa6c
 45c:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;
 460:	28 41 00 00 	lw r1,(r2+0)
 464:	20 21 00 01 	andi r1,r1,0x1
 468:	44 20 ff fe 	be r1,r0,460 <uart_getchar1+0xc>
	return uart1->rxtx;
 46c:	28 41 00 04 	lw r1,(r2+4)
}
 470:	20 21 00 ff 	andi r1,r1,0xff
 474:	c3 a0 00 00 	ret

00000478 <uart_getchar0>:
char uart_getchar0()
{   
 478:	78 01 00 00 	mvhi r1,0x0
 47c:	38 21 0a 60 	ori r1,r1,0xa60
 480:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 484:	28 41 00 00 	lw r1,(r2+0)
 488:	20 21 00 01 	andi r1,r1,0x1
 48c:	44 20 ff fe 	be r1,r0,484 <uart_getchar0+0xc>
	return uart0->rxtx;
 490:	28 41 00 04 	lw r1,(r2+4)
}
 494:	20 21 00 ff 	andi r1,r1,0xff
 498:	c3 a0 00 00 	ret

0000049c <uart_getchar2>:

char uart_getchar2()
{   
 49c:	78 01 00 00 	mvhi r1,0x0
 4a0:	38 21 0a 74 	ori r1,r1,0xa74
 4a4:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart2->ucr & UART_DR)) ;
 4a8:	28 41 00 00 	lw r1,(r2+0)
 4ac:	20 21 00 01 	andi r1,r1,0x1
 4b0:	44 20 ff fe 	be r1,r0,4a8 <uart_getchar2+0xc>
	return uart2->rxtx;
 4b4:	28 41 00 04 	lw r1,(r2+4)
}
 4b8:	20 21 00 ff 	andi r1,r1,0xff
 4bc:	c3 a0 00 00 	ret

000004c0 <uart_putchar0>:
void uart_putchar0(char c)
{
 4c0:	78 02 00 00 	mvhi r2,0x0
 4c4:	38 42 0a 60 	ori r2,r2,0xa60
 4c8:	28 43 00 00 	lw r3,(r2+0)
 4cc:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 4d0:	28 62 00 00 	lw r2,(r3+0)
 4d4:	20 42 00 10 	andi r2,r2,0x10
 4d8:	5c 40 ff fe 	bne r2,r0,4d0 <uart_putchar0+0x10>
	uart0->rxtx = c;
 4dc:	58 61 00 04 	sw (r3+4),r1
}
 4e0:	c3 a0 00 00 	ret

000004e4 <uart_putchar1>:
void uart_putchar1(char c)
{
 4e4:	78 02 00 00 	mvhi r2,0x0
 4e8:	38 42 0a 6c 	ori r2,r2,0xa6c
 4ec:	28 43 00 00 	lw r3,(r2+0)
 4f0:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
 4f4:	28 62 00 00 	lw r2,(r3+0)
 4f8:	20 42 00 10 	andi r2,r2,0x10
 4fc:	5c 40 ff fe 	bne r2,r0,4f4 <uart_putchar1+0x10>
	uart1->rxtx = c;
 500:	58 61 00 04 	sw (r3+4),r1
}
 504:	c3 a0 00 00 	ret

00000508 <uart_putstr0>:

void uart_putstr0(char *str)
{
	char *c = str;
	while(*c) {
 508:	40 24 00 00 	lbu r4,(r1+0)
 50c:	44 80 00 0b 	be r4,r0,538 <uart_putstr0+0x30>
 510:	78 02 00 00 	mvhi r2,0x0
 514:	38 42 0a 60 	ori r2,r2,0xa60
 518:	28 43 00 00 	lw r3,(r2+0)
	while (! (uart2->ucr & UART_DR)) ;
	return uart2->rxtx;
}
void uart_putchar0(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 51c:	28 62 00 00 	lw r2,(r3+0)
 520:	20 42 00 10 	andi r2,r2,0x10
 524:	5c 40 ff fe 	bne r2,r0,51c <uart_putstr0+0x14>
	uart0->rxtx = c;
 528:	58 64 00 04 	sw (r3+4),r4
void uart_putstr0(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar0(*c);
		c++;
 52c:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr0(char *str)
{
	char *c = str;
	while(*c) {
 530:	40 24 00 00 	lbu r4,(r1+0)
 534:	5c 82 ff fa 	bne r4,r2,51c <uart_putstr0+0x14>
 538:	c3 a0 00 00 	ret

0000053c <uart_putstr1>:
}

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 53c:	40 24 00 00 	lbu r4,(r1+0)
 540:	44 80 00 0b 	be r4,r0,56c <uart_putstr1+0x30>
 544:	78 02 00 00 	mvhi r2,0x0
 548:	38 42 0a 6c 	ori r2,r2,0xa6c
 54c:	28 43 00 00 	lw r3,(r2+0)
	while (uart0->ucr & UART_BUSY) ;
	uart0->rxtx = c;
}
void uart_putchar1(char c)
{
	while (uart1->ucr & UART_BUSY) ;
 550:	28 62 00 00 	lw r2,(r3+0)
 554:	20 42 00 10 	andi r2,r2,0x10
 558:	5c 40 ff fe 	bne r2,r0,550 <uart_putstr1+0x14>
	uart1->rxtx = c;
 55c:	58 64 00 04 	sw (r3+4),r4
void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar1(*c);
		c++;
 560:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 564:	40 24 00 00 	lbu r4,(r1+0)
 568:	5c 82 ff fa 	bne r4,r2,550 <uart_putstr1+0x14>
 56c:	c3 a0 00 00 	ret

00000570 <uart_putchar2>:
		uart_putchar1(*c);
		c++;
	}
}
void uart_putchar2(char c)
{
 570:	78 02 00 00 	mvhi r2,0x0
 574:	38 42 0a 74 	ori r2,r2,0xa74
 578:	28 43 00 00 	lw r3,(r2+0)
 57c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart2->ucr & UART_BUSY) ;
 580:	28 62 00 00 	lw r2,(r3+0)
 584:	20 42 00 10 	andi r2,r2,0x10
 588:	5c 40 ff fe 	bne r2,r0,580 <uart_putchar2+0x10>
	uart2->rxtx = c;
 58c:	58 61 00 04 	sw (r3+4),r1
}
 590:	c3 a0 00 00 	ret

00000594 <lcd_putchar>:

/***************************************************************************
 * LCD Functions
 */
void lcd_putchar(char c)
{
 594:	78 02 00 00 	mvhi r2,0x0
 598:	38 42 0a 70 	ori r2,r2,0xa70
 59c:	28 43 00 00 	lw r3,(r2+0)
 5a0:	20 21 00 ff 	andi r1,r1,0xff
	while (!(lcd0->RS));
 5a4:	28 62 00 04 	lw r2,(r3+4)
 5a8:	44 40 ff ff 	be r2,r0,5a4 <lcd_putchar+0x10>
	lcd0->in_lcd = c;
 5ac:	58 61 00 00 	sw (r3+0),r1
}
 5b0:	c3 a0 00 00 	ret

000005b4 <read_number>:


/***************************************************************************
 * KEY Functions
 */
uint32_t read_number(){
 5b4:	78 01 00 00 	mvhi r1,0x0
 5b8:	38 21 0a 68 	ori r1,r1,0xa68
 5bc:	28 22 00 00 	lw r2,(r1+0)
	while (!(key0->key_av));
 5c0:	28 41 00 04 	lw r1,(r2+4)
 5c4:	44 20 ff ff 	be r1,r0,5c0 <read_number+0xc>
	return key0->code;
 5c8:	28 41 00 00 	lw r1,(r2+0)
}
 5cc:	c3 a0 00 00 	ret

000005d0 <buffercam_clear>:
int l;

//==================================================================

void buffercam_clear()
{
 5d0:	78 01 00 00 	mvhi r1,0x0
 5d4:	38 21 0b f0 	ori r1,r1,0xbf0
int buffercam[SIZE_BUFFCAM];
int l;

//==================================================================

void buffercam_clear()
 5d8:	34 22 04 00 	addi r2,r1,1024
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
    	buffercam[i]=0;
 5dc:	58 20 00 00 	sw (r1+0),r0
 5e0:	34 21 00 04 	addi r1,r1,4
//==================================================================

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
 5e4:	5c 22 ff fe 	bne r1,r2,5dc <buffercam_clear+0xc>
    	buffercam[i]=0;

}
 5e8:	c3 a0 00 00 	ret

000005ec <buffercam_upload>:

//==================================================================

void buffercam_upload(uint32_t size)
{
 5ec:	37 9c ff f0 	addi sp,sp,-16
 5f0:	5b 8b 00 10 	sw (sp+16),r11
 5f4:	5b 8c 00 0c 	sw (sp+12),r12
 5f8:	5b 8d 00 08 	sw (sp+8),r13
 5fc:	5b 9d 00 04 	sw (sp+4),ra
 600:	b8 20 68 00 	mv r13,r1
	uint32_t i;
        for (i=0; i< size;i++)
 604:	44 20 00 09 	be r1,r0,628 <buffercam_upload+0x3c>
 608:	78 0b 00 00 	mvhi r11,0x0
 60c:	39 6b 0b f0 	ori r11,r11,0xbf0
 610:	34 0c 00 00 	mvi r12,0
    	    buffercam[i]=uart_getchar1();
 614:	fb ff ff 90 	calli 454 <uart_getchar1>
 618:	59 61 00 00 	sw (r11+0),r1
//==================================================================

void buffercam_upload(uint32_t size)
{
	uint32_t i;
        for (i=0; i< size;i++)
 61c:	35 8c 00 01 	addi r12,r12,1
 620:	35 6b 00 04 	addi r11,r11,4
 624:	55 ac ff fc 	bgu r13,r12,614 <buffercam_upload+0x28>
    	    buffercam[i]=uart_getchar1();
}	
 628:	2b 9d 00 04 	lw ra,(sp+4)
 62c:	2b 8b 00 10 	lw r11,(sp+16)
 630:	2b 8c 00 0c 	lw r12,(sp+12)
 634:	2b 8d 00 08 	lw r13,(sp+8)
 638:	37 9c 00 10 	addi sp,sp,16
 63c:	c3 a0 00 00 	ret

00000640 <buffercam_uartsend>:

//==================================================================

void buffercam_uartsend(uint32_t size)
{
 640:	37 9c ff e8 	addi sp,sp,-24
 644:	5b 8b 00 18 	sw (sp+24),r11
 648:	5b 8c 00 14 	sw (sp+20),r12
 64c:	5b 8d 00 10 	sw (sp+16),r13
 650:	5b 8e 00 0c 	sw (sp+12),r14
 654:	5b 8f 00 08 	sw (sp+8),r15
 658:	5b 9d 00 04 	sw (sp+4),ra
 65c:	b8 20 68 00 	mv r13,r1
	uint32_t i;

    	for (i=1; i< size;i++){
 660:	34 01 00 01 	mvi r1,1
 664:	50 2d 00 0e 	bgeu r1,r13,69c <buffercam_uartsend+0x5c>
 668:	78 0c 00 00 	mvhi r12,0x0
 66c:	39 8c 0b f0 	ori r12,r12,0xbf0
 670:	34 0b 00 01 	mvi r11,1
				
		if (buffercam[i]==0x76 && buffercam[i+1]==0x00){
 674:	b9 80 78 00 	mv r15,r12
 678:	34 0e 00 76 	mvi r14,118
 67c:	3d 62 00 02 	sli r2,r11,2
 680:	b5 82 10 00 	add r2,r12,r2
 684:	28 42 00 00 	lw r2,(r2+0)
 688:	44 4e 00 0d 	be r2,r14,6bc <buffercam_uartsend+0x7c>
 68c:	35 6b 00 01 	addi r11,r11,1
			i=i+5;
		} 
		
    		uart_putchar0(buffercam[i]);
 690:	20 41 00 ff 	andi r1,r2,0xff
 694:	fb ff ff 8b 	calli 4c0 <uart_putchar0>

void buffercam_uartsend(uint32_t size)
{
	uint32_t i;

    	for (i=1; i< size;i++){
 698:	55 ab ff f9 	bgu r13,r11,67c <buffercam_uartsend+0x3c>
			i=i+5;
		} 
		
    		uart_putchar0(buffercam[i]);
	}
}
 69c:	2b 9d 00 04 	lw ra,(sp+4)
 6a0:	2b 8b 00 18 	lw r11,(sp+24)
 6a4:	2b 8c 00 14 	lw r12,(sp+20)
 6a8:	2b 8d 00 10 	lw r13,(sp+16)
 6ac:	2b 8e 00 0c 	lw r14,(sp+12)
 6b0:	2b 8f 00 08 	lw r15,(sp+8)
 6b4:	37 9c 00 18 	addi sp,sp,24
 6b8:	c3 a0 00 00 	ret
{
	uint32_t i;

    	for (i=1; i< size;i++){
				
		if (buffercam[i]==0x76 && buffercam[i+1]==0x00){
 6bc:	35 61 00 01 	addi r1,r11,1
 6c0:	3c 23 00 02 	sli r3,r1,2
			i=i+5;
 6c4:	35 64 00 05 	addi r4,r11,5
{
	uint32_t i;

    	for (i=1; i< size;i++){
				
		if (buffercam[i]==0x76 && buffercam[i+1]==0x00){
 6c8:	b5 e3 18 00 	add r3,r15,r3
 6cc:	28 63 00 00 	lw r3,(r3+0)
			i=i+5;
 6d0:	3c 84 00 02 	sli r4,r4,2
 6d4:	35 6b 00 06 	addi r11,r11,6
 6d8:	b5 e4 20 00 	add r4,r15,r4
{
	uint32_t i;

    	for (i=1; i< size;i++){
				
		if (buffercam[i]==0x76 && buffercam[i+1]==0x00){
 6dc:	5c 60 00 03 	bne r3,r0,6e8 <buffercam_uartsend+0xa8>
			i=i+5;
 6e0:	28 82 00 00 	lw r2,(r4+0)
 6e4:	e3 ff ff eb 	bi 690 <buffercam_uartsend+0x50>
{
	uint32_t i;

    	for (i=1; i< size;i++){
				
		if (buffercam[i]==0x76 && buffercam[i+1]==0x00){
 6e8:	b8 20 58 00 	mv r11,r1
 6ec:	e3 ff ff e9 	bi 690 <buffercam_uartsend+0x50>

000006f0 <resetcommand>:
	}
}

//==================================================================

void resetcommand(char c){
 6f0:	37 9c ff fc 	addi sp,sp,-4
 6f4:	5b 9d 00 04 	sw (sp+4),ra
 6f8:	78 01 00 00 	mvhi r1,0x0
 6fc:	38 21 0b f0 	ori r1,r1,0xbf0
 700:	34 22 04 00 	addi r2,r1,1024

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
    	buffercam[i]=0;
 704:	58 20 00 00 	sw (r1+0),r0
 708:	34 21 00 04 	addi r1,r1,4
//==================================================================

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
 70c:	5c 22 ff fe 	bne r1,r2,704 <resetcommand+0x14>

void resetcommand(char c){

	buffercam_clear();

	uart_putchar1(COMMANDSEND);
 710:	34 01 00 56 	mvi r1,86
 714:	fb ff ff 74 	calli 4e4 <uart_putchar1>
	uart_putchar1(SERIALNUM);
 718:	34 01 00 00 	mvi r1,0
 71c:	fb ff ff 72 	calli 4e4 <uart_putchar1>
	uart_putchar1(CMD_RESET);
 720:	34 01 00 26 	mvi r1,38
 724:	fb ff ff 70 	calli 4e4 <uart_putchar1>
	uart_putchar1(COMMANDEND);
 728:	34 01 00 00 	mvi r1,0
 72c:	fb ff ff 6e 	calli 4e4 <uart_putchar1>
	buffercam_upload(1);
 730:	34 01 00 01 	mvi r1,1
 734:	fb ff ff ae 	calli 5ec <buffercam_upload>
//	buffercam_uartsend(71);
}
 738:	2b 9d 00 04 	lw ra,(sp+4)
 73c:	37 9c 00 04 	addi sp,sp,4
 740:	c3 a0 00 00 	ret

00000744 <getversioncommand>:

//==================================================================

void getversioncommand(char c)
{
 744:	37 9c ff fc 	addi sp,sp,-4
 748:	5b 9d 00 04 	sw (sp+4),ra
 74c:	78 01 00 00 	mvhi r1,0x0
 750:	38 21 0b f0 	ori r1,r1,0xbf0
//	buffercam_uartsend(71);
}

//==================================================================

void getversioncommand(char c)
 754:	34 22 04 00 	addi r2,r1,1024

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
    	buffercam[i]=0;
 758:	58 20 00 00 	sw (r1+0),r0
 75c:	34 21 00 04 	addi r1,r1,4
//==================================================================

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
 760:	5c 22 ff fe 	bne r1,r2,758 <getversioncommand+0x14>
void getversioncommand(char c)
{

	buffercam_clear();

	uart_putchar1(COMMANDSEND);
 764:	34 01 00 56 	mvi r1,86
 768:	fb ff ff 5f 	calli 4e4 <uart_putchar1>
	uart_putchar1(SERIALNUM);
 76c:	34 01 00 00 	mvi r1,0
 770:	fb ff ff 5d 	calli 4e4 <uart_putchar1>
	uart_putchar1(CMD_GETVERSION);
 774:	34 01 00 11 	mvi r1,17
 778:	fb ff ff 5b 	calli 4e4 <uart_putchar1>
	uart_putchar1(COMMANDEND);
 77c:	34 01 00 00 	mvi r1,0
 780:	fb ff ff 59 	calli 4e4 <uart_putchar1>

	buffercam_upload(15);
 784:	34 01 00 0f 	mvi r1,15
 788:	fb ff ff 99 	calli 5ec <buffercam_upload>
	//buffercam_uartsend(15);
}
 78c:	2b 9d 00 04 	lw ra,(sp+4)
 790:	37 9c 00 04 	addi sp,sp,4
 794:	c3 a0 00 00 	ret

00000798 <takephotocommand>:

//==================================================================

//take_picture
void takephotocommand(char c)
{
 798:	37 9c ff fc 	addi sp,sp,-4
 79c:	5b 9d 00 04 	sw (sp+4),ra
 7a0:	78 01 00 00 	mvhi r1,0x0
 7a4:	38 21 0b f0 	ori r1,r1,0xbf0
}

//==================================================================

//take_picture
void takephotocommand(char c)
 7a8:	34 22 04 00 	addi r2,r1,1024

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
    	buffercam[i]=0;
 7ac:	58 20 00 00 	sw (r1+0),r0
 7b0:	34 21 00 04 	addi r1,r1,4
//==================================================================

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
 7b4:	5c 22 ff fe 	bne r1,r2,7ac <takephotocommand+0x14>
{
	uint32_t x='0';	
	
	buffercam_clear();
        
	uart_putchar1(COMMANDSEND);
 7b8:	34 01 00 56 	mvi r1,86
 7bc:	fb ff ff 4a 	calli 4e4 <uart_putchar1>
	uart_putchar1(SERIALNUM);
 7c0:	34 01 00 00 	mvi r1,0
 7c4:	fb ff ff 48 	calli 4e4 <uart_putchar1>
	uart_putchar1(CMD_TAKEPHOTO);
 7c8:	34 01 00 36 	mvi r1,54
 7cc:	fb ff ff 46 	calli 4e4 <uart_putchar1>
	uart_putchar1(CONS);	
 7d0:	34 01 00 01 	mvi r1,1
 7d4:	fb ff ff 44 	calli 4e4 <uart_putchar1>
	uart_putchar1(FBUF_STOPCURRENTFRAME);	
 7d8:	34 01 00 00 	mvi r1,0
 7dc:	fb ff ff 42 	calli 4e4 <uart_putchar1>

	buffercam_upload(5);
 7e0:	34 01 00 05 	mvi r1,5
 7e4:	fb ff ff 82 	calli 5ec <buffercam_upload>
	//buffercam_uartsend(5);

//==================================================================
	
}
 7e8:	2b 9d 00 04 	lw ra,(sp+4)
 7ec:	37 9c 00 04 	addi sp,sp,4
 7f0:	c3 a0 00 00 	ret

000007f4 <getbufflencommand>:
//read_size,,, confirmar si tomo la foto (buf[0]==0x76 && buf[2]==0x34)
//hay info importante XL,REVISAR

int getbufflencommand()
{
 7f4:	37 9c ff f8 	addi sp,sp,-8
 7f8:	5b 8b 00 08 	sw (sp+8),r11
 7fc:	5b 9d 00 04 	sw (sp+4),ra
 800:	78 0b 00 00 	mvhi r11,0x0
 804:	39 6b 0b f0 	ori r11,r11,0xbf0
 808:	b9 60 08 00 	mv r1,r11
	
}
//read_size,,, confirmar si tomo la foto (buf[0]==0x76 && buf[2]==0x34)
//hay info importante XL,REVISAR

int getbufflencommand()
 80c:	35 62 04 00 	addi r2,r11,1024

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
    	buffercam[i]=0;
 810:	58 20 00 00 	sw (r1+0),r0
 814:	34 21 00 04 	addi r1,r1,4
//==================================================================

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
 818:	5c 22 ff fe 	bne r1,r2,810 <getbufflencommand+0x1c>
	uint32_t bytes,  x='0';	
	buffercam_clear();
	//uart1->rxtx;
	//msleep(30);        
	
	uart_putchar1(COMMANDSEND);
 81c:	34 01 00 56 	mvi r1,86
 820:	fb ff ff 31 	calli 4e4 <uart_putchar1>
	uart_putchar1(SERIALNUM);
 824:	34 01 00 00 	mvi r1,0
 828:	fb ff ff 2f 	calli 4e4 <uart_putchar1>
	uart_putchar1(CMD_GETBUFFLEN);
 82c:	34 01 00 34 	mvi r1,52
 830:	fb ff ff 2d 	calli 4e4 <uart_putchar1>
	uart_putchar1(CONS);	
 834:	34 01 00 01 	mvi r1,1
 838:	fb ff ff 2b 	calli 4e4 <uart_putchar1>
	uart_putchar1(FBUF_CURRENTFRAME);	
 83c:	34 01 00 00 	mvi r1,0
 840:	fb ff ff 29 	calli 4e4 <uart_putchar1>

	buffercam_upload(9);
 844:	34 01 00 09 	mvi r1,9
 848:	fb ff ff 69 	calli 5ec <buffercam_upload>
	bytes=bytes<<8;	
	bytes=buffercam[6];
	bytes=bytes<<8;	
	bytes=buffercam[7];
	bytes=bytes<<8;	
	bytes=buffercam[8];
 84c:	29 61 00 20 	lw r1,(r11+32)

	return bytes;
        //uint32_t sizeX;
	//sizeX= (buffercam[7]<<8) +buffercam[8];
	
}
 850:	3c 21 00 08 	sli r1,r1,8
 854:	2b 9d 00 04 	lw ra,(sp+4)
 858:	2b 8b 00 08 	lw r11,(sp+8)
 85c:	37 9c 00 08 	addi sp,sp,8
 860:	c3 a0 00 00 	ret

00000864 <readphotocommand>:

//==================================================================

//export_buf
void readphotocommand(int  bytes)
{
 864:	37 9c ff d8 	addi sp,sp,-40
 868:	5b 8b 00 28 	sw (sp+40),r11
 86c:	5b 8c 00 24 	sw (sp+36),r12
 870:	5b 8d 00 20 	sw (sp+32),r13
 874:	5b 8e 00 1c 	sw (sp+28),r14
 878:	5b 8f 00 18 	sw (sp+24),r15
 87c:	5b 90 00 14 	sw (sp+20),r16
 880:	5b 91 00 10 	sw (sp+16),r17
 884:	5b 92 00 0c 	sw (sp+12),r18
 888:	5b 93 00 08 	sw (sp+8),r19
 88c:	5b 9d 00 04 	sw (sp+4),ra

	buffercam_clear();	
	
	while( addr < bytes ){

		chunk = inc;
 890:	78 02 00 00 	mvhi r2,0x0
 894:	38 42 0b f0 	ori r2,r2,0xbf0

//==================================================================

//export_buf
void readphotocommand(int  bytes)
{
 898:	b8 20 70 00 	mv r14,r1
}

//==================================================================

//export_buf
void readphotocommand(int  bytes)
 89c:	34 43 04 00 	addi r3,r2,1024

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
    	buffercam[i]=0;
 8a0:	58 40 00 00 	sw (r2+0),r0
 8a4:	34 42 00 04 	addi r2,r2,4
//==================================================================

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
 8a8:	5c 43 ff fe 	bne r2,r3,8a0 <readphotocommand+0x3c>
int addr =0;
int chunk;

	buffercam_clear();	
	
	while( addr < bytes ){
 8ac:	4c 0e 00 34 	bge r0,r14,97c <readphotocommand+0x118>
 8b0:	34 0b 00 00 	mvi r11,0

		chunk = inc;
                if (chunk > (bytes-addr)) 
 8b4:	34 13 00 c7 	mvi r19,199
 8b8:	c9 cb 60 00 	sub r12,r14,r11
 8bc:	15 91 00 10 	sri r17,r12,16
 8c0:	15 90 00 08 	sri r16,r12,8
 8c4:	49 93 00 3a 	bg r12,r19,9ac <readphotocommand+0x148>
 8c8:	01 92 00 18 	srui r18,r12,24
 8cc:	22 31 00 ff 	andi r17,r17,0xff
 8d0:	22 10 00 ff 	andi r16,r16,0xff
 8d4:	21 8f 00 ff 	andi r15,r12,0xff
 8d8:	35 8d 00 06 	addi r13,r12,6
                  chunk = bytes-addr; 
		uart_putchar1(COMMANDSEND);
 8dc:	34 01 00 56 	mvi r1,86
 8e0:	fb ff ff 01 	calli 4e4 <uart_putchar1>
		uart_putchar1(SERIALNUM);
 8e4:	34 01 00 00 	mvi r1,0
 8e8:	fb ff fe ff 	calli 4e4 <uart_putchar1>
		uart_putchar1(CMD_READBUFF);
 8ec:	34 01 00 32 	mvi r1,50
 8f0:	fb ff fe fd 	calli 4e4 <uart_putchar1>
		uart_putchar1(CONS_1);	
 8f4:	34 01 00 0c 	mvi r1,12
 8f8:	fb ff fe fb 	calli 4e4 <uart_putchar1>
		uart_putchar1(FBUF_CURRENTFRAME);	
 8fc:	34 01 00 00 	mvi r1,0
 900:	fb ff fe f9 	calli 4e4 <uart_putchar1>
		uart_putchar1(CONS_2);	
 904:	34 01 00 0a 	mvi r1,10
 908:	fb ff fe f7 	calli 4e4 <uart_putchar1>
		uart_putchar1((addr >> 24) & 0xff);
 90c:	01 61 00 18 	srui r1,r11,24
 910:	fb ff fe f5 	calli 4e4 <uart_putchar1>
		uart_putchar1((addr>>16) & 0xff);
 914:	15 62 00 10 	sri r2,r11,16
 918:	20 41 00 ff 	andi r1,r2,0xff
 91c:	fb ff fe f2 	calli 4e4 <uart_putchar1>
		uart_putchar1((addr>>8 ) & 0xff);
 920:	15 62 00 08 	sri r2,r11,8
 924:	20 41 00 ff 	andi r1,r2,0xff
 928:	fb ff fe ef 	calli 4e4 <uart_putchar1>
		uart_putchar1(addr & 0xff);
 92c:	21 61 00 ff 	andi r1,r11,0xff
 930:	fb ff fe ed 	calli 4e4 <uart_putchar1>

		uart_putchar1((chunk >> 24) & 0xff);
 934:	ba 40 08 00 	mv r1,r18
 938:	fb ff fe eb 	calli 4e4 <uart_putchar1>
		uart_putchar1((chunk>>16) & 0xff);
 93c:	ba 20 08 00 	mv r1,r17
 940:	fb ff fe e9 	calli 4e4 <uart_putchar1>
		uart_putchar1((chunk>>8 ) & 0xff);
 944:	ba 00 08 00 	mv r1,r16
 948:	fb ff fe e7 	calli 4e4 <uart_putchar1>
		uart_putchar1(chunk & 0xff);
 94c:	b9 e0 08 00 	mv r1,r15
 950:	fb ff fe e5 	calli 4e4 <uart_putchar1>

		uart_putchar1(CONS);
 954:	34 01 00 01 	mvi r1,1
 958:	fb ff fe e3 	calli 4e4 <uart_putchar1>
		uart_putchar1(ZERO);
 95c:	34 01 00 00 	mvi r1,0
 960:	fb ff fe e1 	calli 4e4 <uart_putchar1>
		for (i=0; i< 5;i++){
    	    		uart_getchar1();
		}
		*/
		
                buffercam_upload(chunk+6);
 964:	b9 a0 08 00 	mv r1,r13
 968:	fb ff ff 21 	calli 5ec <buffercam_upload>
		uart_putchar1(chunk & 0xff);

		uart_putchar1(CONS);
		uart_putchar1(ZERO);

		addr+=chunk;
 96c:	b5 6c 58 00 	add r11,r11,r12
    	    		uart_getchar1();
		}
		*/
		
                buffercam_upload(chunk+6);
	        buffercam_uartsend(chunk+6);
 970:	b9 a0 08 00 	mv r1,r13
 974:	fb ff ff 33 	calli 640 <buffercam_uartsend>
int addr =0;
int chunk;

	buffercam_clear();	
	
	while( addr < bytes ){
 978:	49 cb ff d0 	bg r14,r11,8b8 <readphotocommand+0x54>
		
                buffercam_upload(chunk+6);
	        buffercam_uartsend(chunk+6);
	}
	
}
 97c:	2b 9d 00 04 	lw ra,(sp+4)
 980:	2b 8b 00 28 	lw r11,(sp+40)
 984:	2b 8c 00 24 	lw r12,(sp+36)
 988:	2b 8d 00 20 	lw r13,(sp+32)
 98c:	2b 8e 00 1c 	lw r14,(sp+28)
 990:	2b 8f 00 18 	lw r15,(sp+24)
 994:	2b 90 00 14 	lw r16,(sp+20)
 998:	2b 91 00 10 	lw r17,(sp+16)
 99c:	2b 92 00 0c 	lw r18,(sp+12)
 9a0:	2b 93 00 08 	lw r19,(sp+8)
 9a4:	37 9c 00 28 	addi sp,sp,40
 9a8:	c3 a0 00 00 	ret
	buffercam_clear();	
	
	while( addr < bytes ){

		chunk = inc;
                if (chunk > (bytes-addr)) 
 9ac:	34 0d 00 ce 	mvi r13,206
 9b0:	34 0f 00 c8 	mvi r15,200
 9b4:	34 10 00 00 	mvi r16,0
 9b8:	34 11 00 00 	mvi r17,0
 9bc:	34 12 00 00 	mvi r18,0

	buffercam_clear();	
	
	while( addr < bytes ){

		chunk = inc;
 9c0:	34 0c 00 c8 	mvi r12,200
 9c4:	e3 ff ff c6 	bi 8dc <readphotocommand+0x78>

000009c8 <imagesize>:
}

//==================================================================

void imagesize(char c)
{
 9c8:	37 9c ff fc 	addi sp,sp,-4
 9cc:	5b 9d 00 04 	sw (sp+4),ra
 9d0:	78 01 00 00 	mvhi r1,0x0
 9d4:	38 21 0b f0 	ori r1,r1,0xbf0
	
}

//==================================================================

void imagesize(char c)
 9d8:	34 22 04 00 	addi r2,r1,1024

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
    	buffercam[i]=0;
 9dc:	58 20 00 00 	sw (r1+0),r0
 9e0:	34 21 00 04 	addi r1,r1,4
//==================================================================

void buffercam_clear()
{
	uint32_t i;
    for (i=0; i< SIZE_BUFFCAM;i++)
 9e4:	5c 22 ff fe 	bne r1,r2,9dc <imagesize+0x14>
//==================================================================

void imagesize(char c)
{
	buffercam_clear();
	uart_putchar1(COMMANDSEND);
 9e8:	34 01 00 56 	mvi r1,86
 9ec:	fb ff fe be 	calli 4e4 <uart_putchar1>
	uart_putchar1(SERIALNUM);
 9f0:	34 01 00 00 	mvi r1,0
 9f4:	fb ff fe bc 	calli 4e4 <uart_putchar1>
	uart_putchar1(WRITE_DATA);
 9f8:	34 01 00 31 	mvi r1,49
 9fc:	fb ff fe ba 	calli 4e4 <uart_putchar1>
	uart_putchar1(0X05);	
 a00:	34 01 00 05 	mvi r1,5
 a04:	fb ff fe b8 	calli 4e4 <uart_putchar1>
	uart_putchar1(0X04);	
 a08:	34 01 00 04 	mvi r1,4
 a0c:	fb ff fe b6 	calli 4e4 <uart_putchar1>
	uart_putchar1(CONS);
 a10:	34 01 00 01 	mvi r1,1
 a14:	fb ff fe b4 	calli 4e4 <uart_putchar1>
	uart_putchar1(ZERO);
 a18:	34 01 00 00 	mvi r1,0
 a1c:	fb ff fe b2 	calli 4e4 <uart_putchar1>
	uart_putchar1(0X19);	
 a20:	34 01 00 19 	mvi r1,25
 a24:	fb ff fe b0 	calli 4e4 <uart_putchar1>
	uart_putchar1(RESOLUTION);
 a28:	34 01 00 22 	mvi r1,34
 a2c:	fb ff fe ae 	calli 4e4 <uart_putchar1>

	buffercam_upload(5);
 a30:	34 01 00 05 	mvi r1,5
 a34:	fb ff fe ee 	calli 5ec <buffercam_upload>
	//buffercam_uartsend(5);

//==================================================================

}
 a38:	2b 9d 00 04 	lw ra,(sp+4)
 a3c:	37 9c 00 04 	addi sp,sp,4
 a40:	c3 a0 00 00 	ret

00000a44 <pppp>:

//p = &arreglo[0]; 

		
	
}
 a44:	c3 a0 00 00 	ret
